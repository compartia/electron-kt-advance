<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="cache_insert">
   <statistics avg-context-complexity="4.79" avg-predicate-complexity="1.84" context-complexity="2388" predicate-complexity="918" size="499"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/my_syslog" num="1"/>
    <efn name="dnsmasq/whine_malloc" num="1"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="194148" file="src/cache.c" line="446"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="194" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="0">
     <location byte="194148" file="src/cache.c" line="446"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="2">
     <location byte="194189" file="src/cache.c" line="447"/>
     <predicate from="iuint" tag="unsigned-to-signed-cast" to="iint">
      <exp binop="band" etag="binop" xstr="((caste (flags:unsigned int) &amp; ((1 &lt;&lt; 2):unsigned int):unsigned int">
       <exp1 etag="caste" xstr="caste (flags:unsigned int)">
        <typ ikind="iuint" ttag="tint"/>
        <exp etag="lval" xstr="flags">
         <lval>
          <lhost>
           <var vid="6033" vname="flags"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 2):unsigned int">
        <exp1 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iuint" intValue="1"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-exp" p-complexity="1">
     <location byte="194189" file="src/cache.c" line="447"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-exp" p-complexity="0">
     <location byte="194189" file="src/cache.c" line="447"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-op" p-complexity="0">
     <location byte="194189" file="src/cache.c" line="447"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-op" p-complexity="1">
     <location byte="194189" file="src/cache.c" line="447"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="196"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="1">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-op" p-complexity="0">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-op" p-complexity="1">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-op" p-complexity="0">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-op" p-complexity="1">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-op" p-complexity="0">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="11">
       <constant ctag="cint64" ikind="iint" intValue="11"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="15" origin="prim-op" p-complexity="1">
     <location byte="194248" file="src/cache.c" line="451"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="11">
       <constant ctag="cint64" ikind="iint" intValue="11"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-op" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-op" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="22" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="25" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="26" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="27" origin="prim-exp" p-complexity="1">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="28" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="29" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="30" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="31" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="32" origin="prim-exp" p-complexity="0">
     <location byte="194304" file="src/cache.c" line="453"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="198"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="33" origin="prim-exp" p-complexity="6">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="max_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="34" origin="prim-exp" p-complexity="0">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="35" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="36" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="37" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="38" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="39" origin="prim-exp" p-complexity="6">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="max_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="40" origin="prim-exp" p-complexity="0">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="41" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="42" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="43" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="44" origin="prim-lval" p-complexity="1">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="45" origin="prim-exp" p-complexity="0">
     <location byte="194365" file="src/cache.c" line="455"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6032" vname="ttl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="46" origin="prim-exp" p-complexity="6">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="max_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="47" origin="prim-exp" p-complexity="0">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="48" origin="prim-lval" p-complexity="1">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="49" origin="prim-lval" p-complexity="1">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="50" origin="prim-lval" p-complexity="1">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="51" origin="prim-lval" p-complexity="1">
     <location byte="194445" file="src/cache.c" line="456"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="201"/>
       <node name="if-then"/>
       <node name="stmt" num="200"/>
       <node name="if-then"/>
       <node name="stmt" num="199"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="52" origin="prim-exp" p-complexity="6">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="min_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="53" origin="prim-exp" p-complexity="0">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="54" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="55" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="56" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="57" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="58" origin="prim-exp" p-complexity="6">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="min_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="59" origin="prim-exp" p-complexity="0">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="60" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="61" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="62" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="63" origin="prim-lval" p-complexity="1">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="64" origin="prim-exp" p-complexity="0">
     <location byte="194488" file="src/cache.c" line="457"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6032" vname="ttl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="65" origin="prim-exp" p-complexity="6">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="min_cache_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="66" origin="prim-exp" p-complexity="0">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="67" origin="prim-lval" p-complexity="1">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="68" origin="prim-lval" p-complexity="1">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="69" origin="prim-lval" p-complexity="1">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="70" origin="prim-lval" p-complexity="1">
     <location byte="194568" file="src/cache.c" line="458"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="204"/>
       <node name="if-then"/>
       <node name="stmt" num="203"/>
       <node name="if-then"/>
       <node name="stmt" num="202"/>
       <node name="if-then"/>
       <node name="stmt" num="197"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="71" origin="prim-exp" p-complexity="0">
     <location byte="194615" file="src/cache.c" line="462"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5907" vname="insert_error"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="72" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="73" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="74" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="75" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="76" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="77" origin="prim-exp" p-complexity="0">
     <location byte="194637" file="src/cache.c" line="463"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="206"/>
       <node name="if-then"/>
       <node name="stmt" num="205"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="78" origin="prim-exp" p-complexity="0">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="79" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="80" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="81" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="82" origin="prim-exp" p-complexity="0">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="83" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="84" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="85" origin="prim-exp" p-complexity="1">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="86" origin="prim-exp" p-complexity="0">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6031" vname="now"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="87" origin="prim-exp" p-complexity="0">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="207"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="88" origin="prim-exp" p-complexity="0">
     <location byte="194662" file="src/cache.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="89" origin="prim-exp" p-complexity="1">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="90" origin="prim-exp" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="91" origin="prim-op" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="92" origin="prim-op" p-complexity="1">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="93" origin="prim-op" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="94" origin="prim-op" p-complexity="1">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="95" origin="prim-exp" p-complexity="1">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="96" origin="prim-exp" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="97" origin="prim-op" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="98" origin="prim-op" p-complexity="1">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="99" origin="prim-exp" p-complexity="0">
     <location byte="194732" file="src/cache.c" line="474"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="100" origin="prim-exp" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="101" origin="prim-exp" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="102" origin="prim-op" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="103" origin="prim-op" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="104" origin="prim-exp" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="new-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="105" origin="prim-exp" p-complexity="6">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="106" origin="prim-exp" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="107" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="108" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="109" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="110" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="111" origin="prim-op" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="112" origin="prim-op" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="113" origin="prim-exp" p-complexity="6">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <offset>
          <offset>
           <offset>
            <field ckey="42" fname="s_addr"/>
           </offset>
           <field ckey="177" fname="addr4"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
         <field ckey="197" fname="addr"/>
        </offset>
        <field ckey="196" fname="addr"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="114" origin="prim-exp" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="115" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="116" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="117" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="118" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="119" origin="prim-exp" p-complexity="6">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6030" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <offset>
          <field ckey="42" fname="s_addr"/>
         </offset>
         <field ckey="177" fname="addr4"/>
        </offset>
        <field ckey="176" fname="addr"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="120" origin="prim-exp" p-complexity="0">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="121" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="122" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="123" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="124" origin="prim-lval" p-complexity="1">
     <location byte="194802" file="src/cache.c" line="476"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="125" origin="prim-exp" p-complexity="0">
     <location byte="194926" file="src/cache.c" line="478"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="215"/>
       <node name="if-then"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="126" origin="prim-exp" p-complexity="1">
     <location byte="194926" file="src/cache.c" line="478"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="215"/>
       <node name="if-then"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="127" origin="prim-exp" p-complexity="1">
     <location byte="194926" file="src/cache.c" line="478"/>
     <predicate tag="global-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="215"/>
       <node name="if-then"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="128" origin="prim-exp" p-complexity="1">
     <location byte="194926" file="src/cache.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="215"/>
       <node name="if-then"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="129" origin="prim-exp" p-complexity="1">
     <location byte="194926" file="src/cache.c" line="478"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="215"/>
       <node name="if-then"/>
       <node name="stmt" num="214"/>
       <node name="if-then"/>
       <node name="stmt" num="213"/>
       <node name="if-then"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="130" origin="prim-exp" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="131" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="132" origin="prim-op" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="133" origin="prim-op" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="134" origin="prim-exp" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="new-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="135" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="136" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="137" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="138" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="139" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="140" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="141" origin="prim-op" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="142" origin="prim-op" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="143" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="new">
              <lval>
               <lhost>
                <var vid="6034" vname="new"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <offset>
               <offset>
                <field ckey="177" fname="addr6"/>
               </offset>
               <field ckey="176" fname="addr"/>
              </offset>
              <field ckey="197" fname="addr"/>
             </offset>
             <field ckey="196" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="0">
          <constant ctag="cint64" ikind="iint" intValue="0"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="144" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="145" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="146" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="147" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="148" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="149" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="150" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="151" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="152" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="153" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="154" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="155" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="156" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="157" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="158" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="addr">
              <lval>
               <lhost>
                <var vid="6030" vname="addr"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="0">
          <constant ctag="cint64" ikind="iint" intValue="0"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="159" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6030" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="160" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="161" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="162" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="163" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="164" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="165" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="166" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="167" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="168" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="169" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="170" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="171" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="172" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="173" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="new">
              <lval>
               <lhost>
                <var vid="6034" vname="new"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <offset>
               <offset>
                <field ckey="177" fname="addr6"/>
               </offset>
               <field ckey="176" fname="addr"/>
              </offset>
              <field ckey="197" fname="addr"/>
             </offset>
             <field ckey="196" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="174" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="175" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="176" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="177" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="178" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="179" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="180" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="181" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="182" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="183" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="184" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="185" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="186" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="187" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="188" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="addr">
              <lval>
               <lhost>
                <var vid="6030" vname="addr"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="189" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6030" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="190" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="191" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="192" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="193" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="194" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="195" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="196" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="197" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="198" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="199" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="200" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="201" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="202" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="203" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="new">
              <lval>
               <lhost>
                <var vid="6034" vname="new"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <offset>
               <offset>
                <field ckey="177" fname="addr6"/>
               </offset>
               <field ckey="176" fname="addr"/>
              </offset>
              <field ckey="197" fname="addr"/>
             </offset>
             <field ckey="196" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="204" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="205" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="206" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="207" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="208" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="209" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="210" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="211" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="212" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="213" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="214" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="215" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="216" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="217" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="218" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="addr">
              <lval>
               <lhost>
                <var vid="6030" vname="addr"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="219" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6030" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="220" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="221" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="222" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="223" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="224" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="225" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="226" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="227" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="228" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="229" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="230" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="231" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="232" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="233" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="new">
              <lval>
               <lhost>
                <var vid="6034" vname="new"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <offset>
               <offset>
                <field ckey="177" fname="addr6"/>
               </offset>
               <field ckey="176" fname="addr"/>
              </offset>
              <field ckey="197" fname="addr"/>
             </offset>
             <field ckey="196" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="3">
          <constant ctag="cint64" ikind="iint" intValue="3"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="234" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="235" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="236" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="237" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="238" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="239" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="240" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="241" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="242" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="243" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="new">
           <lval>
            <lhost>
             <var vid="6034" vname="new"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <offset>
            <offset>
             <field ckey="177" fname="addr6"/>
            </offset>
            <field ckey="176" fname="addr"/>
           </offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="244" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="245" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="246" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="247" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (new-&gt;addr.addr.addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (new-&gt;addr.addr.addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
            <field ckey="197" fname="addr"/>
           </offset>
           <field ckey="196" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="248" origin="prim-exp" p-complexity="12">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="addr">
              <lval>
               <lhost>
                <var vid="6030" vname="addr"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="177" fname="addr6"/>
             </offset>
             <field ckey="176" fname="addr"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="3">
          <constant ctag="cint64" ikind="iint" intValue="3"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="249" origin="prim-exp" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6030" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="250" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="251" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="252" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="253" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="254" origin="prim-lval" p-complexity="1">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="255" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="256" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="257" origin="prim-op" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="258" origin="prim-op" p-complexity="6">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6030" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="177" fname="addr6"/>
          </offset>
          <field ckey="176" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="259" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="260" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="261" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="262" origin="prim-lval" p-complexity="7">
     <location byte="194947" file="src/cache.c" line="480"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (addr-&gt;addr.addr6):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (addr-&gt;addr.addr6):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (addr-&gt;addr.addr6)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6030" vname="addr"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="177" fname="addr6"/>
           </offset>
           <field ckey="176" fname="addr"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="263" origin="prim-exp" p-complexity="0">
     <location byte="195444" file="src/cache.c" line="482"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="224"/>
       <node name="if-then"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="264" origin="prim-exp" p-complexity="1">
     <location byte="195444" file="src/cache.c" line="482"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="224"/>
       <node name="if-then"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="265" origin="prim-exp" p-complexity="1">
     <location byte="195444" file="src/cache.c" line="482"/>
     <predicate tag="global-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="224"/>
       <node name="if-then"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="266" origin="prim-exp" p-complexity="1">
     <location byte="195444" file="src/cache.c" line="482"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="224"/>
       <node name="if-then"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="267" origin="prim-exp" p-complexity="1">
     <location byte="195444" file="src/cache.c" line="482"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="224"/>
       <node name="if-then"/>
       <node name="stmt" num="223"/>
       <node name="if-then"/>
       <node name="stmt" num="222"/>
       <node name="if-then"/>
       <node name="stmt" num="221"/>
       <node name="if-then"/>
       <node name="stmt" num="220"/>
       <node name="if-then"/>
       <node name="stmt" num="219"/>
       <node name="if-then"/>
       <node name="stmt" num="218"/>
       <node name="if-else"/>
       <node name="stmt" num="212"/>
       <node name="if-then"/>
       <node name="stmt" num="211"/>
       <node name="if-then"/>
       <node name="stmt" num="210"/>
       <node name="if-then"/>
       <node name="stmt" num="209"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="268" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="269" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="270" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="271" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="272" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="273" origin="prim-exp" p-complexity="0">
     <location byte="195491" file="src/cache.c" line="487"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="226"/>
       <node name="if-then"/>
       <node name="stmt" num="208"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="274" origin="prim-exp" p-complexity="0">
     <location byte="195537" file="src/cache.c" line="492"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5901" vname="cache_tail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="228"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="275" origin="prim-exp" p-complexity="0">
     <location byte="195537" file="src/cache.c" line="492"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="276" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="277" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="278" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="279" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="280" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="281" origin="prim-exp" p-complexity="0">
     <location byte="195590" file="src/cache.c" line="495"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="231"/>
       <node name="if-else"/>
       <node name="stmt" num="229"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="282" origin="prim-exp" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="new-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="283" origin="prim-exp" p-complexity="6">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="284" origin="prim-exp" p-complexity="0">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="285" origin="prim-lval" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="286" origin="prim-lval" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="287" origin="prim-lval" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="288" origin="prim-lval" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="289" origin="prim-op" p-complexity="0">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="290" origin="prim-op" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="291" origin="prim-op" p-complexity="0">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="292" origin="prim-op" p-complexity="1">
     <location byte="195627" file="src/cache.c" line="502"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="293" origin="prim-exp" p-complexity="0">
     <location byte="195678" file="src/cache.c" line="508"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6037" vname="free_avail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="294" origin="prim-exp" p-complexity="0">
     <location byte="195732" file="src/cache.c" line="511"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6038" vname="warned"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="234"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="295" origin="prim-exp" p-complexity="0">
     <location byte="195756" file="src/cache.c" line="513"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;Internal error in cache.&quot;">
       <constant ctag="cstr" strValue="Internal error in cache."/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="235"/>
       <node name="if-then"/>
       <node name="stmt" num="234"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="296" origin="prim-exp" p-complexity="0">
     <location byte="195756" file="src/cache.c" line="513"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;Internal error in cache.&quot;">
       <constant ctag="cstr" strValue="Internal error in cache."/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="235"/>
       <node name="if-then"/>
       <node name="stmt" num="234"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="297" origin="prim-exp" p-complexity="0">
     <location byte="195756" file="src/cache.c" line="513"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;Internal error in cache.&quot;">
       <constant ctag="cstr" strValue="Internal error in cache."/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="235"/>
       <node name="if-then"/>
       <node name="stmt" num="234"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="298" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="299" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="300" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="301" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="302" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="303" origin="prim-exp" p-complexity="0">
     <location byte="195851" file="src/cache.c" line="517"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="237"/>
       <node name="if-then"/>
       <node name="stmt" num="233"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="304" origin="prim-exp" p-complexity="0">
     <location byte="195878" file="src/cache.c" line="520"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6036" vname="freed_all"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="305" origin="prim-exp" p-complexity="6">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="197" fname="addr"/>
        </offset>
        <field ckey="196" fname="addr"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="306" origin="prim-exp" p-complexity="0">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="307" origin="prim-lval" p-complexity="1">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="308" origin="prim-lval" p-complexity="1">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="309" origin="prim-lval" p-complexity="1">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="310" origin="prim-lval" p-complexity="1">
     <location byte="195903" file="src/cache.c" line="522"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="311" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="312" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="313" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="314" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="315" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6040" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="316" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6040" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="317" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6040" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="318" origin="prim-exp" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6040" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="319" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (free_addr)">
       <lval>
        <lhost>
         <var vid="6039" vname="free_addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="320" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (free_addr)">
       <lval>
        <lhost>
         <var vid="6039" vname="free_addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="321" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (free_addr)">
       <lval>
        <lhost>
         <var vid="6039" vname="free_addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="322" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6031" vname="now"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="323" origin="prim-exp" p-complexity="6">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="324" origin="prim-exp" p-complexity="0">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="325" origin="prim-lval" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="326" origin="prim-lval" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="327" origin="prim-lval" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="328" origin="prim-lval" p-complexity="1">
     <location byte="195981" file="src/cache.c" line="531"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="329" origin="prim-exp" p-complexity="0">
     <location byte="196053" file="src/cache.c" line="532"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="cache_live_freed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="330" origin="prim-op" p-complexity="2">
     <location byte="196053" file="src/cache.c" line="532"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="cache_live_freed">
       <lval>
        <lhost>
         <var vid="5906" vname="cache_live_freed"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="331" origin="prim-op" p-complexity="2">
     <location byte="196053" file="src/cache.c" line="532"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="cache_live_freed">
       <lval>
        <lhost>
         <var vid="5906" vname="cache_live_freed"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="332" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="333" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="334" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="335" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="336" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="337" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="176" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="338" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="339" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 176*))">
       <typ ttag="tptr">
        <typ ckey="176" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="340" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 176*))">
       <typ ttag="tptr">
        <typ ckey="176" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="341" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 176*))">
       <typ ttag="tptr">
        <typ ckey="176" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="342" origin="prim-exp" p-complexity="0">
     <location byte="196094" file="src/cache.c" line="536"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6031" vname="now"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
       <node name="if-then"/>
       <node name="stmt" num="232"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="343" origin="prim-exp" p-complexity="0">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="strlen" id="344" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="strlen" id="345" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="strlen" id="346" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="strlen" id="347" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (name:(char*))]">
       <arg etag="caste" xstr="caste (name:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="name">
         <lval>
          <lhost>
           <var vid="6029" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="strlen" id="348" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (name:(char*))]">
       <arg etag="caste" xstr="caste (name:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="name">
         <lval>
          <lhost>
           <var vid="6029" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="349" origin="prim-exp" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="350" origin="prim-exp" p-complexity="0">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="351" origin="prim-exp" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="352" origin="prim-exp" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="353" origin="prim-exp" p-complexity="1">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="354" origin="prim-exp" p-complexity="0">
     <location byte="196196" file="src/cache.c" line="544"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6044" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="355" origin="prim-exp" p-complexity="0">
     <location byte="196241" file="src/cache.c" line="546"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="big_free"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="356" origin="prim-exp" p-complexity="0">
     <location byte="196265" file="src/cache.c" line="548"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="big_free"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="357" origin="prim-exp" p-complexity="6">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="big_free">
         <lval>
          <lhost>
           <var vid="5908" vname="big_free"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="194" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="358" origin="prim-exp" p-complexity="0">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="big_free"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="359" origin="prim-lval" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="big_free">
       <lval>
        <lhost>
         <var vid="5908" vname="big_free"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="360" origin="prim-lval" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="big_free">
       <lval>
        <lhost>
         <var vid="5908" vname="big_free"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="361" origin="prim-lval" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="big_free">
       <lval>
        <lhost>
         <var vid="5908" vname="big_free"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="362" origin="prim-lval" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="big_free">
       <lval>
        <lhost>
         <var vid="5908" vname="big_free"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="363" origin="prim-exp" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="big_free-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="big_free">
          <lval>
           <lhost>
            <var vid="5908" vname="big_free"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="194" fname="next"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="364" origin="prim-exp" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="big_free-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="big_free">
          <lval>
           <lhost>
            <var vid="5908" vname="big_free"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="194" fname="next"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="365" origin="prim-exp" p-complexity="1">
     <location byte="196291" file="src/cache.c" line="549"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="big_free-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="big_free">
          <lval>
           <lhost>
            <var vid="5908" vname="big_free"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="194" fname="next"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="366" origin="prim-exp" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="bignames_left"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="367" origin="prim-exp" p-complexity="1">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="flags">
       <lval>
        <lhost>
         <var vid="6033" vname="flags"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="368" origin="prim-exp" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="369" origin="prim-op" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="14">
       <constant ctag="cint64" ikind="iint" intValue="14"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="370" origin="prim-op" p-complexity="1">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="14">
       <constant ctag="cint64" ikind="iint" intValue="14"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="371" origin="prim-op" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="12">
       <constant ctag="cint64" ikind="iint" intValue="12"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="372" origin="prim-op" p-complexity="1">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="12">
       <constant ctag="cint64" ikind="iint" intValue="12"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="373" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="374" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="375" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="376" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="377" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="378" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="250"/>
       <node name="if-then"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="379" origin="prim-exp" p-complexity="1">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="194" ttag="tcomp"/>
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6042" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="380" origin="prim-exp" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="381" origin="prim-exp" p-complexity="0">
     <location byte="196329" file="src/cache.c" line="551"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6035" vname="big_name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="382" origin="prim-exp" p-complexity="0">
     <location byte="196528" file="src/cache.c" line="557"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="bignames_left"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="383" origin="prim-exp" p-complexity="0">
     <location byte="196555" file="src/cache.c" line="558"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="bignames_left"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-then"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="384" origin="prim-op" p-complexity="2">
     <location byte="196555" file="src/cache.c" line="558"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="bignames_left">
       <lval>
        <lhost>
         <var vid="5909" vname="bignames_left"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-then"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="385" origin="prim-op" p-complexity="2">
     <location byte="196555" file="src/cache.c" line="558"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="bignames_left">
       <lval>
        <lhost>
         <var vid="5909" vname="bignames_left"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-then"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="386" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="387" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="388" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="389" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="global-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="390" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="391" origin="prim-exp" p-complexity="0">
     <location byte="196497" file="src/cache.c" line="555"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="257"/>
       <node name="if-else"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="247"/>
       <node name="if-else"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="392" origin="prim-exp" p-complexity="0">
     <location byte="196587" file="src/cache.c" line="563"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="393" origin="prim-exp" p-complexity="1">
     <location byte="196587" file="src/cache.c" line="563"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="394" origin="prim-exp" p-complexity="1">
     <location byte="196587" file="src/cache.c" line="563"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="395" origin="prim-exp" p-complexity="1">
     <location byte="196587" file="src/cache.c" line="563"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="loop"/>
       <node name="stmt" num="227"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="396" origin="prim-exp" p-complexity="0">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="397" origin="prim-lval" p-complexity="1">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="398" origin="prim-lval" p-complexity="1">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="399" origin="prim-lval" p-complexity="1">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="400" origin="prim-lval" p-complexity="1">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="401" origin="prim-exp" p-complexity="0">
     <location byte="196624" file="src/cache.c" line="567"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6033" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="402" origin="prim-exp" p-complexity="0">
     <location byte="196646" file="src/cache.c" line="568"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6035" vname="big_name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="403" origin="prim-exp" p-complexity="0">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="404" origin="prim-lval" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="405" origin="prim-lval" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="406" origin="prim-lval" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="407" origin="prim-lval" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="408" origin="prim-exp" p-complexity="0">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6035" vname="big_name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="409" origin="prim-exp" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="big_name">
       <lval>
        <lhost>
         <var vid="6035" vname="big_name"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="410" origin="prim-exp" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="big_name">
       <lval>
        <lhost>
         <var vid="6035" vname="big_name"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="194" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="411" origin="prim-exp" p-complexity="1">
     <location byte="196672" file="src/cache.c" line="570"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="big_name">
       <lval>
        <lhost>
         <var vid="6035" vname="big_name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="412" origin="prim-exp" p-complexity="0">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="413" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="414" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="415" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="416" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="417" origin="prim-exp" p-complexity="2">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="cast">
      <tfrom ikind="iuint" ttag="tint"/>
      <tto ikind="iushort" ttag="tint"/>
      <exp binop="bor" etag="binop" xstr="((caste (new-&gt;flags:unsigned int) | ((1 &lt;&lt; 9):unsigned int):unsigned int">
       <exp1 etag="caste" xstr="caste (new-&gt;flags:unsigned int)">
        <typ ikind="iuint" ttag="tint"/>
        <exp etag="lval" xstr="new-&gt;flags">
         <lval>
          <lhost>
           <mem etag="lval" xstr="new">
            <lval>
             <lhost>
              <var vid="6034" vname="new"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="196" fname="flags"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 9):unsigned int">
        <exp1 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iuint" intValue="1"/>
        </exp1>
        <exp2 etag="const" xstr="9">
         <constant ctag="cint64" ikind="iint" intValue="9"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="418" origin="prim-exp" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="new-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="new">
          <lval>
           <lhost>
            <var vid="6034" vname="new"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="419" origin="prim-exp" p-complexity="6">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="new">
         <lval>
          <lhost>
           <var vid="6034" vname="new"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="420" origin="prim-exp" p-complexity="0">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="421" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="422" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="423" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="424" origin="prim-lval" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="425" origin="prim-op" p-complexity="0">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="9">
       <constant ctag="cint64" ikind="iint" intValue="9"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="426" origin="prim-op" p-complexity="1">
     <location byte="196706" file="src/cache.c" line="571"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="9">
       <constant ctag="cint64" ikind="iint" intValue="9"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="262"/>
       <node name="if-then"/>
       <node name="stmt" num="261"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="427" origin="prim-exp" p-complexity="0">
     <location byte="196738" file="src/cache.c" line="574"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="428" origin="prim-exp" p-complexity="0">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="429" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="430" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="431" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="432" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="433" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="434" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="435" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (name:(char*))]">
       <arg etag="caste" xstr="caste (name:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="name">
         <lval>
          <lhost>
           <var vid="6029" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="436" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (name:(char*))]">
       <arg etag="caste" xstr="caste (name:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="name">
         <lval>
          <lhost>
           <var vid="6029" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="437" name="no-overlap" origin="f-pre" p-complexity="2">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>dest</ci>
        <ci>src</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="438" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="439" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="strcpy" id="440" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (name:(char*))]">
       <arg etag="caste" xstr="caste (name:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="name">
         <lval>
          <lhost>
           <var vid="6029" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="441" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6046" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="442" origin="prim-exp" p-complexity="0">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6046" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="443" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="444" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="445" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (tmp___2:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6046" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="446" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="name">
       <lval>
        <lhost>
         <var vid="6029" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="447" origin="prim-exp" p-complexity="0">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6029" vname="name"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="448" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="449" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="450" origin="prim-exp" p-complexity="1">
     <location byte="196752" file="src/cache.c" line="575"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (name:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="name">
        <lval>
         <lhost>
          <var vid="6029" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="264"/>
       <node name="if-then"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="451" origin="prim-exp" p-complexity="0">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="452" origin="prim-exp" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="453" origin="prim-exp" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="454" origin="prim-exp" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="455" origin="prim-exp" p-complexity="0">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6048" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="456" origin="prim-lval" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6048" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="457" origin="prim-lval" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6048" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="458" origin="prim-lval" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6048" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="459" origin="prim-lval" p-complexity="1">
     <location byte="196798" file="src/cache.c" line="577"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6048" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="265"/>
       <node name="if-else"/>
       <node name="stmt" num="263"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="460" origin="prim-exp" p-complexity="0">
     <location byte="196827" file="src/cache.c" line="579"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="461" origin="prim-exp" p-complexity="0">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="462" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="463" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="464" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="465" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="466" origin="prim-exp" p-complexity="6">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6030" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="467" origin="prim-exp" p-complexity="0">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6030" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="468" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="469" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="470" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="471" origin="prim-lval" p-complexity="1">
     <location byte="196849" file="src/cache.c" line="586"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6030" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="472" origin="prim-exp" p-complexity="0">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="473" origin="prim-lval" p-complexity="1">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="474" origin="prim-lval" p-complexity="1">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="475" origin="prim-lval" p-complexity="1">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="476" origin="prim-lval" p-complexity="1">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="477" origin="prim-exp" p-complexity="0">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6031" vname="now"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="478" origin="prim-exp" p-complexity="1">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="ilong">
      <exp etag="lval" xstr="ttl">
       <lval>
        <lhost>
         <var vid="6032" vname="ttl"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="479" origin="prim-exp" p-complexity="0">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6032" vname="ttl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="480" origin="prim-op" p-complexity="3">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate op="plusa" size="ilong" tag="int-underflow">
      <exp1 etag="lval" xstr="now">
       <lval>
        <lhost>
         <var vid="6031" vname="now"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (ttl:time_t)">
       <typ tname="time_t" ttag="tnamed"/>
       <exp etag="lval" xstr="ttl">
        <lval>
         <lhost>
          <var vid="6032" vname="ttl"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="481" origin="prim-op" p-complexity="3">
     <location byte="196882" file="src/cache.c" line="589"/>
     <predicate op="plusa" size="ilong" tag="int-overflow">
      <exp1 etag="lval" xstr="now">
       <lval>
        <lhost>
         <var vid="6031" vname="now"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (ttl:time_t)">
       <typ tname="time_t" ttag="tnamed"/>
       <exp etag="lval" xstr="ttl">
        <lval>
         <lhost>
          <var vid="6032" vname="ttl"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="482" origin="prim-exp" p-complexity="0">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="483" origin="prim-lval" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="484" origin="prim-lval" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="485" origin="prim-lval" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="486" origin="prim-lval" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="487" origin="prim-exp" p-complexity="0">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5904" vname="new_chain"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="488" origin="prim-exp" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new_chain">
       <lval>
        <lhost>
         <var vid="5904" vname="new_chain"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="489" origin="prim-exp" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new_chain">
       <lval>
        <lhost>
         <var vid="5904" vname="new_chain"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="490" origin="prim-exp" p-complexity="1">
     <location byte="196914" file="src/cache.c" line="590"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new_chain">
       <lval>
        <lhost>
         <var vid="5904" vname="new_chain"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="491" origin="prim-exp" p-complexity="0">
     <location byte="196939" file="src/cache.c" line="591"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="492" origin="prim-exp" p-complexity="1">
     <location byte="196939" file="src/cache.c" line="591"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="493" origin="prim-exp" p-complexity="1">
     <location byte="196939" file="src/cache.c" line="591"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="494" origin="prim-exp" p-complexity="1">
     <location byte="196939" file="src/cache.c" line="591"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="495" origin="prim-exp" p-complexity="0">
     <location byte="196959" file="src/cache.c" line="593"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6034" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="269"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="496" origin="prim-exp" p-complexity="1">
     <location byte="196959" file="src/cache.c" line="593"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="269"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="497" origin="prim-exp" p-complexity="1">
     <location byte="196959" file="src/cache.c" line="593"/>
     <predicate tag="global-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="269"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="498" origin="prim-exp" p-complexity="1">
     <location byte="196959" file="src/cache.c" line="593"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="269"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="499" origin="prim-exp" p-complexity="1">
     <location byte="196959" file="src/cache.c" line="593"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6034" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="269"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:35">
   <application file="src/cache.xml" name="application"/>
  </header>
 </c-analysis>
