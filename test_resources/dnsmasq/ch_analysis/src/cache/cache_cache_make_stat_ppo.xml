<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="cache_make_stat">
   <statistics avg-context-complexity="4.01" avg-predicate-complexity="1.22" context-complexity="2160" predicate-complexity="658" size="538"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/prettyprint_addr" num="1"/>
    <efn name="dnsmasq/sockaddr_isequal" num="1"/>
    <efn name="dnsmasq/whine_malloc" num="2"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="2" origin="prim-exp" p-complexity="0">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="const" xstr="60">
       <constant ctag="cint64" ikind="iint" intValue="60"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="3" origin="prim-exp" p-complexity="1">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6283" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="4" origin="prim-exp" p-complexity="0">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6283" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="5" origin="prim-exp" p-complexity="1">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (tmp:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6283" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="6" origin="prim-exp" p-complexity="1">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (tmp:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6283" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="7" origin="prim-exp" p-complexity="1">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (tmp:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6283" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="8" origin="prim-exp" p-complexity="1">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (tmp:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6283" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="653"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="9" origin="prim-exp" p-complexity="0">
     <location byte="212407" file="src/cache.c" line="1305"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="654"/>
       <node name="if-then"/>
       <node name="stmt" num="652"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-exp" p-complexity="0">
     <location byte="212465" file="src/cache.c" line="1308"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="656"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-exp" p-complexity="6">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="t">
         <lval>
          <lhost>
           <var vid="6276" vname="t"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="184" fname="stat"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-exp" p-complexity="0">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6276" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-lval" p-complexity="1">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-lval" p-complexity="1">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="15" origin="prim-lval" p-complexity="1">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="16" origin="prim-lval" p-complexity="1">
     <location byte="212478" file="src/cache.c" line="1310"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="switch-expr"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="17" name="format" origin="f-pre" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="18" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="19" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="20" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="21" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="22" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="23" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="24" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="25" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="26" origin="prim-exp" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="27" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="28" origin="prim-op" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="29" origin="prim-op" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="30" origin="prim-op" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="31" origin="prim-op" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="32" origin="prim-exp" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="33" origin="prim-exp" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="34" origin="prim-exp" p-complexity="2">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="35" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%d&quot;">
       <constant ctag="cstr" strValue="%d"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="36" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="37" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="38" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="39" origin="prim-exp" p-complexity="6">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="cachesize"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="40" origin="prim-exp" p-complexity="0">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="41" origin="prim-lval" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="42" origin="prim-lval" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="43" origin="prim-lval" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="44" origin="prim-lval" p-complexity="1">
     <location byte="212519" file="src/cache.c" line="1313"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="658"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="45" name="format" origin="f-pre" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="46" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="47" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="48" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="49" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="50" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="51" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="52" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="53" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="54" origin="prim-exp" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="55" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="56" origin="prim-op" p-complexity="1">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="57" origin="prim-op" p-complexity="1">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="58" origin="prim-op" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="59" origin="prim-op" p-complexity="1">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="60" origin="prim-exp" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="61" origin="prim-exp" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="62" origin="prim-exp" p-complexity="2">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="63" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%d&quot;">
       <constant ctag="cstr" strValue="%d"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="64" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="65" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="66" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="67" origin="prim-exp" p-complexity="0">
     <location byte="212601" file="src/cache.c" line="1317"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="cache_inserted"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="660"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="68" name="format" origin="f-pre" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="69" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="70" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="71" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="72" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="73" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%d&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%d&quot;">
         <constant ctag="cstr" strValue="%d"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="74" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="75" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="76" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="77" origin="prim-exp" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="78" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="79" origin="prim-op" p-complexity="1">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="80" origin="prim-op" p-complexity="1">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="81" origin="prim-op" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="82" origin="prim-op" p-complexity="1">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="83" origin="prim-exp" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="84" origin="prim-exp" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="85" origin="prim-exp" p-complexity="2">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="86" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%d&quot;">
       <constant ctag="cstr" strValue="%d"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="87" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="88" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="89" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%d&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%d&quot;">
        <constant ctag="cstr" strValue="%d"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="90" origin="prim-exp" p-complexity="0">
     <location byte="212672" file="src/cache.c" line="1321"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="cache_live_freed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="662"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="91" name="format" origin="f-pre" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="92" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="93" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="94" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="95" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="96" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="97" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="98" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="99" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="100" origin="prim-exp" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="101" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="102" origin="prim-op" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="103" origin="prim-op" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="104" origin="prim-op" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="105" origin="prim-op" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="106" origin="prim-exp" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="107" origin="prim-exp" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="108" origin="prim-exp" p-complexity="2">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="109" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%u&quot;">
       <constant ctag="cstr" strValue="%u"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="110" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="111" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="112" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="113" origin="prim-exp" p-complexity="6">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="queries_forwarded"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="114" origin="prim-exp" p-complexity="0">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="115" origin="prim-lval" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="116" origin="prim-lval" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="117" origin="prim-lval" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="118" origin="prim-lval" p-complexity="1">
     <location byte="212745" file="src/cache.c" line="1325"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="664"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="119" name="format" origin="f-pre" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="120" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="121" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="122" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="123" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="124" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="125" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="126" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="127" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="128" origin="prim-exp" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="129" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="130" origin="prim-op" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="131" origin="prim-op" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="132" origin="prim-op" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="133" origin="prim-op" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="134" origin="prim-exp" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="135" origin="prim-exp" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="136" origin="prim-exp" p-complexity="2">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="137" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%u&quot;">
       <constant ctag="cstr" strValue="%u"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="138" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="139" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="140" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="141" origin="prim-exp" p-complexity="6">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="local_answer"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="142" origin="prim-exp" p-complexity="0">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="143" origin="prim-lval" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="144" origin="prim-lval" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="145" origin="prim-lval" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="146" origin="prim-lval" p-complexity="1">
     <location byte="212835" file="src/cache.c" line="1329"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="666"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="147" name="format" origin="f-pre" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="148" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="149" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="150" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="151" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="152" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%u&quot;">
         <constant ctag="cstr" strValue="%u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="153" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="154" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="sprintf" id="155" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="156" origin="prim-exp" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="157" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="158" origin="prim-op" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="159" origin="prim-op" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="160" origin="prim-op" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="161" origin="prim-op" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="162" origin="prim-exp" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="163" origin="prim-exp" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="164" origin="prim-exp" p-complexity="2">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="165" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%u&quot;">
       <constant ctag="cstr" strValue="%u"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="166" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="167" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="168" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%u&quot;">
        <constant ctag="cstr" strValue="%u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="169" origin="prim-exp" p-complexity="6">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="auth_answer"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="170" origin="prim-exp" p-complexity="0">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="171" origin="prim-lval" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="172" origin="prim-lval" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="173" origin="prim-lval" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="174" origin="prim-lval" p-complexity="1">
     <location byte="212921" file="src/cache.c" line="1334"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="668"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="175" origin="prim-exp" p-complexity="6">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="servers"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="176" origin="prim-exp" p-complexity="0">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="177" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="178" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="179" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="180" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="670"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="181" origin="prim-exp" p-complexity="0">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="672"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="182" origin="prim-exp" p-complexity="0">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="183" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="184" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="185" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="186" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="187" origin="prim-exp" p-complexity="6">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv">
         <lval>
          <lhost>
           <var vid="6280" vname="serv"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="188" origin="prim-exp" p-complexity="0">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="189" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="190" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="191" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="192" origin="prim-lval" p-complexity="1">
     <location byte="213070" file="src/cache.c" line="1341"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="193" origin="prim-exp" p-complexity="6">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv">
         <lval>
          <lhost>
           <var vid="6280" vname="serv"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="194" origin="prim-exp" p-complexity="0">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="195" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="196" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="197" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="198" origin="prim-lval" p-complexity="1">
     <location byte="213007" file="src/cache.c" line="1340"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="674"/>
       <node name="loop"/>
       <node name="stmt" num="671"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="199" origin="prim-exp" p-complexity="6">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="servers"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="200" origin="prim-exp" p-complexity="0">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="201" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="202" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="203" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="204" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="675"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="205" origin="prim-exp" p-complexity="0">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="677"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="206" origin="prim-exp" p-complexity="6">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv">
         <lval>
          <lhost>
           <var vid="6280" vname="serv"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="207" origin="prim-exp" p-complexity="0">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="208" origin="prim-lval" p-complexity="1">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="209" origin="prim-lval" p-complexity="1">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="210" origin="prim-lval" p-complexity="1">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="211" origin="prim-lval" p-complexity="1">
     <location byte="213161" file="src/cache.c" line="1344"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="212" origin="prim-exp" p-complexity="0">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="680"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="213" origin="prim-exp" p-complexity="0">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="682"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="214" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv1">
         <lval>
          <lhost>
           <var vid="6281" vname="serv1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="215" origin="prim-exp" p-complexity="0">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="216" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="217" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="218" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="219" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="220" origin="prim-exp" p-complexity="0">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="221" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="222" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="223" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="224" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="225" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="226" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="227" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="228" origin="prim-exp" p-complexity="0">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="229" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="230" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="231" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="232" origin="prim-lval" p-complexity="1">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="233" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (serv1-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="234" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (serv1-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="235" origin="prim-exp" p-complexity="6">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (serv1-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="685"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="236" origin="prim-exp" p-complexity="0">
     <location byte="213406" file="src/cache.c" line="1351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6293" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="237" origin="prim-exp" p-complexity="0">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="238" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="239" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="240" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="241" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="242" origin="prim-exp" p-complexity="6">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv1">
         <lval>
          <lhost>
           <var vid="6281" vname="serv1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="243" origin="prim-exp" p-complexity="0">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="244" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="245" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="246" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="247" origin="prim-lval" p-complexity="1">
     <location byte="213522" file="src/cache.c" line="1355"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="248" origin="prim-exp" p-complexity="0">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6290" vname="queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="249" origin="prim-exp" p-complexity="6">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv1">
         <lval>
          <lhost>
           <var vid="6281" vname="serv1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="queries"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="250" origin="prim-exp" p-complexity="0">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="251" origin="prim-lval" p-complexity="1">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="252" origin="prim-lval" p-complexity="1">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="253" origin="prim-lval" p-complexity="1">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="254" origin="prim-lval" p-complexity="1">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="255" origin="prim-op" p-complexity="3">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="queries">
       <lval>
        <lhost>
         <var vid="6290" vname="queries"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="serv1-&gt;queries">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="queries"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="256" origin="prim-op" p-complexity="3">
     <location byte="213547" file="src/cache.c" line="1356"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="queries">
       <lval>
        <lhost>
         <var vid="6290" vname="queries"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="serv1-&gt;queries">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="queries"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="257" origin="prim-exp" p-complexity="0">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6291" vname="failed_queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="258" origin="prim-exp" p-complexity="6">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv1">
         <lval>
          <lhost>
           <var vid="6281" vname="serv1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="failed_queries"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="259" origin="prim-exp" p-complexity="0">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="260" origin="prim-lval" p-complexity="1">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="261" origin="prim-lval" p-complexity="1">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="262" origin="prim-lval" p-complexity="1">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="263" origin="prim-lval" p-complexity="1">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="264" origin="prim-op" p-complexity="3">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="failed_queries">
       <lval>
        <lhost>
         <var vid="6291" vname="failed_queries"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="serv1-&gt;failed_queries">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="failed_queries"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="265" origin="prim-op" p-complexity="3">
     <location byte="213578" file="src/cache.c" line="1357"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="failed_queries">
       <lval>
        <lhost>
         <var vid="6291" vname="failed_queries"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="serv1-&gt;failed_queries">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv1">
          <lval>
           <lhost>
            <var vid="6281" vname="serv1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="failed_queries"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="687"/>
       <node name="if-then"/>
       <node name="stmt" num="686"/>
       <node name="if-then"/>
       <node name="stmt" num="684"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="266" origin="prim-exp" p-complexity="6">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv1">
         <lval>
          <lhost>
           <var vid="6281" vname="serv1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="267" origin="prim-exp" p-complexity="0">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6281" vname="serv1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="268" origin="prim-lval" p-complexity="1">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="269" origin="prim-lval" p-complexity="1">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="270" origin="prim-lval" p-complexity="1">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="271" origin="prim-lval" p-complexity="1">
     <location byte="213352" file="src/cache.c" line="1350"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv1">
       <lval>
        <lhost>
         <var vid="6281" vname="serv1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="688"/>
       <node name="loop"/>
       <node name="stmt" num="681"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="272" origin="prim-exp" p-complexity="0">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="273" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="274" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="275" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="276" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="277" origin="prim-exp" p-complexity="6">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="278" origin="prim-exp" p-complexity="6">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="279" origin="prim-exp" p-complexity="6">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (serv-&gt;addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="serv">
          <lval>
           <lhost>
            <var vid="6280" vname="serv"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="206" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="280" origin="prim-exp" p-complexity="6">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="addrbuff"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="281" origin="prim-exp" p-complexity="0">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="282" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="283" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="284" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="285" origin="prim-lval" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="286" origin="prim-exp" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="287" origin="prim-exp" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="288" origin="prim-exp" p-complexity="1">
     <location byte="213628" file="src/cache.c" line="1359"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="289" origin="prim-exp" p-complexity="0">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="290" origin="prim-exp" p-complexity="0">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="291" origin="prim-op" p-complexity="1">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="292" origin="prim-op" p-complexity="1">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="293" origin="prim-op" p-complexity="2">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="294" origin="prim-op" p-complexity="1">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="295" origin="prim-exp" p-complexity="0">
     <location byte="213697" file="src/cache.c" line="1360"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6295" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="296" origin="prim-exp" p-complexity="5">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="minusa" etag="binop" xstr="((caste (bufflen:long) - ((p -p buff):long):long">
       <exp1 etag="caste" xstr="caste (bufflen:long)">
        <typ ikind="ilong" ttag="tint"/>
        <exp etag="lval" xstr="bufflen">
         <lval>
          <lhost>
           <var vid="6278" vname="bufflen"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
        <exp1 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6282" vname="p"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="ilong" ttag="tint"/>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="297" origin="prim-exp" p-complexity="1">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="lval" xstr="bufflen">
       <lval>
        <lhost>
         <var vid="6278" vname="bufflen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="298" origin="prim-exp" p-complexity="0">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6278" vname="bufflen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="299" origin="prim-exp" p-complexity="0">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="300" origin="prim-exp" p-complexity="0">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="301" origin="prim-op" p-complexity="1">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="302" origin="prim-op" p-complexity="1">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="303" origin="prim-op" p-complexity="1">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="304" origin="prim-op" p-complexity="1">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="305" origin="prim-op" p-complexity="2">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="306" origin="prim-op" p-complexity="2">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="307" origin="prim-op" p-complexity="5">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate op="minusa" size="ilong" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (bufflen:long)">
       <typ ikind="ilong" ttag="tint"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="308" origin="prim-op" p-complexity="5">
     <location byte="213714" file="src/cache.c" line="1361"/>
     <predicate op="minusa" size="ilong" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (bufflen:long)">
       <typ ikind="ilong" ttag="tint"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="309" name="format" origin="f-pre" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="310" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="311" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="312" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="313" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s#%d %u %u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
         <constant ctag="cstr" strValue="%s#%d %u %u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="314" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s#%d %u %u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
         <constant ctag="cstr" strValue="%s#%d %u %u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="315" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="316" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="snprintf" id="317" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="318" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="319" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="320" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="321" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="322" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="323" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="bytes_avail">
       <lval>
        <lhost>
         <var vid="6288" vname="bytes_avail"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="324" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6288" vname="bytes_avail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="325" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
       <constant ctag="cstr" strValue="%s#%d %u %u"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="326" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="327" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="328" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="329" origin="prim-exp" p-complexity="6">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="addrbuff"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="330" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="331" origin="prim-lval" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="332" origin="prim-lval" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="333" origin="prim-lval" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="334" origin="prim-lval" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="335" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="336" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="337" origin="prim-exp" p-complexity="1">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="338" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6286" vname="port"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="339" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6290" vname="queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="5"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="340" origin="prim-exp" p-complexity="0">
     <location byte="213756" file="src/cache.c" line="1362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6291" vname="failed_queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="689"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="6"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="341" origin="prim-exp" p-complexity="0">
     <location byte="213874" file="src/cache.c" line="1363"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6289" vname="bytes_needed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="342" origin="prim-exp" p-complexity="0">
     <location byte="213874" file="src/cache.c" line="1363"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6288" vname="bytes_avail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="343" origin="prim-exp" p-complexity="0">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6289" vname="bytes_needed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="344" origin="prim-op" p-complexity="2">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="bytes_needed">
       <lval>
        <lhost>
         <var vid="6289" vname="bytes_needed"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="345" origin="prim-op" p-complexity="2">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="bytes_needed">
       <lval>
        <lhost>
         <var vid="6289" vname="bytes_needed"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="346" origin="prim-exp" p-complexity="0">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6278" vname="bufflen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="347" origin="prim-op" p-complexity="4">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((bytes_needed + 1):int">
       <exp1 etag="lval" xstr="bytes_needed">
        <lval>
         <lhost>
          <var vid="6289" vname="bytes_needed"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="bufflen">
       <lval>
        <lhost>
         <var vid="6278" vname="bufflen"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="348" origin="prim-op" p-complexity="4">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((bytes_needed + 1):int">
       <exp1 etag="lval" xstr="bytes_needed">
        <lval>
         <lhost>
          <var vid="6289" vname="bytes_needed"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="bufflen">
       <lval>
        <lhost>
         <var vid="6278" vname="bufflen"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="349" origin="prim-exp" p-complexity="0">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6288" vname="bytes_avail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="350" origin="prim-op" p-complexity="6">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((((bytes_needed + 1):int + bufflen):int">
       <exp1 binop="plusa" etag="binop" xstr="((bytes_needed + 1):int">
        <exp1 etag="lval" xstr="bytes_needed">
         <lval>
          <lhost>
           <var vid="6289" vname="bytes_needed"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="bytes_avail">
       <lval>
        <lhost>
         <var vid="6288" vname="bytes_avail"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="351" origin="prim-op" p-complexity="6">
     <location byte="213919" file="src/cache.c" line="1366"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((((bytes_needed + 1):int + bufflen):int">
       <exp1 binop="plusa" etag="binop" xstr="((bytes_needed + 1):int">
        <exp1 etag="lval" xstr="bytes_needed">
         <lval>
          <lhost>
           <var vid="6289" vname="bytes_needed"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="bytes_avail">
       <lval>
        <lhost>
         <var vid="6288" vname="bytes_avail"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="352" origin="prim-exp" p-complexity="1">
     <location byte="213972" file="src/cache.c" line="1367"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="newlen">
       <lval>
        <lhost>
         <var vid="6287" vname="newlen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="353" origin="prim-exp" p-complexity="0">
     <location byte="213972" file="src/cache.c" line="1367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6287" vname="newlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="354" origin="prim-exp" p-complexity="1">
     <location byte="213972" file="src/cache.c" line="1367"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6297" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="355" origin="prim-exp" p-complexity="0">
     <location byte="213972" file="src/cache.c" line="1367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6297" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="691"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="356" origin="prim-exp" p-complexity="0">
     <location byte="213972" file="src/cache.c" line="1367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6284" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="692"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="357" name="no-overlap" origin="f-pre" p-complexity="2">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="358" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="359" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="360" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid"/>
      <exp1 etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="361" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="362" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="363" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcpy" id="364" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (bufflen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="365" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="366" origin="prim-exp" p-complexity="0">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6284" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="367" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="368" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="369" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (new:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="new">
        <lval>
         <lhost>
          <var vid="6284" vname="new"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="370" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="371" origin="prim-exp" p-complexity="0">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="372" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="373" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="374" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="375" origin="prim-exp" p-complexity="1">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="bufflen">
       <lval>
        <lhost>
         <var vid="6278" vname="bufflen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="376" origin="prim-exp" p-complexity="0">
     <location byte="214023" file="src/cache.c" line="1369"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6278" vname="bufflen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="free" id="377" name="allocation-base" origin="f-pre" p-complexity="1">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="allocation-base">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="ptr" nr="1" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="allocation-base">
      <math>
       <apply>
        <allocation-base/>
        <ci>ptr</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="378" origin="prim-exp" p-complexity="1">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="379" origin="prim-exp" p-complexity="0">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="380" origin="prim-exp" p-complexity="1">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="381" origin="prim-exp" p-complexity="1">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="382" origin="prim-exp" p-complexity="1">
     <location byte="214053" file="src/cache.c" line="1370"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buff:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="383" origin="prim-exp" p-complexity="0">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6284" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="384" origin="prim-exp" p-complexity="0">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="385" origin="prim-exp" p-complexity="0">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="386" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="387" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="388" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="389" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="390" origin="prim-op" p-complexity="2">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="391" origin="prim-op" p-complexity="2">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="392" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="393" origin="prim-op" p-complexity="1">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="394" origin="prim-op" p-complexity="5">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="395" origin="prim-op" p-complexity="4">
     <location byte="214067" file="src/cache.c" line="1371"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="396" origin="prim-exp" p-complexity="0">
     <location byte="214091" file="src/cache.c" line="1372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="397" origin="prim-op" p-complexity="1">
     <location byte="214091" file="src/cache.c" line="1372"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="398" origin="prim-op" p-complexity="1">
     <location byte="214091" file="src/cache.c" line="1372"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="399" origin="prim-op" p-complexity="2">
     <location byte="214091" file="src/cache.c" line="1372"/>
     <predicate op="minuspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="400" origin="prim-op" p-complexity="1">
     <location byte="214091" file="src/cache.c" line="1372"/>
     <predicate op="minuspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="401" origin="prim-exp" p-complexity="0">
     <location byte="214107" file="src/cache.c" line="1373"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6284" vname="new"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="402" origin="prim-exp" p-complexity="1">
     <location byte="214107" file="src/cache.c" line="1373"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="403" origin="prim-exp" p-complexity="1">
     <location byte="214107" file="src/cache.c" line="1373"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="404" origin="prim-exp" p-complexity="1">
     <location byte="214107" file="src/cache.c" line="1373"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="405" origin="prim-exp" p-complexity="1">
     <location byte="214107" file="src/cache.c" line="1373"/>
     <predicate tag="null-terminated">
      <exp etag="lval" xstr="new">
       <lval>
        <lhost>
         <var vid="6284" vname="new"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="406" origin="prim-exp" p-complexity="0">
     <location byte="214121" file="src/cache.c" line="1374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6287" vname="newlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="407" origin="prim-exp" p-complexity="5">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="minusa" etag="binop" xstr="((caste (bufflen:long) - ((p -p buff):long):long">
       <exp1 etag="caste" xstr="caste (bufflen:long)">
        <typ ikind="ilong" ttag="tint"/>
        <exp etag="lval" xstr="bufflen">
         <lval>
          <lhost>
           <var vid="6278" vname="bufflen"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
        <exp1 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6282" vname="p"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="ilong" ttag="tint"/>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="408" origin="prim-exp" p-complexity="1">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="lval" xstr="bufflen">
       <lval>
        <lhost>
         <var vid="6278" vname="bufflen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="409" origin="prim-exp" p-complexity="0">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6278" vname="bufflen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="410" origin="prim-exp" p-complexity="0">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="411" origin="prim-exp" p-complexity="0">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="412" origin="prim-op" p-complexity="1">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="413" origin="prim-op" p-complexity="1">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="414" origin="prim-op" p-complexity="1">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="415" origin="prim-op" p-complexity="1">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="416" origin="prim-op" p-complexity="2">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="417" origin="prim-op" p-complexity="2">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="418" origin="prim-op" p-complexity="5">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate op="minusa" size="ilong" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (bufflen:long)">
       <typ ikind="ilong" ttag="tint"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="419" origin="prim-op" p-complexity="5">
     <location byte="214141" file="src/cache.c" line="1375"/>
     <predicate op="minusa" size="ilong" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (bufflen:long)">
       <typ ikind="ilong" ttag="tint"/>
       <exp etag="lval" xstr="bufflen">
        <lval>
         <lhost>
          <var vid="6278" vname="bufflen"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="420" name="format" origin="f-pre" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="421" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="422" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="423" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="424" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s#%d %u %u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
         <constant ctag="cstr" strValue="%s#%d %u %u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="425" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%s#%d %u %u&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
         <constant ctag="cstr" strValue="%s#%d %u %u"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="3" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="426" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="427" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="snprintf" id="428" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="2" xstr="caste (bytes_avail:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="bytes_avail">
        <lval>
         <lhost>
          <var vid="6288" vname="bytes_avail"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="429" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="430" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="431" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="432" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="433" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="434" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="bytes_avail">
       <lval>
        <lhost>
         <var vid="6288" vname="bytes_avail"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="435" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6288" vname="bytes_avail"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="436" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
       <constant ctag="cstr" strValue="%s#%d %u %u"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="437" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="438" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="439" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%s#%d %u %u&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%s#%d %u %u&quot;">
        <constant ctag="cstr" strValue="%s#%d %u %u"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="440" origin="prim-exp" p-complexity="6">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="addrbuff"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="441" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="442" origin="prim-lval" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="443" origin="prim-lval" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="444" origin="prim-lval" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="445" origin="prim-lval" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="446" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="447" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="448" origin="prim-exp" p-complexity="1">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;addrbuff">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="addrbuff"/>
        </offset>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="449" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6286" vname="port"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="450" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6290" vname="queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="5"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="451" origin="prim-exp" p-complexity="0">
     <location byte="214180" file="src/cache.c" line="1376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6291" vname="failed_queries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="7"/>
       <node name="stmt" num="694"/>
       <node name="if-then"/>
       <node name="stmt" num="690"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="6"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="452" origin="prim-exp" p-complexity="0">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6285" vname="lenp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="453" origin="prim-lval" p-complexity="1">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lenp">
       <lval>
        <lhost>
         <var vid="6285" vname="lenp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="454" origin="prim-lval" p-complexity="1">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lenp">
       <lval>
        <lhost>
         <var vid="6285" vname="lenp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="455" origin="prim-lval" p-complexity="1">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lenp">
       <lval>
        <lhost>
         <var vid="6285" vname="lenp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="456" origin="prim-lval" p-complexity="1">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lenp">
       <lval>
        <lhost>
         <var vid="6285" vname="lenp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="457" origin="prim-exp" p-complexity="1">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="bytes_needed">
       <lval>
        <lhost>
         <var vid="6289" vname="bytes_needed"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="458" origin="prim-exp" p-complexity="0">
     <location byte="214307" file="src/cache.c" line="1378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6289" vname="bytes_needed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="459" origin="prim-exp" p-complexity="0">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="460" origin="prim-exp" p-complexity="0">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6289" vname="bytes_needed"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="461" origin="prim-op" p-complexity="1">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="462" origin="prim-op" p-complexity="1">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="463" origin="prim-op" p-complexity="3">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="bytes_needed">
       <lval>
        <lhost>
         <var vid="6289" vname="bytes_needed"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="464" origin="prim-op" p-complexity="2">
     <location byte="214334" file="src/cache.c" line="1379"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="bytes_needed">
       <lval>
        <lhost>
         <var vid="6289" vname="bytes_needed"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="695"/>
       <node name="if-then"/>
       <node name="stmt" num="679"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="465" origin="prim-exp" p-complexity="6">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="serv">
         <lval>
          <lhost>
           <var vid="6280" vname="serv"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="206" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="466" origin="prim-exp" p-complexity="0">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6280" vname="serv"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="467" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="468" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="469" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="470" origin="prim-lval" p-complexity="1">
     <location byte="213098" file="src/cache.c" line="1343"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="serv">
       <lval>
        <lhost>
         <var vid="6280" vname="serv"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="206" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="696"/>
       <node name="loop"/>
       <node name="stmt" num="676"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="471" origin="prim-exp" p-complexity="0">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6276" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="472" origin="prim-lval" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="473" origin="prim-lval" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="474" origin="prim-lval" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="475" origin="prim-lval" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="476" origin="prim-exp" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="477" origin="prim-exp" p-complexity="0">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="478" origin="prim-exp" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="479" origin="prim-exp" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="480" origin="prim-exp" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="481" origin="prim-exp" p-complexity="1">
     <location byte="214364" file="src/cache.c" line="1381"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="482" origin="prim-exp" p-complexity="0">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6276" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="483" origin="prim-lval" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="484" origin="prim-lval" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="485" origin="prim-lval" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="486" origin="prim-lval" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="487" origin="prim-exp" p-complexity="3">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate from="ilong" tag="signed-to-unsigned-cast" to="iushort">
      <exp binop="minuspp" etag="binop" xstr="((p -p buff):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6282" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="488" origin="prim-exp" p-complexity="0">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6282" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="489" origin="prim-exp" p-complexity="0">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="490" origin="prim-op" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="491" origin="prim-op" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="492" origin="prim-op" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="493" origin="prim-op" p-complexity="1">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="494" origin="prim-op" p-complexity="2">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="495" origin="prim-op" p-complexity="2">
     <location byte="214402" file="src/cache.c" line="1382"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6282" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="697"/>
       <node name="stmt" num="657"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="strlen" id="496" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="strlen" id="497" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="strlen" id="498" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="strlen" id="499" name="deref-read-nt" origin="f-pre" p-complexity="3">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((buff +i 1):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
         <exp1 etag="lval" xstr="buff">
          <lval>
           <lhost>
            <var vid="6277" vname="buff"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="strlen" id="500" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((buff +i 1):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
         <exp1 etag="lval" xstr="buff">
          <lval>
           <lhost>
            <var vid="6277" vname="buff"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="501" origin="prim-exp" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
       <exp1 etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="502" origin="prim-exp" p-complexity="0">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="503" origin="prim-op" p-complexity="1">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="504" origin="prim-op" p-complexity="1">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="505" origin="prim-op" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="506" origin="prim-op" p-complexity="1">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="507" origin="prim-exp" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="508" origin="prim-exp" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="509" origin="prim-exp" p-complexity="2">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buff +i 1):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((buff +i 1):(char*)">
        <exp1 etag="lval" xstr="buff">
         <lval>
          <lhost>
           <var vid="6277" vname="buff"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="510" origin="prim-exp" p-complexity="1">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6299" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="511" origin="prim-exp" p-complexity="0">
     <location byte="214446" file="src/cache.c" line="1386"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6299" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="512" origin="prim-exp" p-complexity="0">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6276" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="513" origin="prim-lval" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="514" origin="prim-lval" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="515" origin="prim-lval" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="516" origin="prim-lval" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="517" origin="prim-exp" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="518" origin="prim-exp" p-complexity="0">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="519" origin="prim-exp" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="520" origin="prim-exp" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="521" origin="prim-exp" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="522" origin="prim-exp" p-complexity="1">
     <location byte="214470" file="src/cache.c" line="1387"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (buff:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buff">
        <lval>
         <lhost>
          <var vid="6277" vname="buff"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="523" origin="prim-exp" p-complexity="0">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6276" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="524" origin="prim-lval" p-complexity="1">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="525" origin="prim-lval" p-complexity="1">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="526" origin="prim-lval" p-complexity="1">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="527" origin="prim-lval" p-complexity="1">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6276" vname="t"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="184" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="528" origin="prim-exp" p-complexity="2">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iushort">
      <exp binop="plusa" etag="binop" xstr="((len + 1):int">
       <exp1 etag="lval" xstr="len">
        <lval>
         <lhost>
          <var vid="6279" vname="len"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="529" origin="prim-exp" p-complexity="0">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6279" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="530" origin="prim-op" p-complexity="2">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6279" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="531" origin="prim-op" p-complexity="2">
     <location byte="214504" file="src/cache.c" line="1388"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6279" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="532" origin="prim-exp" p-complexity="0">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6277" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="533" origin="prim-lval" p-complexity="1">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="534" origin="prim-lval" p-complexity="1">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="535" origin="prim-lval" p-complexity="1">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="536" origin="prim-lval" p-complexity="1">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6277" vname="buff"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="537" origin="prim-exp" p-complexity="1">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6279" vname="len"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="538" origin="prim-exp" p-complexity="0">
     <location byte="214524" file="src/cache.c" line="1389"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6279" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="699"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:34">
   <application file="src/cache.xml" name="application"/>
  </header>
 </c-analysis>
