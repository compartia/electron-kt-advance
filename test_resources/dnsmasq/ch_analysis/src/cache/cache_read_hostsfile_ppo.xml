<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="read_hostsfile">
   <statistics avg-context-complexity="9.53" avg-predicate-complexity="1.25" context-complexity="4212" predicate-complexity="553" size="442"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/get_domain" num="1"/>
    <efn name="dnsmasq/canonicalise" num="1"/>
    <efn name="dnsmasq/get_domain6" num="1"/>
    <efn name="dnsmasq/my_syslog" num="4"/>
    <efn name="dnsmasq/whine_malloc" num="2"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" fname="fopen" id="1" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>mode</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>mode</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="2" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>mode</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>mode</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="3" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>mode</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>mode</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="4" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;r&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;r&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;r&quot;">
         <constant ctag="cstr" strValue="r"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>mode</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>mode</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="5" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;r&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;r&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;r&quot;">
         <constant ctag="cstr" strValue="r"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>mode</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>mode</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="6" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>filename</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>filename</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="7" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>filename</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>filename</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="8" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>filename</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>filename</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="9" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (filename:(char*))]">
       <arg etag="caste" xstr="caste (filename:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="filename">
         <lval>
          <lhost>
           <var vid="6164" vname="filename"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>filename</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>filename</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="10" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (filename:(char*))]">
       <arg etag="caste" xstr="caste (filename:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="filename">
         <lval>
          <lhost>
           <var vid="6164" vname="filename"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>filename</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>filename</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fopen" id="11" name="no-overlap" origin="f-pre" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="mode" nr="2" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
      <exp etag="caste" name="filename" nr="1" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>filename</ci>
        <ci>mode</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-exp" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6164" vname="filename"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-exp" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="15" origin="prim-exp" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="16" origin="prim-exp" p-complexity="1">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (filename:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="filename">
        <lval>
         <lhost>
          <var vid="6164" vname="filename"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="17" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;r&quot;">
       <constant ctag="cstr" strValue="r"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="18" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="19" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="20" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;r&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;r&quot;">
        <constant ctag="cstr" strValue="r"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="21" origin="prim-exp" p-complexity="0">
     <location byte="202847" file="src/cache.c" line="914"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6171" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="22" origin="prim-exp" p-complexity="6">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="namebuff"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="23" origin="prim-exp" p-complexity="0">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="24" origin="prim-lval" p-complexity="1">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="25" origin="prim-lval" p-complexity="1">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="26" origin="prim-lval" p-complexity="1">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="27" origin="prim-lval" p-complexity="1">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="28" origin="prim-exp" p-complexity="0">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="29" origin="prim-exp" p-complexity="0">
     <location byte="202881" file="src/cache.c" line="915"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="30" origin="prim-exp" p-complexity="0">
     <location byte="202953" file="src/cache.c" line="916"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6167" vname="cache_size"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="442"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="31" origin="prim-exp" p-complexity="0">
     <location byte="203090" file="src/cache.c" line="921"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="32" origin="prim-exp" p-complexity="6">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___0">
         <lval>
          <lhost>
           <var vid="6182" vname="tmp___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="33" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6182" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="34" origin="prim-lval" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6182" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="35" origin="prim-lval" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6182" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="36" origin="prim-lval" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6182" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="37" origin="prim-lval" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6182" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="38" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;failed to load names from %s: %s&quot;">
       <constant ctag="cstr" strValue="failed to load names from %s: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="39" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;failed to load names from %s: %s&quot;">
       <constant ctag="cstr" strValue="failed to load names from %s: %s"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="40" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;failed to load names from %s: %s&quot;">
       <constant ctag="cstr" strValue="failed to load names from %s: %s"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="41" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6164" vname="filename"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="42" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="43" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="44" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="45" origin="prim-exp" p-complexity="0">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6184" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="46" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6184" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="47" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6184" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="48" origin="prim-exp" p-complexity="1">
     <location byte="203110" file="src/cache.c" line="923"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6184" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="444"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="49" origin="prim-exp" p-complexity="0">
     <location byte="203212" file="src/cache.c" line="924"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6167" vname="cache_size"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="445"/>
       <node name="if-then"/>
       <node name="stmt" num="443"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="50" origin="prim-exp" p-complexity="0">
     <location byte="203240" file="src/cache.c" line="927"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="446"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="51" origin="prim-exp" p-complexity="1">
     <location byte="203240" file="src/cache.c" line="927"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="446"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="52" origin="prim-exp" p-complexity="1">
     <location byte="203240" file="src/cache.c" line="927"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="446"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="53" origin="prim-exp" p-complexity="1">
     <location byte="203240" file="src/cache.c" line="927"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="446"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="54" origin="prim-exp" p-complexity="0">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="55" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="56" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="57" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="58" origin="prim-exp" p-complexity="0">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="59" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="60" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="61" origin="prim-exp" p-complexity="1">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="448"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="62" origin="prim-exp" p-complexity="0">
     <location byte="203256" file="src/cache.c" line="929"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6179" vname="atnl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="449"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="63" origin="prim-exp" p-complexity="0">
     <location byte="203310" file="src/cache.c" line="931"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6176" vname="lineno"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="64" origin="prim-op" p-complexity="2">
     <location byte="203310" file="src/cache.c" line="931"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="lineno">
       <lval>
        <lhost>
         <var vid="6176" vname="lineno"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="65" origin="prim-op" p-complexity="2">
     <location byte="203310" file="src/cache.c" line="931"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="lineno">
       <lval>
        <lhost>
         <var vid="6176" vname="lineno"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="66" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="67" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="68" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="69" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="70" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="71" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="72" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="inet_ntop" id="73" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid"/>
      <exp1 etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="74" origin="prim-exp" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="75" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="76" origin="prim-exp" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="77" origin="prim-exp" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="78" origin="prim-exp" p-complexity="1">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="79" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid"/>
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="80" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="81" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="82" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="451"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="83" origin="prim-exp" p-complexity="0">
     <location byte="203327" file="src/cache.c" line="933"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6188" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="84" origin="prim-exp" p-complexity="4">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate tag="cast">
      <tfrom ikind="iuint" ttag="tint"/>
      <tto ikind="iushort" ttag="tint"/>
      <exp binop="bor" etag="binop" xstr="((((((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int | ((1 &lt;&lt; 2):unsigned int):unsigned int | ((1 &lt;&lt; 7):unsigned int):unsigned int">
       <exp1 binop="bor" etag="binop" xstr="((((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int | ((1 &lt;&lt; 2):unsigned int):unsigned int">
        <exp1 binop="bor" etag="binop" xstr="((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int">
         <exp1 binop="bor" etag="binop" xstr="((((1 &lt;&lt; 6):unsigned int | 1):unsigned int">
          <exp1 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 6):unsigned int">
           <exp1 etag="const" xstr="1">
            <constant ctag="cint64" ikind="iuint" intValue="1"/>
           </exp1>
           <exp2 etag="const" xstr="6">
            <constant ctag="cint64" ikind="iint" intValue="6"/>
           </exp2>
           <typ ikind="iuint" ttag="tint"/>
          </exp1>
          <exp2 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iuint" intValue="1"/>
          </exp2>
          <typ ikind="iuint" ttag="tint"/>
         </exp1>
         <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 3):unsigned int">
          <exp1 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iuint" intValue="1"/>
          </exp1>
          <exp2 etag="const" xstr="3">
           <constant ctag="cint64" ikind="iint" intValue="3"/>
          </exp2>
          <typ ikind="iuint" ttag="tint"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp1>
        <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 2):unsigned int">
         <exp1 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iuint" intValue="1"/>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp1>
       <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 7):unsigned int">
        <exp1 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iuint" intValue="1"/>
        </exp1>
        <exp2 etag="const" xstr="7">
         <constant ctag="cint64" ikind="iint" intValue="7"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="85" origin="prim-op" p-complexity="0">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="86" origin="prim-op" p-complexity="1">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="87" origin="prim-op" p-complexity="0">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="88" origin="prim-op" p-complexity="1">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="89" origin="prim-op" p-complexity="0">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="90" origin="prim-op" p-complexity="1">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="91" origin="prim-op" p-complexity="0">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="92" origin="prim-op" p-complexity="1">
     <location byte="203369" file="src/cache.c" line="935"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="93" origin="prim-exp" p-complexity="0">
     <location byte="203445" file="src/cache.c" line="937"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6178" vname="addr"/>
       </lhost>
       <offset>
        <offset>
         <field ckey="177" fname="addr4"/>
        </offset>
        <field ckey="176" fname="addr"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="453"/>
       <node name="if-then"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="94" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="95" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="96" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="97" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="98" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="99" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="100" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="inet_ntop" id="101" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid"/>
      <exp1 etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <byte-size/>
         <cn>16</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="102" origin="prim-exp" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="103" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="104" origin="prim-exp" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="105" origin="prim-exp" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="106" origin="prim-exp" p-complexity="1">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="107" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid"/>
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="108" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="109" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="110" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (addr)">
        <lval>
         <lhost>
          <var vid="6178" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="454"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="111" origin="prim-exp" p-complexity="0">
     <location byte="203505" file="src/cache.c" line="940"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6186" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="112" origin="prim-exp" p-complexity="4">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate tag="cast">
      <tfrom ikind="iuint" ttag="tint"/>
      <tto ikind="iushort" ttag="tint"/>
      <exp binop="bor" etag="binop" xstr="((((((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int | ((1 &lt;&lt; 2):unsigned int):unsigned int | ((1 &lt;&lt; 8):unsigned int):unsigned int">
       <exp1 binop="bor" etag="binop" xstr="((((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int | ((1 &lt;&lt; 2):unsigned int):unsigned int">
        <exp1 binop="bor" etag="binop" xstr="((((((1 &lt;&lt; 6):unsigned int | 1):unsigned int | ((1 &lt;&lt; 3):unsigned int):unsigned int">
         <exp1 binop="bor" etag="binop" xstr="((((1 &lt;&lt; 6):unsigned int | 1):unsigned int">
          <exp1 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 6):unsigned int">
           <exp1 etag="const" xstr="1">
            <constant ctag="cint64" ikind="iuint" intValue="1"/>
           </exp1>
           <exp2 etag="const" xstr="6">
            <constant ctag="cint64" ikind="iint" intValue="6"/>
           </exp2>
           <typ ikind="iuint" ttag="tint"/>
          </exp1>
          <exp2 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iuint" intValue="1"/>
          </exp2>
          <typ ikind="iuint" ttag="tint"/>
         </exp1>
         <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 3):unsigned int">
          <exp1 etag="const" xstr="1">
           <constant ctag="cint64" ikind="iuint" intValue="1"/>
          </exp1>
          <exp2 etag="const" xstr="3">
           <constant ctag="cint64" ikind="iint" intValue="3"/>
          </exp2>
          <typ ikind="iuint" ttag="tint"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp1>
        <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 2):unsigned int">
         <exp1 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iuint" intValue="1"/>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp1>
       <exp2 binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 8):unsigned int">
        <exp1 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iuint" intValue="1"/>
        </exp1>
        <exp2 etag="const" xstr="8">
         <constant ctag="cint64" ikind="iint" intValue="8"/>
        </exp2>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="113" origin="prim-op" p-complexity="0">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="114" origin="prim-op" p-complexity="1">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="115" origin="prim-op" p-complexity="0">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="116" origin="prim-op" p-complexity="1">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="117" origin="prim-op" p-complexity="0">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="118" origin="prim-op" p-complexity="1">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="119" origin="prim-op" p-complexity="0">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="120" origin="prim-op" p-complexity="1">
     <location byte="203548" file="src/cache.c" line="942"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="121" origin="prim-exp" p-complexity="0">
     <location byte="203625" file="src/cache.c" line="944"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (addr.addr.addr6)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="122" origin="prim-exp" p-complexity="0">
     <location byte="203625" file="src/cache.c" line="944"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (addr.addr.addr6)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="46" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="123" origin="prim-exp" p-complexity="0">
     <location byte="203625" file="src/cache.c" line="944"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (addr.addr.addr6)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
        <offset>
         <offset>
          <field ckey="177" fname="addr6"/>
         </offset>
         <field ckey="176" fname="addr"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="46" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="456"/>
       <node name="if-then"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="124" origin="prim-exp" p-complexity="0">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;bad address at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad address at %s line %d"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="125" origin="prim-exp" p-complexity="0">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;bad address at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad address at %s line %d"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="126" origin="prim-exp" p-complexity="0">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;bad address at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad address at %s line %d"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="127" origin="prim-exp" p-complexity="0">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6164" vname="filename"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="128" origin="prim-exp" p-complexity="1">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="129" origin="prim-exp" p-complexity="1">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="130" origin="prim-exp" p-complexity="1">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="131" origin="prim-exp" p-complexity="0">
     <location byte="203693" file="src/cache.c" line="949"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6176" vname="lineno"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="457"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="132" origin="prim-exp" p-complexity="0">
     <location byte="203759" file="src/cache.c" line="950"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6179" vname="atnl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="459"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="133" origin="prim-exp" p-complexity="0">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="134" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="135" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="136" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="137" origin="prim-exp" p-complexity="0">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="138" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="139" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="140" origin="prim-exp" p-complexity="1">
     <location byte="203782" file="src/cache.c" line="951"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="461"/>
       <node name="loop"/>
       <node name="stmt" num="458"/>
       <node name="if-else"/>
       <node name="stmt" num="455"/>
       <node name="if-else"/>
       <node name="stmt" num="452"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="141" origin="prim-exp" p-complexity="0">
     <location byte="203830" file="src/cache.c" line="955"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6174" vname="addr_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="463"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="142" origin="prim-op" p-complexity="2">
     <location byte="203830" file="src/cache.c" line="955"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="addr_count">
       <lval>
        <lhost>
         <var vid="6174" vname="addr_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="463"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="143" origin="prim-op" p-complexity="2">
     <location byte="203830" file="src/cache.c" line="955"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="addr_count">
       <lval>
        <lhost>
         <var vid="6174" vname="addr_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="463"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="144" origin="prim-exp" p-complexity="0">
     <location byte="203852" file="src/cache.c" line="958"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6168" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="145" origin="prim-exp" p-complexity="0">
     <location byte="203852" file="src/cache.c" line="958"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="146" origin="prim-exp" p-complexity="0">
     <location byte="203852" file="src/cache.c" line="958"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6167" vname="cache_size"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="147" origin="prim-op" p-complexity="3">
     <location byte="203852" file="src/cache.c" line="958"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="cache_size">
       <lval>
        <lhost>
         <var vid="6167" vname="cache_size"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="148" origin="prim-op" p-complexity="3">
     <location byte="203852" file="src/cache.c" line="958"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="cache_size">
       <lval>
        <lhost>
         <var vid="6167" vname="cache_size"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="149" origin="prim-exp" p-complexity="0">
     <location byte="203907" file="src/cache.c" line="960"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="466"/>
       <node name="if-then"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="150" origin="prim-exp" p-complexity="0">
     <location byte="203930" file="src/cache.c" line="961"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="466"/>
       <node name="if-then"/>
       <node name="stmt" num="465"/>
       <node name="if-then"/>
       <node name="stmt" num="464"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="151" origin="prim-exp" p-complexity="0">
     <location byte="203965" file="src/cache.c" line="964"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6179" vname="atnl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="468"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="152" origin="prim-exp" p-complexity="0">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="153" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="154" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="155" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="156" origin="prim-exp" p-complexity="0">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="157" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="158" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="159" origin="prim-exp" p-complexity="1">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="470"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="160" origin="prim-exp" p-complexity="0">
     <location byte="204049" file="src/cache.c" line="970"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6179" vname="atnl"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="471"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" fname="strchr" id="161" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="10" fname="strchr" id="162" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="10" fname="strchr" id="163" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="10" fname="strchr" id="164" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="10" fname="strchr" id="165" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (token:(char*))]">
       <arg etag="caste" xstr="caste (token:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="token">
         <lval>
          <lhost>
           <var vid="6172" vname="token"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="166" origin="prim-exp" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="167" origin="prim-exp" p-complexity="0">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="168" origin="prim-exp" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="169" origin="prim-exp" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="170" origin="prim-exp" p-complexity="1">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (token:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="token">
        <lval>
         <lhost>
          <var vid="6172" vname="token"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="473"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="171" origin="prim-exp" p-complexity="0">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6195" vname="tmp___4"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="474"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="172" origin="prim-exp" p-complexity="0">
     <location byte="204104" file="src/cache.c" line="973"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6197" vname="tmp___5"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="173" origin="prim-exp" p-complexity="0">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6172" vname="token"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="174" origin="prim-exp" p-complexity="1">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="175" origin="prim-exp" p-complexity="1">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="176" origin="prim-exp" p-complexity="1">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="token">
       <lval>
        <lhost>
         <var vid="6172" vname="token"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="177" origin="prim-exp" p-complexity="0">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (nomem)">
       <lval>
        <lhost>
         <var vid="6192" vname="nomem"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="178" origin="prim-exp" p-complexity="0">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (nomem)">
       <lval>
        <lhost>
         <var vid="6192" vname="nomem"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="179" origin="prim-exp" p-complexity="0">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (nomem)">
       <lval>
        <lhost>
         <var vid="6192" vname="nomem"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="477"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="180" origin="prim-exp" p-complexity="0">
     <location byte="204137" file="src/cache.c" line="975"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="181" origin="prim-exp" p-complexity="6">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="options"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="182" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="183" origin="prim-lval" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="184" origin="prim-lval" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="185" origin="prim-lval" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="186" origin="prim-lval" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="187" origin="prim-op" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="9">
       <constant ctag="cint64" ikind="iint" intValue="9"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="188" origin="prim-op" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="9">
       <constant ctag="cint64" ikind="iint" intValue="9"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="189" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6173" vname="domain_suffix"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="190" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6191" vname="fqdn"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="191" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="192" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="193" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="194" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="195" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="196" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="canon">
       <lval>
        <lhost>
         <var vid="6193" vname="canon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="197" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="198" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="199" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="200" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="201" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="202" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="203" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="204" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" fname="strlen" id="205" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="206" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="domain_suffix">
       <lval>
        <lhost>
         <var vid="6173" vname="domain_suffix"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="207" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6173" vname="domain_suffix"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="208" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="209" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="210" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="211" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6199" vname="tmp___6"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="212" origin="prim-op" p-complexity="2">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="sizeof" xstr="sizeof (struct 196)">
       <typ ckey="196" ttag="tcomp"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="6199" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="213" origin="prim-op" p-complexity="2">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="sizeof" xstr="sizeof (struct 196)">
       <typ ckey="196" ttag="tcomp"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="6199" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="214" origin="prim-op" p-complexity="3">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
       <exp1 etag="sizeof" xstr="sizeof (struct 196)">
        <typ ckey="196" ttag="tcomp"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___6">
        <lval>
         <lhost>
          <var vid="6199" vname="tmp___6"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="215" origin="prim-op" p-complexity="3">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
       <exp1 etag="sizeof" xstr="sizeof (struct 196)">
        <typ ckey="196" ttag="tcomp"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___6">
        <lval>
         <lhost>
          <var vid="6199" vname="tmp___6"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="216" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6201" vname="tmp___7"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="217" origin="prim-op" p-complexity="5">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
        <exp1 etag="sizeof" xstr="sizeof (struct 196)">
         <typ ckey="196" ttag="tcomp"/>
        </exp1>
        <exp2 etag="lval" xstr="tmp___6">
         <lval>
          <lhost>
           <var vid="6199" vname="tmp___6"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iulong" intValue="2"/>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="6201" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="218" origin="prim-op" p-complexity="5">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
        <exp1 etag="sizeof" xstr="sizeof (struct 196)">
         <typ ckey="196" ttag="tcomp"/>
        </exp1>
        <exp2 etag="lval" xstr="tmp___6">
         <lval>
          <lhost>
           <var vid="6199" vname="tmp___6"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iulong" intValue="2"/>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="6201" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="219" origin="prim-op" p-complexity="6">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="minusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long + tmp___7):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long">
        <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
         <exp1 etag="sizeof" xstr="sizeof (struct 196)">
          <typ ckey="196" ttag="tcomp"/>
         </exp1>
         <exp2 etag="lval" xstr="tmp___6">
          <lval>
           <lhost>
            <var vid="6199" vname="tmp___6"/>
           </lhost>
          </lval>
         </exp2>
         <typ ikind="iulong" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iulong" intValue="2"/>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___7">
        <lval>
         <lhost>
          <var vid="6201" vname="tmp___7"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="50">
       <constant ctag="cint64" ikind="iulong" intValue="50"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="220" origin="prim-op" p-complexity="6">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate op="minusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long + tmp___7):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___6):unsigned long + 2):unsigned long">
        <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___6):unsigned long">
         <exp1 etag="sizeof" xstr="sizeof (struct 196)">
          <typ ckey="196" ttag="tcomp"/>
         </exp1>
         <exp2 etag="lval" xstr="tmp___6">
          <lval>
           <lhost>
            <var vid="6199" vname="tmp___6"/>
           </lhost>
          </lval>
         </exp2>
         <typ ikind="iulong" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iulong" intValue="2"/>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___7">
        <lval>
         <lhost>
          <var vid="6201" vname="tmp___7"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="50">
       <constant ctag="cint64" ikind="iulong" intValue="50"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="221" origin="prim-exp" p-complexity="1">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="lval" xstr="tmp___8">
       <lval>
        <lhost>
         <var vid="6203" vname="tmp___8"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="222" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6203" vname="tmp___8"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="482"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="223" origin="prim-exp" p-complexity="0">
     <location byte="204195" file="src/cache.c" line="978"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="224" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="225" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="226" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="227" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="228" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="229" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>dest</ci>
        <ci>src</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="230" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="231" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcpy" id="232" name="buffersize" origin="f-pre" p-complexity="7">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="233" origin="prim-exp" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6190" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="202" fname="sname"/>
         </offset>
         <field ckey="196" fname="name"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="234" origin="prim-exp" p-complexity="0">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="235" origin="prim-lval" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="236" origin="prim-lval" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="237" origin="prim-lval" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="238" origin="prim-lval" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="239" origin="prim-exp" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="240" origin="prim-exp" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="241" origin="prim-exp" p-complexity="6">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="242" origin="prim-exp" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="canon">
       <lval>
        <lhost>
         <var vid="6193" vname="canon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="243" origin="prim-exp" p-complexity="0">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="244" origin="prim-exp" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="245" origin="prim-exp" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="246" origin="prim-exp" p-complexity="1">
     <location byte="204434" file="src/cache.c" line="982"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="247" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="248" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="249" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="250" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="251" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="252" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="253" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
       <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6190" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="202" fname="sname"/>
           </offset>
           <field ckey="196" fname="name"/>
          </offset>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="254" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
       <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6190" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="202" fname="sname"/>
           </offset>
           <field ckey="196" fname="name"/>
          </offset>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;.&quot;">
         <constant ctag="cstr" strValue="."/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="255" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="256" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="plusa" etag="binop" xstr="((null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))] + null-terminator-pos[caste (&quot;.&quot;:(char*))]):int">
       <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
        <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint"/>
         </typ>
         <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="cache___0">
             <lval>
              <lhost>
               <var vid="6190" vname="cache___0"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
           <offset>
            <offset>
             <field ckey="202" fname="sname"/>
            </offset>
            <field ckey="196" fname="name"/>
           </offset>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;.&quot;:(char*))]">
        <arg etag="caste" xstr="caste (&quot;.&quot;:(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="const" xstr="&quot;.&quot;">
          <constant ctag="cstr" strValue="."/>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="257" name="no-overlap" origin="f-pre" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="258" origin="prim-exp" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6190" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="202" fname="sname"/>
         </offset>
         <field ckey="196" fname="name"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="259" origin="prim-exp" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="260" origin="prim-lval" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="261" origin="prim-lval" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="262" origin="prim-lval" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="263" origin="prim-lval" p-complexity="1">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="264" origin="prim-exp" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="265" origin="prim-exp" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="266" origin="prim-exp" p-complexity="6">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="267" origin="prim-exp" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;.&quot;">
       <constant ctag="cstr" strValue="."/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="268" origin="prim-exp" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="269" origin="prim-exp" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="270" origin="prim-exp" p-complexity="0">
     <location byte="204472" file="src/cache.c" line="983"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;.&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;.&quot;">
        <constant ctag="cstr" strValue="."/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="271" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="272" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="273" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="274" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="275" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="276" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="277" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
       <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6190" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="202" fname="sname"/>
           </offset>
           <field ckey="196" fname="name"/>
          </offset>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="278" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
       <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6190" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="202" fname="sname"/>
           </offset>
           <field ckey="196" fname="name"/>
          </offset>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
       <arg etag="caste" xstr="caste (domain_suffix:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="domain_suffix">
         <lval>
          <lhost>
           <var vid="6173" vname="domain_suffix"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="279" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="280" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="plusa" etag="binop" xstr="((null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))] + null-terminator-pos[caste (domain_suffix:(char*))]):int">
       <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (cache___0-&gt;name.sname):(char*))]">
        <arg etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint"/>
         </typ>
         <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="cache___0">
             <lval>
              <lhost>
               <var vid="6190" vname="cache___0"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
           <offset>
            <offset>
             <field ckey="202" fname="sname"/>
            </offset>
            <field ckey="196" fname="name"/>
           </offset>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (domain_suffix:(char*))]">
        <arg etag="caste" xstr="caste (domain_suffix:(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="lval" xstr="domain_suffix">
          <lval>
           <lhost>
            <var vid="6173" vname="domain_suffix"/>
           </lhost>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" fname="strcat" id="281" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="282" origin="prim-exp" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6190" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="202" fname="sname"/>
         </offset>
         <field ckey="196" fname="name"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="283" origin="prim-exp" p-complexity="0">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="284" origin="prim-lval" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="285" origin="prim-lval" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="286" origin="prim-lval" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="287" origin="prim-lval" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="288" origin="prim-exp" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="289" origin="prim-exp" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="290" origin="prim-exp" p-complexity="6">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="291" origin="prim-exp" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="domain_suffix">
       <lval>
        <lhost>
         <var vid="6173" vname="domain_suffix"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="292" origin="prim-exp" p-complexity="0">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6173" vname="domain_suffix"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="293" origin="prim-exp" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="294" origin="prim-exp" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="295" origin="prim-exp" p-complexity="1">
     <location byte="204508" file="src/cache.c" line="984"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (domain_suffix:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="domain_suffix">
        <lval>
         <lhost>
          <var vid="6173" vname="domain_suffix"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="296" origin="prim-exp" p-complexity="0">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="297" origin="prim-lval" p-complexity="1">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="298" origin="prim-lval" p-complexity="1">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="299" origin="prim-lval" p-complexity="1">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="300" origin="prim-lval" p-complexity="1">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="301" origin="prim-exp" p-complexity="0">
     <location byte="204554" file="src/cache.c" line="985"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6177" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="302" origin="prim-exp" p-complexity="0">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="303" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="304" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="305" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="306" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="307" origin="prim-exp" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="ilong">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;local_ttl">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="local_ttl"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="308" origin="prim-exp" p-complexity="6">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="local_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="309" origin="prim-exp" p-complexity="0">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="310" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="311" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="312" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="313" origin="prim-lval" p-complexity="1">
     <location byte="204580" file="src/cache.c" line="986"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="314" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="315" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="316" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="317" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="318" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="319" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="320" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="321" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6180" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="322" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6166" vname="index___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="323" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6168" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="324" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="325" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="326" origin="prim-exp" p-complexity="1">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="327" origin="prim-exp" p-complexity="0">
     <location byte="204624" file="src/cache.c" line="987"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6169" vname="hashsz"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="5"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="328" origin="prim-exp" p-complexity="0">
     <location byte="204690" file="src/cache.c" line="988"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="329" origin="prim-op" p-complexity="2">
     <location byte="204690" file="src/cache.c" line="988"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="330" origin="prim-op" p-complexity="2">
     <location byte="204690" file="src/cache.c" line="988"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="484"/>
       <node name="if-then"/>
       <node name="stmt" num="483"/>
       <node name="if-then"/>
       <node name="stmt" num="481"/>
       <node name="if-then"/>
       <node name="stmt" num="480"/>
       <node name="if-then"/>
       <node name="stmt" num="479"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strlen" id="331" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strlen" id="332" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strlen" id="333" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strlen" id="334" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strlen" id="335" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="336" origin="prim-exp" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="canon">
       <lval>
        <lhost>
         <var vid="6193" vname="canon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="337" origin="prim-exp" p-complexity="0">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="338" origin="prim-exp" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="339" origin="prim-exp" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="340" origin="prim-exp" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="341" origin="prim-exp" p-complexity="0">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6205" vname="tmp___9"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="342" origin="prim-op" p-complexity="2">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="sizeof" xstr="sizeof (struct 196)">
       <typ ckey="196" ttag="tcomp"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="6205" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="343" origin="prim-op" p-complexity="2">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="sizeof" xstr="sizeof (struct 196)">
       <typ ckey="196" ttag="tcomp"/>
      </exp1>
      <exp2 etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="6205" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="344" origin="prim-op" p-complexity="3">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___9):unsigned long">
       <exp1 etag="sizeof" xstr="sizeof (struct 196)">
        <typ ckey="196" ttag="tcomp"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___9">
        <lval>
         <lhost>
          <var vid="6205" vname="tmp___9"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="345" origin="prim-op" p-complexity="3">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___9):unsigned long">
       <exp1 etag="sizeof" xstr="sizeof (struct 196)">
        <typ ckey="196" ttag="tcomp"/>
       </exp1>
       <exp2 etag="lval" xstr="tmp___9">
        <lval>
         <lhost>
          <var vid="6205" vname="tmp___9"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iulong" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="346" origin="prim-op" p-complexity="4">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="minusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___9):unsigned long + 1):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___9):unsigned long">
        <exp1 etag="sizeof" xstr="sizeof (struct 196)">
         <typ ckey="196" ttag="tcomp"/>
        </exp1>
        <exp2 etag="lval" xstr="tmp___9">
         <lval>
          <lhost>
           <var vid="6205" vname="tmp___9"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iulong" intValue="1"/>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="50">
       <constant ctag="cint64" ikind="iulong" intValue="50"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="347" origin="prim-op" p-complexity="4">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate op="minusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((((sizeof (struct 196) + tmp___9):unsigned long + 1):unsigned long">
       <exp1 binop="plusa" etag="binop" xstr="((sizeof (struct 196) + tmp___9):unsigned long">
        <exp1 etag="sizeof" xstr="sizeof (struct 196)">
         <typ ckey="196" ttag="tcomp"/>
        </exp1>
        <exp2 etag="lval" xstr="tmp___9">
         <lval>
          <lhost>
           <var vid="6205" vname="tmp___9"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iulong" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iulong" intValue="1"/>
       </exp2>
       <typ ikind="iulong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="50">
       <constant ctag="cint64" ikind="iulong" intValue="50"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="348" origin="prim-exp" p-complexity="1">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="lval" xstr="tmp___10">
       <lval>
        <lhost>
         <var vid="6207" vname="tmp___10"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="349" origin="prim-exp" p-complexity="0">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6207" vname="tmp___10"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="485"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="350" origin="prim-exp" p-complexity="0">
     <location byte="204715" file="src/cache.c" line="990"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="351" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="352" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="353" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="354" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="355" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="356" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>dest</ci>
        <ci>src</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="357" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="358" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" fname="strcpy" id="359" name="buffersize" origin="f-pre" p-complexity="7">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (canon:(char*))]">
       <arg etag="caste" xstr="caste (canon:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="canon">
         <lval>
          <lhost>
           <var vid="6193" vname="canon"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="dest" nr="1" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dest</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>src</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="360" origin="prim-exp" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6190" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="202" fname="sname"/>
         </offset>
         <field ckey="196" fname="name"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="361" origin="prim-exp" p-complexity="0">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="362" origin="prim-lval" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="363" origin="prim-lval" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="364" origin="prim-lval" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="365" origin="prim-lval" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="366" origin="prim-exp" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="367" origin="prim-exp" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="368" origin="prim-exp" p-complexity="6">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (cache___0-&gt;name.sname):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (cache___0-&gt;name.sname)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6190" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="202" fname="sname"/>
          </offset>
          <field ckey="196" fname="name"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="369" origin="prim-exp" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="canon">
       <lval>
        <lhost>
         <var vid="6193" vname="canon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="370" origin="prim-exp" p-complexity="0">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="371" origin="prim-exp" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="372" origin="prim-exp" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="373" origin="prim-exp" p-complexity="1">
     <location byte="204793" file="src/cache.c" line="992"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (canon:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="374" origin="prim-exp" p-complexity="0">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="375" origin="prim-lval" p-complexity="1">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="376" origin="prim-lval" p-complexity="1">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="377" origin="prim-lval" p-complexity="1">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="378" origin="prim-lval" p-complexity="1">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="379" origin="prim-exp" p-complexity="0">
     <location byte="204831" file="src/cache.c" line="993"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6177" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="380" origin="prim-exp" p-complexity="0">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="381" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="382" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="383" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="384" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="385" origin="prim-exp" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="ilong">
      <exp etag="lval" xstr="dnsmasq_daemon-&gt;local_ttl">
       <lval>
        <lhost>
         <mem etag="lval" xstr="dnsmasq_daemon">
          <lval>
           <lhost>
            <var vid="4341" vname="dnsmasq_daemon"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="238" fname="local_ttl"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="386" origin="prim-exp" p-complexity="6">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="local_ttl"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="387" origin="prim-exp" p-complexity="0">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="388" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="389" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="390" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="391" origin="prim-lval" p-complexity="1">
     <location byte="204857" file="src/cache.c" line="994"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="392" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6190" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="393" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="394" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="395" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6190" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="396" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="397" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="398" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (addr)">
       <lval>
        <lhost>
         <var vid="6178" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="399" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6180" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="400" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6166" vname="index___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="401" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6168" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="402" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="403" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="404" origin="prim-exp" p-complexity="1">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6168" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="4"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="405" origin="prim-exp" p-complexity="0">
     <location byte="204901" file="src/cache.c" line="995"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6169" vname="hashsz"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="5"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="406" origin="prim-exp" p-complexity="0">
     <location byte="204967" file="src/cache.c" line="996"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="407" origin="prim-op" p-complexity="2">
     <location byte="204967" file="src/cache.c" line="996"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="408" origin="prim-op" p-complexity="2">
     <location byte="204967" file="src/cache.c" line="996"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="name_count">
       <lval>
        <lhost>
         <var vid="6175" vname="name_count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="487"/>
       <node name="if-then"/>
       <node name="stmt" num="486"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="free" id="409" name="allocation-base" origin="f-pre" p-complexity="1">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="allocation-base">
      <exp etag="caste" xstr="caste (canon:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="ptr" nr="1" xstr="caste (canon:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="allocation-base">
      <math>
       <apply>
        <allocation-base/>
        <ci>ptr</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="410" origin="prim-exp" p-complexity="1">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="canon">
       <lval>
        <lhost>
         <var vid="6193" vname="canon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="411" origin="prim-exp" p-complexity="0">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6193" vname="canon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="412" origin="prim-exp" p-complexity="1">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (canon:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="413" origin="prim-exp" p-complexity="1">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (canon:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="414" origin="prim-exp" p-complexity="1">
     <location byte="204992" file="src/cache.c" line="998"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (canon:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="canon">
        <lval>
         <lhost>
          <var vid="6193" vname="canon"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="488"/>
       <node name="if-then"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="415" origin="prim-exp" p-complexity="0">
     <location byte="205021" file="src/cache.c" line="1001"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6192" vname="nomem"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="416" origin="prim-exp" p-complexity="0">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;bad name at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad name at %s line %d"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="417" origin="prim-exp" p-complexity="0">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;bad name at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad name at %s line %d"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="418" origin="prim-exp" p-complexity="0">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;bad name at %s line %d&quot;">
       <constant ctag="cstr" strValue="bad name at %s line %d"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="419" origin="prim-exp" p-complexity="0">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6164" vname="filename"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="420" origin="prim-exp" p-complexity="1">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="421" origin="prim-exp" p-complexity="1">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="422" origin="prim-exp" p-complexity="1">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="423" origin="prim-exp" p-complexity="0">
     <location byte="205038" file="src/cache.c" line="1002"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6176" vname="lineno"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="490"/>
       <node name="if-then"/>
       <node name="stmt" num="489"/>
       <node name="if-else"/>
       <node name="stmt" num="478"/>
       <node name="loop"/>
       <node name="stmt" num="467"/>
       <node name="loop"/>
       <node name="stmt" num="447"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fclose" id="424" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fclose" id="425" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fclose" id="426" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="fclose" id="427" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="f">
         <lval>
          <lhost>
           <var vid="6170" vname="f"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="1" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="428" origin="prim-exp" p-complexity="0">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6170" vname="f"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="429" origin="prim-exp" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="430" origin="prim-exp" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="431" origin="prim-exp" p-complexity="1">
     <location byte="205110" file="src/cache.c" line="1006"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="f">
       <lval>
        <lhost>
         <var vid="6170" vname="f"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="491"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="432" origin="prim-exp" p-complexity="0">
     <location byte="205124" file="src/cache.c" line="1008"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6168" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="492"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="433" origin="prim-exp" p-complexity="0">
     <location byte="205139" file="src/cache.c" line="1009"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="493"/>
       <node name="if-then"/>
       <node name="stmt" num="492"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="434" origin="prim-exp" p-complexity="0">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;read %s - %d addresses&quot;">
       <constant ctag="cstr" strValue="read %s - %d addresses"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="435" origin="prim-exp" p-complexity="0">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;read %s - %d addresses&quot;">
       <constant ctag="cstr" strValue="read %s - %d addresses"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="436" origin="prim-exp" p-complexity="0">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;read %s - %d addresses&quot;">
       <constant ctag="cstr" strValue="read %s - %d addresses"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="437" origin="prim-exp" p-complexity="0">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6164" vname="filename"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="438" origin="prim-exp" p-complexity="1">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="439" origin="prim-exp" p-complexity="1">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="440" origin="prim-exp" p-complexity="1">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="filename">
       <lval>
        <lhost>
         <var vid="6164" vname="filename"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="441" origin="prim-exp" p-complexity="0">
     <location byte="205162" file="src/cache.c" line="1011"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6174" vname="addr_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="494"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="442" origin="prim-exp" p-complexity="0">
     <location byte="205229" file="src/cache.c" line="1013"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6175" vname="name_count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="495"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:34">
   <application file="src/cache.xml" name="application"/>
  </header>
 </c-analysis>
