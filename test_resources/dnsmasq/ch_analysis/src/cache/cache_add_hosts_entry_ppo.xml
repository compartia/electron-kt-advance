<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="add_hosts_entry">
   <statistics avg-context-complexity="2.94" avg-predicate-complexity="1.66" context-complexity="845" predicate-complexity="476" size="287"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6128" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6128" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6128" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6128" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="15" origin="prim-exp" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="cache___0-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="16" origin="prim-exp" p-complexity="6">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="cache___0">
         <lval>
          <lhost>
           <var vid="6120" vname="cache___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="17" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="18" origin="prim-lval" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="19" origin="prim-lval" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="20" origin="prim-lval" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="21" origin="prim-lval" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="22" origin="prim-op" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="23" origin="prim-op" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="24" origin="prim-op" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="25" origin="prim-op" p-complexity="1">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="26" origin="prim-exp" p-complexity="0">
     <location byte="200920" file="src/cache.c" line="795"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6130" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="374"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="27" origin="prim-exp" p-complexity="0">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="28" origin="prim-exp" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="lookup-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="lookup">
          <lval>
           <lhost>
            <var vid="6127" vname="lookup"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="29" origin="prim-exp" p-complexity="6">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="lookup">
         <lval>
          <lhost>
           <var vid="6127" vname="lookup"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="30" origin="prim-exp" p-complexity="0">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="31" origin="prim-lval" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="32" origin="prim-lval" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="33" origin="prim-lval" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="34" origin="prim-lval" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="35" origin="prim-op" p-complexity="0">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="36" origin="prim-op" p-complexity="1">
     <location byte="201084" file="src/cache.c" line="800"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="37" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="38" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="39" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="40" name="buffersize" origin="f-pre" p-complexity="7">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="41" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="42" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="43" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="memcmp" id="44" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="45" origin="prim-exp" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="lookup">
          <lval>
           <lhost>
            <var vid="6127" vname="lookup"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="46" origin="prim-exp" p-complexity="0">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="47" origin="prim-lval" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="48" origin="prim-lval" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="49" origin="prim-lval" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="50" origin="prim-lval" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="51" origin="prim-exp" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="52" origin="prim-exp" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="53" origin="prim-exp" p-complexity="6">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="54" origin="prim-exp" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="55" origin="prim-exp" p-complexity="0">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="56" origin="prim-exp" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="57" origin="prim-exp" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="58" origin="prim-exp" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="59" origin="prim-exp" p-complexity="1">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="addrlen">
       <lval>
        <lhost>
         <var vid="6122" vname="addrlen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="60" origin="prim-exp" p-complexity="0">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="377"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="61" origin="prim-exp" p-complexity="0">
     <location byte="201159" file="src/cache.c" line="803"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6135" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="free" id="62" name="allocation-base" origin="f-pre" p-complexity="1">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="allocation-base">
      <exp etag="caste" xstr="caste (cache___0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="cache___0">
        <lval>
         <lhost>
          <var vid="6120" vname="cache___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="ptr" nr="1" xstr="caste (cache___0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="cache___0">
        <lval>
         <lhost>
          <var vid="6120" vname="cache___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="allocation-base">
      <math>
       <apply>
        <allocation-base/>
        <ci>ptr</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="63" origin="prim-exp" p-complexity="1">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="196" ttag="tcomp"/>
      <tto ttag="tvoid"/>
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="64" origin="prim-exp" p-complexity="0">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="65" origin="prim-exp" p-complexity="1">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (cache___0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="cache___0">
        <lval>
         <lhost>
          <var vid="6120" vname="cache___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="66" origin="prim-exp" p-complexity="1">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (cache___0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="cache___0">
        <lval>
         <lhost>
          <var vid="6120" vname="cache___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="67" origin="prim-exp" p-complexity="1">
     <location byte="201217" file="src/cache.c" line="805"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (cache___0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="lval" xstr="cache___0">
        <lval>
         <lhost>
          <var vid="6120" vname="cache___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="379"/>
       <node name="if-then"/>
       <node name="stmt" num="378"/>
       <node name="if-then"/>
       <node name="stmt" num="376"/>
       <node name="if-then"/>
       <node name="stmt" num="375"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="68" origin="prim-exp" p-complexity="0">
     <location byte="201268" file="src/cache.c" line="827"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6125" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="69" origin="prim-exp" p-complexity="0">
     <location byte="201292" file="src/cache.c" line="830"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6131" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="384"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="70" origin="prim-exp" p-complexity="0">
     <location byte="201292" file="src/cache.c" line="830"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="384"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="71" origin="prim-exp" p-complexity="0">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6133" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="72" origin="prim-op" p-complexity="2">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="mult" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iuint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="73" origin="prim-op" p-complexity="2">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="mult" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iuint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="74" origin="prim-exp" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="cast">
      <tfrom ikind="iuchar" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="*(((caste (lval (addr):(unsigned char*)) +i lval (i)):(unsigned char*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
          <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
           <typ ttag="tptr">
            <typ ikind="iuchar" ttag="tint"/>
           </typ>
           <exp etag="lval" xstr="addr">
            <lval>
             <lhost>
              <var vid="6121" vname="addr"/>
             </lhost>
            </lval>
           </exp>
          </exp1>
          <exp2 etag="lval" xstr="i">
           <lval>
            <lhost>
             <var vid="6131" vname="i"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ikind="iuchar" ttag="tint"/>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="75" origin="prim-exp" p-complexity="8">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
         <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
          <typ ttag="tptr">
           <typ ikind="iuchar" ttag="tint"/>
          </typ>
          <exp etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6121" vname="addr"/>
            </lhost>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="lval" xstr="i">
          <lval>
           <lhost>
            <var vid="6131" vname="i"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iuchar" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="76" origin="prim-exp" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="77" origin="prim-exp" p-complexity="0">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="78" origin="prim-exp" p-complexity="0">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6131" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="79" origin="prim-op" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addr:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="80" origin="prim-op" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addr:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="81" origin="prim-op" p-complexity="3">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6131" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="82" origin="prim-op" p-complexity="2">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6131" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="83" origin="prim-lval" p-complexity="3">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
       <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
        <typ ttag="tptr">
         <typ ikind="iuchar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6121" vname="addr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6131" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="84" origin="prim-lval" p-complexity="3">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
       <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
        <typ ttag="tptr">
         <typ ikind="iuchar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6121" vname="addr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6131" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="85" origin="prim-lval" p-complexity="3">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
       <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
        <typ ttag="tptr">
         <typ ikind="iuchar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6121" vname="addr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6131" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="86" origin="prim-lval" p-complexity="3">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
       <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
        <typ ttag="tptr">
         <typ ikind="iuchar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6121" vname="addr"/>
          </lhost>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6131" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="87" origin="prim-op" p-complexity="4">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 binop="mult" etag="binop" xstr="((j * 2):unsigned int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iuint" intValue="2"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp1>
      <exp2 etag="caste" xstr="caste (*(((caste (lval (addr):(unsigned char*)) +i lval (i)):(unsigned char*)):unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="*(((caste (lval (addr):(unsigned char*)) +i lval (i)):(unsigned char*))">
        <lval>
         <lhost>
          <mem binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
           <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
            <typ ttag="tptr">
             <typ ikind="iuchar" ttag="tint"/>
            </typ>
            <exp etag="lval" xstr="addr">
             <lval>
              <lhost>
               <var vid="6121" vname="addr"/>
              </lhost>
             </lval>
            </exp>
           </exp1>
           <exp2 etag="lval" xstr="i">
            <lval>
             <lhost>
              <var vid="6131" vname="i"/>
             </lhost>
            </lval>
           </exp2>
           <typ ttag="tptr">
            <typ ikind="iuchar" ttag="tint"/>
           </typ>
          </mem>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="88" origin="prim-op" p-complexity="4">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 binop="mult" etag="binop" xstr="((j * 2):unsigned int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iuint" intValue="2"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp1>
      <exp2 etag="caste" xstr="caste (*(((caste (lval (addr):(unsigned char*)) +i lval (i)):(unsigned char*)):unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="*(((caste (lval (addr):(unsigned char*)) +i lval (i)):(unsigned char*))">
        <lval>
         <lhost>
          <mem binop="indexpi" etag="binop" xstr="((caste (addr:(unsigned char*)) +i i):(unsigned char*)">
           <exp1 etag="caste" xstr="caste (addr:(unsigned char*))">
            <typ ttag="tptr">
             <typ ikind="iuchar" ttag="tint"/>
            </typ>
            <exp etag="lval" xstr="addr">
             <lval>
              <lhost>
               <var vid="6121" vname="addr"/>
              </lhost>
             </lval>
            </exp>
           </exp1>
           <exp2 etag="lval" xstr="i">
            <lval>
             <lhost>
              <var vid="6131" vname="i"/>
             </lhost>
            </lval>
           </exp2>
           <typ ttag="tptr">
            <typ ikind="iuchar" ttag="tint"/>
           </typ>
          </mem>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="89" origin="prim-exp" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="hashsz">
       <lval>
        <lhost>
         <var vid="6126" vname="hashsz"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="90" origin="prim-exp" p-complexity="0">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6126" vname="hashsz"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="91" origin="prim-op" p-complexity="1">
     <location byte="201330" file="src/cache.c" line="831"/>
     <predicate tag="not-zero">
      <exp etag="caste" xstr="caste (hashsz:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="hashsz">
        <lval>
         <lhost>
          <var vid="6126" vname="hashsz"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="92" origin="prim-exp" p-complexity="0">
     <location byte="201292" file="src/cache.c" line="830"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6131" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="93" origin="prim-op" p-complexity="2">
     <location byte="201292" file="src/cache.c" line="830"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6131" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="94" origin="prim-op" p-complexity="2">
     <location byte="201292" file="src/cache.c" line="830"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6131" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="386"/>
       <node name="loop"/>
       <node name="stmt" num="383"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="95" origin="prim-exp" p-complexity="8">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
         <exp1 etag="lval" xstr="rhash">
          <lval>
           <lhost>
            <var vid="6125" vname="rhash"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6133" vname="j"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ttag="tptr">
           <typ ckey="196" ttag="tcomp"/>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="96" origin="prim-exp" p-complexity="0">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6125" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="97" origin="prim-exp" p-complexity="0">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6133" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="98" origin="prim-op" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="99" origin="prim-op" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="100" origin="prim-op" p-complexity="3">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="101" origin="prim-op" p-complexity="2">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="102" origin="prim-lval" p-complexity="3">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="103" origin="prim-lval" p-complexity="3">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="104" origin="prim-lval" p-complexity="3">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="105" origin="prim-lval" p-complexity="3">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="387"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="106" origin="prim-exp" p-complexity="0">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="389"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="107" origin="prim-exp" p-complexity="2">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp binop="band" etag="binop" xstr="((caste (lookup-&gt;flags:int) &amp; caste (cache___0-&gt;flags:int)):int">
       <exp1 etag="caste" xstr="caste (lookup-&gt;flags:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="lookup-&gt;flags">
         <lval>
          <lhost>
           <mem etag="lval" xstr="lookup">
            <lval>
             <lhost>
              <var vid="6127" vname="lookup"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="196" fname="flags"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="caste" xstr="caste (cache___0-&gt;flags:int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="lval" xstr="cache___0-&gt;flags">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6120" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="196" fname="flags"/>
          </offset>
         </lval>
        </exp>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="108" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="lookup-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="lookup">
          <lval>
           <lhost>
            <var vid="6127" vname="lookup"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="109" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="lookup">
         <lval>
          <lhost>
           <var vid="6127" vname="lookup"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="110" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="111" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="112" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="113" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="114" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="115" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="cache___0-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="116" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="cache___0">
         <lval>
          <lhost>
           <var vid="6120" vname="cache___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="117" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="118" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="119" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="120" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="121" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="122" origin="prim-op" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="123" origin="prim-op" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="124" origin="prim-op" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="125" origin="prim-op" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="126" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="127" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="128" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="129" name="buffersize" origin="f-pre" p-complexity="7">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="130" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="131" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="132" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="memcmp" id="133" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="134" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="lookup">
          <lval>
           <lhost>
            <var vid="6127" vname="lookup"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="135" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="136" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="137" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="138" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="139" origin="prim-lval" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="140" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="141" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="142" origin="prim-exp" p-complexity="6">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (lookup-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (lookup-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="lookup">
           <lval>
            <lhost>
             <var vid="6127" vname="lookup"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="143" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="144" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="145" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="146" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="147" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="148" origin="prim-exp" p-complexity="1">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="addrlen">
       <lval>
        <lhost>
         <var vid="6122" vname="addrlen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="149" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="392"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="150" origin="prim-exp" p-complexity="0">
     <location byte="201441" file="src/cache.c" line="834"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6137" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="151" origin="prim-exp" p-complexity="0">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="152" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="153" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="154" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="155" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="156" origin="prim-exp" p-complexity="3">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="cast">
      <tfrom ikind="iuint" ttag="tint"/>
      <tto ikind="iushort" ttag="tint"/>
      <exp binop="band" etag="binop" xstr="((caste (cache___0-&gt;flags:unsigned int) &amp; (( ~  ((1 &lt;&lt; 2):unsigned int):unsigned int)):unsigned int">
       <exp1 etag="caste" xstr="caste (cache___0-&gt;flags:unsigned int)">
        <typ ikind="iuint" ttag="tint"/>
        <exp etag="lval" xstr="cache___0-&gt;flags">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6120" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="196" fname="flags"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="unop" unop="bnot" xstr="(( ~  ((1 &lt;&lt; 2):unsigned int):unsigned int)">
        <exp binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 2):unsigned int">
         <exp1 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iuint" intValue="1"/>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="157" origin="prim-exp" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="cache___0-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="158" origin="prim-exp" p-complexity="6">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="cache___0">
         <lval>
          <lhost>
           <var vid="6120" vname="cache___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="159" origin="prim-exp" p-complexity="0">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="160" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="161" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="162" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="163" origin="prim-lval" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="164" origin="prim-op" p-complexity="0">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="165" origin="prim-op" p-complexity="1">
     <location byte="201564" file="src/cache.c" line="837"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="394"/>
       <node name="if-then"/>
       <node name="stmt" num="393"/>
       <node name="if-then"/>
       <node name="stmt" num="391"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="166" origin="prim-exp" p-complexity="6">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="lookup">
         <lval>
          <lhost>
           <var vid="6127" vname="lookup"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="167" origin="prim-exp" p-complexity="0">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="168" origin="prim-lval" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="169" origin="prim-lval" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="170" origin="prim-lval" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="171" origin="prim-lval" p-complexity="1">
     <location byte="201385" file="src/cache.c" line="833"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="396"/>
       <node name="loop"/>
       <node name="stmt" num="388"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="172" origin="prim-exp" p-complexity="0">
     <location byte="201615" file="src/cache.c" line="842"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="173" origin="prim-exp" p-complexity="0">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="174" origin="prim-lval" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="175" origin="prim-lval" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="176" origin="prim-lval" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="177" origin="prim-lval" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="178" origin="prim-exp" p-complexity="8">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
         <exp1 etag="lval" xstr="rhash">
          <lval>
           <lhost>
            <var vid="6125" vname="rhash"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6133" vname="j"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ttag="tptr">
           <typ ckey="196" ttag="tcomp"/>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="179" origin="prim-exp" p-complexity="0">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6125" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="180" origin="prim-exp" p-complexity="0">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6133" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="181" origin="prim-op" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="182" origin="prim-op" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="183" origin="prim-op" p-complexity="3">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="184" origin="prim-op" p-complexity="2">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="185" origin="prim-lval" p-complexity="3">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="186" origin="prim-lval" p-complexity="3">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="187" origin="prim-lval" p-complexity="3">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="188" origin="prim-lval" p-complexity="3">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="189" origin="prim-exp" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="*(((lval (rhash) +i lval (j)):((struct 196*)*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
          <exp1 etag="lval" xstr="rhash">
           <lval>
            <lhost>
             <var vid="6125" vname="rhash"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6133" vname="j"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ttag="tptr">
            <typ ckey="196" ttag="tcomp"/>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="190" origin="prim-exp" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="*(((lval (rhash) +i lval (j)):((struct 196*)*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
          <exp1 etag="lval" xstr="rhash">
           <lval>
            <lhost>
             <var vid="6125" vname="rhash"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6133" vname="j"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ttag="tptr">
            <typ ckey="196" ttag="tcomp"/>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="191" origin="prim-exp" p-complexity="1">
     <location byte="201634" file="src/cache.c" line="844"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="*(((lval (rhash) +i lval (j)):((struct 196*)*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
          <exp1 etag="lval" xstr="rhash">
           <lval>
            <lhost>
             <var vid="6125" vname="rhash"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6133" vname="j"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ttag="tptr">
            <typ ckey="196" ttag="tcomp"/>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="192" origin="prim-exp" p-complexity="0">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6125" vname="rhash"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="193" origin="prim-exp" p-complexity="0">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6133" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="194" origin="prim-op" p-complexity="1">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="195" origin="prim-op" p-complexity="1">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="196" origin="prim-op" p-complexity="3">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="197" origin="prim-op" p-complexity="2">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
      <exp1 etag="lval" xstr="rhash">
       <lval>
        <lhost>
         <var vid="6125" vname="rhash"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6133" vname="j"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="198" origin="prim-lval" p-complexity="3">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="199" origin="prim-lval" p-complexity="3">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="200" origin="prim-lval" p-complexity="3">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="201" origin="prim-lval" p-complexity="3">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((rhash +i j):((struct 196*)*)">
       <exp1 etag="lval" xstr="rhash">
        <lval>
         <lhost>
          <var vid="6125" vname="rhash"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6133" vname="j"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ttag="tptr">
         <typ ckey="196" ttag="tcomp"/>
        </typ>
       </typ>
      </exp>
      <typ ttag="tptr">
       <typ ckey="196" ttag="tcomp"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="202" origin="prim-exp" p-complexity="0">
     <location byte="201661" file="src/cache.c" line="845"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="398"/>
       <node name="if-then"/>
       <node name="stmt" num="397"/>
       <node name="if-then"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="203" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="196" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="204" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="205" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="206" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="207" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 196*))">
       <typ ttag="tptr">
        <typ ckey="196" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="208" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="209" origin="prim-exp" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="210" origin="prim-exp" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="211" origin="prim-exp" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="176" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="212" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="213" origin="prim-exp" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="cache___0-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="214" origin="prim-exp" p-complexity="6">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="cache___0">
         <lval>
          <lhost>
           <var vid="6120" vname="cache___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="215" origin="prim-exp" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="216" origin="prim-lval" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="217" origin="prim-lval" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="218" origin="prim-lval" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="219" origin="prim-lval" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="220" origin="prim-op" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="221" origin="prim-op" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="7">
       <constant ctag="cint64" ikind="iint" intValue="7"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="222" origin="prim-op" p-complexity="0">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="223" origin="prim-op" p-complexity="1">
     <location byte="201708" file="src/cache.c" line="851"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="399"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="224" origin="prim-exp" p-complexity="0">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="225" origin="prim-exp" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="lookup-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="lookup">
          <lval>
           <lhost>
            <var vid="6127" vname="lookup"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="226" origin="prim-exp" p-complexity="6">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="lookup">
         <lval>
          <lhost>
           <var vid="6127" vname="lookup"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="227" origin="prim-exp" p-complexity="0">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="lookup"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="228" origin="prim-lval" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="229" origin="prim-lval" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="230" origin="prim-lval" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="231" origin="prim-lval" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="lookup">
       <lval>
        <lhost>
         <var vid="6127" vname="lookup"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="232" origin="prim-op" p-complexity="0">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="233" origin="prim-op" p-complexity="1">
     <location byte="201801" file="src/cache.c" line="852"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="6">
       <constant ctag="cint64" ikind="iint" intValue="6"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="234" origin="prim-exp" p-complexity="0">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="235" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="236" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="237" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="238" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="239" origin="prim-exp" p-complexity="3">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="cast">
      <tfrom ikind="iuint" ttag="tint"/>
      <tto ikind="iushort" ttag="tint"/>
      <exp binop="band" etag="binop" xstr="((caste (cache___0-&gt;flags:unsigned int) &amp; (( ~  ((1 &lt;&lt; 2):unsigned int):unsigned int)):unsigned int">
       <exp1 etag="caste" xstr="caste (cache___0-&gt;flags:unsigned int)">
        <typ ikind="iuint" ttag="tint"/>
        <exp etag="lval" xstr="cache___0-&gt;flags">
         <lval>
          <lhost>
           <mem etag="lval" xstr="cache___0">
            <lval>
             <lhost>
              <var vid="6120" vname="cache___0"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="196" fname="flags"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="unop" unop="bnot" xstr="(( ~  ((1 &lt;&lt; 2):unsigned int):unsigned int)">
        <exp binop="shiftlt" etag="binop" xstr="((1 &lt;&lt; 2):unsigned int">
         <exp1 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iuint" intValue="1"/>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iuint" ttag="tint"/>
        </exp>
        <typ ikind="iuint" ttag="tint"/>
       </exp2>
       <typ ikind="iuint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="240" origin="prim-exp" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="cast">
      <tfrom ikind="iushort" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="lval" xstr="cache___0-&gt;flags">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="196" fname="flags"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="241" origin="prim-exp" p-complexity="6">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="cache___0">
         <lval>
          <lhost>
           <var vid="6120" vname="cache___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="196" fname="flags"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="242" origin="prim-exp" p-complexity="0">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="243" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="244" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="245" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="246" origin="prim-lval" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="247" origin="prim-op" p-complexity="0">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="248" origin="prim-op" p-complexity="1">
     <location byte="201841" file="src/cache.c" line="853"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="402"/>
       <node name="if-then"/>
       <node name="stmt" num="401"/>
       <node name="if-then"/>
       <node name="stmt" num="400"/>
       <node name="if-else"/>
       <node name="stmt" num="381"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="249" origin="prim-exp" p-complexity="0">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="250" origin="prim-lval" p-complexity="1">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="251" origin="prim-lval" p-complexity="1">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="252" origin="prim-lval" p-complexity="1">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="253" origin="prim-lval" p-complexity="1">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="254" origin="prim-exp" p-complexity="0">
     <location byte="201876" file="src/cache.c" line="856"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6124" vname="index___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="255" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="256" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="257" name="buffersize" origin="f-pre" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="258" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid"/>
      <exp1 etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="259" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="260" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="261" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="memcpy" id="262" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="n" nr="3" xstr="caste (addrlen:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp etag="lval" xstr="addrlen">
        <lval>
         <lhost>
          <var vid="6122" vname="addrlen"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="263" origin="prim-exp" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid"/>
      <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="cache___0">
          <lval>
           <lhost>
            <var vid="6120" vname="cache___0"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="197" fname="addr"/>
         </offset>
         <field ckey="196" fname="addr"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="264" origin="prim-exp" p-complexity="0">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="265" origin="prim-lval" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="266" origin="prim-lval" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="267" origin="prim-lval" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="268" origin="prim-lval" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="269" origin="prim-exp" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="270" origin="prim-exp" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="271" origin="prim-exp" p-complexity="6">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (cache___0-&gt;addr.addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="addrof" xstr="addrof (cache___0-&gt;addr.addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="cache___0">
           <lval>
            <lhost>
             <var vid="6120" vname="cache___0"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="197" fname="addr"/>
          </offset>
          <field ckey="196" fname="addr"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="272" origin="prim-exp" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="176" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6121" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="273" origin="prim-exp" p-complexity="0">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="274" origin="prim-exp" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="275" origin="prim-exp" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="276" origin="prim-exp" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addr:(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="addr">
        <lval>
         <lhost>
          <var vid="6121" vname="addr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="277" origin="prim-exp" p-complexity="1">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="lval" xstr="addrlen">
       <lval>
        <lhost>
         <var vid="6122" vname="addrlen"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="278" origin="prim-exp" p-complexity="0">
     <location byte="201898" file="src/cache.c" line="857"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="addrlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="279" origin="prim-exp" p-complexity="0">
     <location byte="201942" file="src/cache.c" line="858"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="280" origin="prim-exp" p-complexity="1">
     <location byte="201942" file="src/cache.c" line="858"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="281" origin="prim-exp" p-complexity="1">
     <location byte="201942" file="src/cache.c" line="858"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="282" origin="prim-exp" p-complexity="1">
     <location byte="201942" file="src/cache.c" line="858"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="403"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="283" origin="prim-exp" p-complexity="0">
     <location byte="201965" file="src/cache.c" line="861"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6132" vname="nameexists"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="404"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="284" origin="prim-exp" p-complexity="0">
     <location byte="201986" file="src/cache.c" line="862"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="cache___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="405"/>
       <node name="if-then"/>
       <node name="stmt" num="404"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="285" origin="prim-exp" p-complexity="1">
     <location byte="201986" file="src/cache.c" line="862"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="405"/>
       <node name="if-then"/>
       <node name="stmt" num="404"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="286" origin="prim-exp" p-complexity="1">
     <location byte="201986" file="src/cache.c" line="862"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="405"/>
       <node name="if-then"/>
       <node name="stmt" num="404"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="287" origin="prim-exp" p-complexity="1">
     <location byte="201986" file="src/cache.c" line="862"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="cache___0">
       <lval>
        <lhost>
         <var vid="6120" vname="cache___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="196" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="405"/>
       <node name="if-then"/>
       <node name="stmt" num="404"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:34">
   <application file="src/cache.xml" name="application"/>
  </header>
 </c-analysis>
