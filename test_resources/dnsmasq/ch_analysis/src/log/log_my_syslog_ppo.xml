<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="my_syslog">
   <statistics avg-context-complexity="1.94" avg-predicate-complexity="0.88" context-complexity="773" predicate-complexity="349" size="398"/>
   <unconstrained-external-functions>
    <efn name="stdio/vsnprintf" num="1"/>
    <efn name="syslog/vsyslog" num="1"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="191006" file="src/log.c" line="284"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6000" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="132"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="0">
     <location byte="191030" file="src/log.c" line="285"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;&quot;">
       <constant ctag="cstr" strValue=""/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="132"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="0">
     <location byte="191050" file="src/log.c" line="287"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5992" vname="priority"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-op" p-complexity="0">
     <location byte="191050" file="src/log.c" line="287"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-op" p-complexity="1">
     <location byte="191050" file="src/log.c" line="287"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="6" origin="prim-exp" p-complexity="0">
     <location byte="191089" file="src/log.c" line="288"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;-tftp&quot;">
       <constant ctag="cstr" strValue="-tftp"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="134"/>
       <node name="if-then"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="7" origin="prim-exp" p-complexity="0">
     <location byte="191112" file="src/log.c" line="289"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5992" vname="priority"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="135"/>
       <node name="if-else"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="8" origin="prim-op" p-complexity="0">
     <location byte="191112" file="src/log.c" line="289"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="135"/>
       <node name="if-else"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="9" origin="prim-op" p-complexity="1">
     <location byte="191112" file="src/log.c" line="289"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="135"/>
       <node name="if-else"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="10" origin="prim-exp" p-complexity="0">
     <location byte="191151" file="src/log.c" line="290"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;-dhcp&quot;">
       <constant ctag="cstr" strValue="-dhcp"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="136"/>
       <node name="if-then"/>
       <node name="stmt" num="135"/>
       <node name="if-else"/>
       <node name="stmt" num="133"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-exp" p-complexity="0">
     <location byte="191171" file="src/log.c" line="293"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5992" vname="priority"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="137"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-exp" p-complexity="0">
     <location byte="191210" file="src/log.c" line="299"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5902" vname="echo_stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="13" name="format" origin="f-pre" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="14" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="15" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="16" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="17" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;dnsmasq%s:&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
         <constant ctag="cstr" strValue="dnsmasq%s:"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="18" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;dnsmasq%s:&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
         <constant ctag="cstr" strValue="dnsmasq%s:"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="19" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="20" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="21" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fprintf" id="22" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="caste" xstr="caste (stderr:(FILE*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ tname="FILE" ttag="tnamed"/>
         </typ>
         <exp etag="lval" xstr="stderr">
          <lval>
           <lhost>
            <var vid="2438" vname="stderr"/>
           </lhost>
          </lval>
         </exp>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="117" ttag="tcomp"/>
      <tto ckey="117" ttag="tcomp"/>
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="2438" vname="stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="25" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="26" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="27" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="28" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
       <constant ctag="cstr" strValue="dnsmasq%s:"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="29" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="30" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="31" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="32" origin="prim-exp" p-complexity="0">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6001" vname="func"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="33" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="34" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="35" origin="prim-exp" p-complexity="1">
     <location byte="191239" file="src/log.c" line="301"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="36" origin="prim-exp" p-complexity="0">
     <location byte="191283" file="src/log.c" line="302"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="37" name="format" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="38" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="39" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="40" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="41" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (format:(char*))]">
       <arg etag="caste" xstr="caste (format:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="format">
         <lval>
          <lhost>
           <var vid="5993" vname="format"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="42" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (format:(char*))]">
       <arg etag="caste" xstr="caste (format:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="format">
         <lval>
          <lhost>
           <var vid="5993" vname="format"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="43" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="44" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="45" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="46" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="caste" xstr="caste (stderr:(FILE*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ tname="FILE" ttag="tnamed"/>
         </typ>
         <exp etag="lval" xstr="stderr">
          <lval>
           <lhost>
            <var vid="2438" vname="stderr"/>
           </lhost>
          </lval>
         </exp>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="vfprintf" id="47" name="no-overlap" origin="f-pre" p-complexity="2">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="stream" nr="1" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>stream</ci>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="48" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="117" ttag="tcomp"/>
      <tto ckey="117" ttag="tcomp"/>
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="49" origin="prim-exp" p-complexity="0">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="2438" vname="stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="50" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="51" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="52" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (stderr:(FILE*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ tname="FILE" ttag="tnamed"/>
       </typ>
       <exp etag="lval" xstr="stderr">
        <lval>
         <lhost>
          <var vid="2438" vname="stderr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="53" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tfrom>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="format">
       <lval>
        <lhost>
         <var vid="5993" vname="format"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="54" origin="prim-exp" p-complexity="0">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5993" vname="format"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="55" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="56" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="57" origin="prim-exp" p-complexity="1">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="58" origin="prim-exp" p-complexity="0">
     <location byte="191320" file="src/log.c" line="303"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="59" origin="prim-exp" p-complexity="0">
     <location byte="191356" file="src/log.c" line="304"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fputc" id="60" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="2" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fputc" id="61" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="2" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fputc" id="62" name="deref-read" origin="f-pre" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="2" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="fputc" id="63" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="stderr">
         <lval>
          <lhost>
           <var vid="2438" vname="stderr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="lval" name="stream" nr="2" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>stream</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="64" origin="prim-exp" p-complexity="0">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="2438" vname="stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="65" origin="prim-exp" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="66" origin="prim-exp" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="67" origin="prim-exp" p-complexity="1">
     <location byte="191384" file="src/log.c" line="305"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="stderr">
       <lval>
        <lhost>
         <var vid="2438" vname="stderr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="117" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="139"/>
       <node name="if-then"/>
       <node name="stmt" num="138"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="68" origin="prim-exp" p-complexity="0">
     <location byte="191414" file="src/log.c" line="308"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="69" origin="prim-exp" p-complexity="0">
     <location byte="191488" file="src/log.c" line="332"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6002" vname="isopen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="openlog" id="70" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="not-null">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="ident" nr="1" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>ident</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>ident</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="openlog" id="71" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="null-terminated">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="ident" nr="1" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>ident</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>ident</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="openlog" id="72" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="ident" nr="1" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>ident</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>ident</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="openlog" id="73" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;dnsmasq&quot;]">
       <arg etag="const" xstr="&quot;dnsmasq&quot;">
        <constant ctag="cstr" strValue="dnsmasq"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="ident" nr="1" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>ident</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>ident</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="openlog" id="74" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="initialized-range">
      <base-exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;dnsmasq&quot;]">
       <arg etag="const" xstr="&quot;dnsmasq&quot;">
        <constant ctag="cstr" strValue="dnsmasq"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="ident" nr="1" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>ident</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>ident</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="75" origin="prim-exp" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="76" origin="prim-exp" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="77" origin="prim-exp" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;dnsmasq&quot;">
       <constant ctag="cstr" strValue="dnsmasq"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="78" origin="prim-exp" p-complexity="0">
     <location byte="191507" file="src/log.c" line="334"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5900" vname="log_fac"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="142"/>
       <node name="if-then"/>
       <node name="stmt" num="141"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="79" origin="prim-exp" p-complexity="0">
     <location byte="191566" file="src/log.c" line="337"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="80" origin="prim-exp" p-complexity="0">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5992" vname="priority"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="81" origin="prim-exp" p-complexity="0">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5993" vname="format"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="82" origin="prim-exp" p-complexity="1">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="format">
       <lval>
        <lhost>
         <var vid="5993" vname="format"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="83" origin="prim-exp" p-complexity="1">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="format">
       <lval>
        <lhost>
         <var vid="5993" vname="format"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="84" origin="prim-exp" p-complexity="1">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="format">
       <lval>
        <lhost>
         <var vid="5993" vname="format"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="85" origin="prim-exp" p-complexity="0">
     <location byte="191603" file="src/log.c" line="338"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="86" origin="prim-exp" p-complexity="0">
     <location byte="191640" file="src/log.c" line="339"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="143"/>
       <node name="if-then"/>
       <node name="stmt" num="140"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="87" origin="prim-exp" p-complexity="0">
     <location byte="191687" file="src/log.c" line="345"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5911" vname="free_entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="145"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="88" origin="prim-exp" p-complexity="0">
     <location byte="191687" file="src/log.c" line="345"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="89" origin="prim-exp" p-complexity="6">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entry">
         <lval>
          <lhost>
           <var vid="5995" vname="entry"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="90" origin="prim-exp" p-complexity="0">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="91" origin="prim-lval" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="92" origin="prim-lval" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="93" origin="prim-lval" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="94" origin="prim-lval" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="95" origin="prim-exp" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="next"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="96" origin="prim-exp" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="next"/>
        </offset>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="97" origin="prim-exp" p-complexity="1">
     <location byte="191719" file="src/log.c" line="346"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry-&gt;next">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="next"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="147"/>
       <node name="if-then"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="98" origin="prim-exp" p-complexity="0">
     <location byte="191754" file="src/log.c" line="347"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="entries_alloced"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="99" origin="prim-exp" p-complexity="0">
     <location byte="191754" file="src/log.c" line="347"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="100" origin="prim-exp" p-complexity="1">
     <location byte="191754" file="src/log.c" line="347"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="239" ttag="tcomp"/>
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6004" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="149"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="101" origin="prim-exp" p-complexity="0">
     <location byte="191754" file="src/log.c" line="347"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6004" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="149"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="102" origin="prim-exp" p-complexity="0">
     <location byte="191754" file="src/log.c" line="347"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="150"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="103" origin="prim-exp" p-complexity="0">
     <location byte="191836" file="src/log.c" line="348"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="entries_alloced"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="151"/>
       <node name="if-then"/>
       <node name="stmt" num="150"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="104" origin="prim-op" p-complexity="2">
     <location byte="191836" file="src/log.c" line="348"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="entries_alloced">
       <lval>
        <lhost>
         <var vid="5905" vname="entries_alloced"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="151"/>
       <node name="if-then"/>
       <node name="stmt" num="150"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="105" origin="prim-op" p-complexity="2">
     <location byte="191836" file="src/log.c" line="348"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="entries_alloced">
       <lval>
        <lhost>
         <var vid="5905" vname="entries_alloced"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="151"/>
       <node name="if-then"/>
       <node name="stmt" num="150"/>
       <node name="if-then"/>
       <node name="stmt" num="148"/>
       <node name="if-else"/>
       <node name="stmt" num="146"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="106" origin="prim-exp" p-complexity="0">
     <location byte="191858" file="src/log.c" line="350"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="107" origin="prim-exp" p-complexity="0">
     <location byte="191874" file="src/log.c" line="351"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="entries_lost"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="153"/>
       <node name="if-then"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="108" origin="prim-op" p-complexity="2">
     <location byte="191874" file="src/log.c" line="351"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="entries_lost">
       <lval>
        <lhost>
         <var vid="5906" vname="entries_lost"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="153"/>
       <node name="if-then"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="109" origin="prim-op" p-complexity="2">
     <location byte="191874" file="src/log.c" line="351"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="entries_lost">
       <lval>
        <lhost>
         <var vid="5906" vname="entries_lost"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="153"/>
       <node name="if-then"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="110" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="111" origin="prim-lval" p-complexity="1">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="112" origin="prim-lval" p-complexity="1">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="113" origin="prim-lval" p-complexity="1">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="114" origin="prim-lval" p-complexity="1">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="115" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="239" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="116" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="117" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 239*))">
       <typ ttag="tptr">
        <typ ckey="239" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="118" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 239*))">
       <typ ttag="tptr">
        <typ ckey="239" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="119" origin="prim-exp" p-complexity="0">
     <location byte="191910" file="src/log.c" line="355"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 239*))">
       <typ ttag="tptr">
        <typ ckey="239" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="154"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="120" origin="prim-exp" p-complexity="0">
     <location byte="191943" file="src/log.c" line="356"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="121" origin="prim-exp" p-complexity="0">
     <location byte="191958" file="src/log.c" line="357"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="156"/>
       <node name="if-then"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="122" origin="prim-exp" p-complexity="1">
     <location byte="191958" file="src/log.c" line="357"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="156"/>
       <node name="if-then"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="123" origin="prim-exp" p-complexity="1">
     <location byte="191958" file="src/log.c" line="357"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="156"/>
       <node name="if-then"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="124" origin="prim-exp" p-complexity="1">
     <location byte="191958" file="src/log.c" line="357"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="156"/>
       <node name="if-then"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="125" origin="prim-exp" p-complexity="0">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="157"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="126" origin="prim-exp" p-complexity="6">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___1">
         <lval>
          <lhost>
           <var vid="6006" vname="tmp___1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="127" origin="prim-exp" p-complexity="0">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6006" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="128" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="129" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="130" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="131" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="159"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="132" origin="prim-exp" p-complexity="6">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___1">
         <lval>
          <lhost>
           <var vid="6006" vname="tmp___1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="133" origin="prim-exp" p-complexity="0">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6006" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="134" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="135" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="136" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="137" origin="prim-lval" p-complexity="1">
     <location byte="192018" file="src/log.c" line="361"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
       <node name="loop"/>
       <node name="stmt" num="158"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="138" origin="prim-exp" p-complexity="0">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6006" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="139" origin="prim-lval" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="140" origin="prim-lval" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="141" origin="prim-lval" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="142" origin="prim-lval" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6006" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="143" origin="prim-exp" p-complexity="0">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="144" origin="prim-exp" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="145" origin="prim-exp" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="146" origin="prim-exp" p-complexity="1">
     <location byte="192070" file="src/log.c" line="362"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="162"/>
       <node name="if-else"/>
       <node name="stmt" num="155"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="time" id="147" name="deref-write-null" origin="f-pre" p-complexity="0">
     <location byte="192099" file="src/log.c" line="365"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="addrof" name="tloc" nr="1" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-write-null">
      <math>
       <apply>
        <deref-write-null/>
        <ci>tloc</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="time" id="148" name="deref-write-null" origin="f-pre" p-complexity="0">
     <location byte="192099" file="src/log.c" line="365"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="addrof" name="tloc" nr="1" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
     </args>
     <precondition name="deref-write-null">
      <math>
       <apply>
        <deref-write-null/>
        <ci>tloc</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="149" origin="prim-exp" p-complexity="0">
     <location byte="192099" file="src/log.c" line="365"/>
     <predicate tag="valid-mem">
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="150" origin="prim-exp" p-complexity="0">
     <location byte="192099" file="src/log.c" line="365"/>
     <predicate tag="lower-bound">
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="151" origin="prim-exp" p-complexity="0">
     <location byte="192099" file="src/log.c" line="365"/>
     <predicate tag="upper-bound">
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="152" origin="prim-exp" p-complexity="0">
     <location byte="192122" file="src/log.c" line="366"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="153" origin="prim-lval" p-complexity="1">
     <location byte="192122" file="src/log.c" line="366"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="154" origin="prim-lval" p-complexity="1">
     <location byte="192122" file="src/log.c" line="366"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="155" origin="prim-lval" p-complexity="1">
     <location byte="192122" file="src/log.c" line="366"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="156" origin="prim-lval" p-complexity="1">
     <location byte="192122" file="src/log.c" line="366"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="163"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="157" origin="prim-exp" p-complexity="0">
     <location byte="192148" file="src/log.c" line="367"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5904" vname="log_to_file"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="158" name="format" origin="f-pre" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="159" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="160" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="161" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="162" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;&lt;%d&gt;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
         <constant ctag="cstr" strValue="&lt;%d&gt;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="163" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;&lt;%d&gt;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
         <constant ctag="cstr" strValue="&lt;%d&gt;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="164" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="165" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="166" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="167" origin="prim-exp" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="168" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="169" origin="prim-exp" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="170" origin="prim-exp" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="171" origin="prim-exp" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="172" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
       <constant ctag="cstr" strValue="&lt;%d&gt;"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="173" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="174" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="175" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;%d&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;%d&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;%d&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="176" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5992" vname="priority"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="177" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5900" vname="log_fac"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="178" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="179" origin="prim-exp" p-complexity="0">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6008" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="180" origin="prim-op" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="181" origin="prim-op" p-complexity="1">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="182" origin="prim-op" p-complexity="3">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6008" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="183" origin="prim-op" p-complexity="2">
     <location byte="192167" file="src/log.c" line="368"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6008" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="165"/>
       <node name="if-then"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="184" origin="prim-exp" p-complexity="0">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5901" vname="log_stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="185" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="186" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="187" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="188" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="189" name="format" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="190" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="191" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="192" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="193" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.15s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.15s&quot;">
         <constant ctag="cstr" strValue="%.15s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="194" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.15s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.15s&quot;">
         <constant ctag="cstr" strValue="%.15s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="195" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="196" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="197" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="198" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="199" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="200" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="201" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="202" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="203" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%.15s&quot;">
       <constant ctag="cstr" strValue="%.15s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="204" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="205" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="206" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="207" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6010" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="208" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="209" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="210" origin="prim-op" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="211" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="212" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="213" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="214" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="215" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="216" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6012" vname="tmp___4"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="217" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="218" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="219" origin="prim-op" p-complexity="3">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___4">
       <lval>
        <lhost>
         <var vid="6012" vname="tmp___4"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="220" origin="prim-op" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___4">
       <lval>
        <lhost>
         <var vid="6012" vname="tmp___4"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="221" origin="prim-exp" p-complexity="6">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="dnsmasq_daemon">
         <lval>
          <lhost>
           <var vid="4341" vname="dnsmasq_daemon"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="238" fname="options"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="222" origin="prim-exp" p-complexity="0">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="4341" vname="dnsmasq_daemon"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="223" origin="prim-lval" p-complexity="1">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="224" origin="prim-lval" p-complexity="1">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="225" origin="prim-lval" p-complexity="1">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="226" origin="prim-lval" p-complexity="1">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="dnsmasq_daemon">
       <lval>
        <lhost>
         <var vid="4341" vname="dnsmasq_daemon"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="238" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="227" origin="prim-op" p-complexity="0">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="228" origin="prim-op" p-complexity="1">
     <location byte="192220" file="src/log.c" line="371"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="16">
       <constant ctag="cint64" ikind="iint" intValue="16"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="229" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (time_now)">
       <lval>
        <lhost>
         <var vid="5996" vname="time_now"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="230" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="231" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="232" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (time_now):(time_t*))">
       <typ ttag="tptr">
        <typ tname="time_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (time_now)">
        <lval>
         <lhost>
          <var vid="5996" vname="time_now"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ilong" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="233" name="format" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="234" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="235" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="236" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="237" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.15s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.15s&quot;">
         <constant ctag="cstr" strValue="%.15s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="238" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.15s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.15s&quot;">
         <constant ctag="cstr" strValue="%.15s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="239" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="240" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="sprintf" id="241" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="242" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="243" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="244" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="245" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="246" origin="prim-exp" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="247" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%.15s&quot;">
       <constant ctag="cstr" strValue="%.15s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="248" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="249" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="250" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%.15s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.15s&quot;">
        <constant ctag="cstr" strValue="%.15s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="251" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6010" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="252" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="253" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="254" origin="prim-op" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="255" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="6010" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="4">
       <constant ctag="cint64" ikind="iint" intValue="4"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="256" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="257" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="lower-bound">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="258" origin="prim-exp" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="upper-bound">
      <exp binop="pluspi" etag="binop" xstr="((tmp___3 +i 4):(char*)">
       <exp1 etag="lval" xstr="tmp___3">
        <lval>
         <lhost>
          <var vid="6010" vname="tmp___3"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="4">
        <constant ctag="cint64" ikind="iint" intValue="4"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="259" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="260" origin="prim-exp" p-complexity="0">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6012" vname="tmp___4"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="261" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="262" origin="prim-op" p-complexity="1">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="263" origin="prim-op" p-complexity="3">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___4">
       <lval>
        <lhost>
         <var vid="6012" vname="tmp___4"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="264" origin="prim-op" p-complexity="2">
     <location byte="192346" file="src/log.c" line="372"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___4">
       <lval>
        <lhost>
         <var vid="6012" vname="tmp___4"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="169"/>
       <node name="if-then"/>
       <node name="stmt" num="168"/>
       <node name="if-else"/>
       <node name="stmt" num="166"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="265" name="format" origin="f-pre" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="266" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="267" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="268" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="269" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;dnsmasq%s[%d]:&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
         <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="270" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;dnsmasq%s[%d]:&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
         <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="271" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="272" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="273" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="274" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="275" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="276" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="277" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="278" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="279" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
       <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="280" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="281" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="282" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;dnsmasq%s[%d]:&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;dnsmasq%s[%d]:&quot;">
        <constant ctag="cstr" strValue="dnsmasq%s[%d]:"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="283" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6001" vname="func"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="284" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="285" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="286" origin="prim-exp" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="func">
       <lval>
        <lhost>
         <var vid="6001" vname="func"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="287" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5999" vname="pid"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="288" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="289" origin="prim-exp" p-complexity="0">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6014" vname="tmp___5"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="290" origin="prim-op" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="291" origin="prim-op" p-complexity="1">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="292" origin="prim-op" p-complexity="3">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___5">
       <lval>
        <lhost>
         <var vid="6014" vname="tmp___5"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="293" origin="prim-op" p-complexity="2">
     <location byte="192402" file="src/log.c" line="374"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___5">
       <lval>
        <lhost>
         <var vid="6014" vname="tmp___5"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="294" origin="prim-exp" p-complexity="8">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate from="ilong" tag="signed-to-unsigned-cast" to="iulong">
      <exp binop="minuspp" etag="binop" xstr="((p -p startof (entry-&gt;payload)):long">
       <exp1 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="startof" xstr="startof (entry-&gt;payload)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entry">
           <lval>
            <lhost>
             <var vid="5995" vname="entry"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="payload"/>
         </offset>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="295" origin="prim-exp" p-complexity="0">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="296" origin="prim-exp" p-complexity="0">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="297" origin="prim-lval" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="298" origin="prim-lval" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="299" origin="prim-lval" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="300" origin="prim-lval" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="301" origin="prim-op" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="302" origin="prim-op" p-complexity="6">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="not-null">
      <exp etag="startof" xstr="startof (entry-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="303" origin="prim-op" p-complexity="1">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="304" origin="prim-op" p-complexity="6">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="valid-mem">
      <exp etag="startof" xstr="startof (entry-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="305" origin="prim-op" p-complexity="7">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="startof" xstr="startof (entry-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="306" origin="prim-op" p-complexity="7">
     <location byte="192461" file="src/log.c" line="376"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="startof" xstr="startof (entry-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entry">
          <lval>
           <lhost>
            <var vid="5995" vname="entry"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="307" origin="prim-exp" p-complexity="0">
     <location byte="192493" file="src/log.c" line="377"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="308" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="5997" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="309" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5997" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="310" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="311" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="312" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="5997" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="313" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5998" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="314" origin="prim-op" p-complexity="2">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="minusa" size="iulong" tag="int-underflow">
      <exp1 etag="const" xstr="1024">
       <constant ctag="cint64" ikind="iulong" intValue="1024"/>
      </exp1>
      <exp2 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="5998" vname="len"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="315" origin="prim-op" p-complexity="2">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="minusa" size="iulong" tag="int-overflow">
      <exp1 etag="const" xstr="1024">
       <constant ctag="cint64" ikind="iulong" intValue="1024"/>
      </exp1>
      <exp2 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="5998" vname="len"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="316" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tfrom>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="format">
       <lval>
        <lhost>
         <var vid="5993" vname="format"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="317" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5993" vname="format"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="318" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="319" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="320" origin="prim-exp" p-complexity="1">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (format:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="format">
        <lval>
         <lhost>
          <var vid="5993" vname="format"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="321" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="4"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="322" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5998" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="323" origin="prim-exp" p-complexity="2">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp binop="plusa" etag="binop" xstr="((tmp___6 + 1):int">
       <exp1 etag="lval" xstr="tmp___6">
        <lval>
         <lhost>
          <var vid="6016" vname="tmp___6"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="324" origin="prim-exp" p-complexity="0">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6016" vname="tmp___6"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="325" origin="prim-op" p-complexity="2">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="6016" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="326" origin="prim-op" p-complexity="2">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="6016" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="327" origin="prim-op" p-complexity="4">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="5998" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (((tmp___6 + 1):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="plusa" etag="binop" xstr="((tmp___6 + 1):int">
        <exp1 etag="lval" xstr="tmp___6">
         <lval>
          <lhost>
           <var vid="6016" vname="tmp___6"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="328" origin="prim-op" p-complexity="4">
     <location byte="192530" file="src/log.c" line="378"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="5998" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (((tmp___6 + 1):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="plusa" etag="binop" xstr="((tmp___6 + 1):int">
        <exp1 etag="lval" xstr="tmp___6">
         <lval>
          <lhost>
           <var vid="6016" vname="tmp___6"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="5"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="329" origin="prim-exp" p-complexity="0">
     <location byte="192585" file="src/log.c" line="379"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5994" vname="ap"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="6"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="330" origin="prim-exp" p-complexity="0">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5998" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="331" origin="prim-exp" p-complexity="0">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="172"/>
       <node name="if-then"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="332" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="172"/>
       <node name="if-then"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="333" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="172"/>
       <node name="if-then"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="334" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="172"/>
       <node name="if-then"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="335" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="172"/>
       <node name="if-then"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="336" origin="prim-exp" p-complexity="0">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="337" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="338" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="339" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="340" origin="prim-lval" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="341" origin="prim-exp" p-complexity="1">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="5998" vname="len"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="342" origin="prim-exp" p-complexity="0">
     <location byte="192613" file="src/log.c" line="380"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5998" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="173"/>
       <node name="if-else"/>
       <node name="stmt" num="171"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="343" origin="prim-exp" p-complexity="0">
     <location byte="192660" file="src/log.c" line="381"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="344" origin="prim-lval" p-complexity="1">
     <location byte="192660" file="src/log.c" line="381"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="345" origin="prim-lval" p-complexity="1">
     <location byte="192660" file="src/log.c" line="381"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="346" origin="prim-lval" p-complexity="1">
     <location byte="192660" file="src/log.c" line="381"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="347" origin="prim-lval" p-complexity="1">
     <location byte="192660" file="src/log.c" line="381"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="348" origin="prim-exp" p-complexity="0">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="349" origin="prim-lval" p-complexity="1">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="350" origin="prim-lval" p-complexity="1">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="351" origin="prim-lval" p-complexity="1">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="352" origin="prim-lval" p-complexity="1">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="353" origin="prim-exp" p-complexity="0">
     <location byte="192685" file="src/log.c" line="382"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5999" vname="pid"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="174"/>
       <node name="if-else"/>
       <node name="stmt" num="152"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="354" origin="prim-exp" p-complexity="0">
     <location byte="192743" file="src/log.c" line="400"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="355" origin="prim-exp" p-complexity="0">
     <location byte="192743" file="src/log.c" line="400"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="356" origin="prim-exp" p-complexity="0">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="357" origin="prim-exp" p-complexity="0">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="180"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="358" origin="prim-exp" p-complexity="6">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entry">
         <lval>
          <lhost>
           <var vid="5995" vname="entry"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="next"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="359" origin="prim-exp" p-complexity="0">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5995" vname="entry"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="360" origin="prim-lval" p-complexity="1">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="361" origin="prim-lval" p-complexity="1">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="362" origin="prim-lval" p-complexity="1">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="363" origin="prim-lval" p-complexity="1">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entry">
       <lval>
        <lhost>
         <var vid="5995" vname="entry"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="364" origin="prim-exp" p-complexity="0">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6017" vname="d"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="365" origin="prim-op" p-complexity="2">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="366" origin="prim-op" p-complexity="2">
     <location byte="192799" file="src/log.c" line="404"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="182"/>
       <node name="loop"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="367" origin="prim-exp" p-complexity="0">
     <location byte="192868" file="src/log.c" line="406"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6017" vname="d"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="368" origin="prim-exp" p-complexity="0">
     <location byte="192868" file="src/log.c" line="406"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="369" origin="prim-exp" p-complexity="0">
     <location byte="192906" file="src/log.c" line="408"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="370" origin="prim-exp" p-complexity="0">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6017" vname="d"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="371" origin="prim-exp" p-complexity="0">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="372" origin="prim-op" p-complexity="2">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="max_logs">
       <lval>
        <lhost>
         <var vid="5908" vname="max_logs"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="373" origin="prim-op" p-complexity="2">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="max_logs">
       <lval>
        <lhost>
         <var vid="5908" vname="max_logs"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="8">
       <constant ctag="cint64" ikind="iint" intValue="8"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="374" origin="prim-op" p-complexity="4">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((max_logs - 8):int">
       <exp1 etag="lval" xstr="max_logs">
        <lval>
         <lhost>
          <var vid="5908" vname="max_logs"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="8">
        <constant ctag="cint64" ikind="iint" intValue="8"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="375" origin="prim-op" p-complexity="4">
     <location byte="192925" file="src/log.c" line="409"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="minusa" etag="binop" xstr="((max_logs - 8):int">
       <exp1 etag="lval" xstr="max_logs">
        <lval>
         <lhost>
          <var vid="5908" vname="max_logs"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="8">
        <constant ctag="cint64" ikind="iint" intValue="8"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-else"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="376" origin="prim-exp" p-complexity="0">
     <location byte="192951" file="src/log.c" line="411"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6017" vname="d"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="377" origin="prim-exp" p-complexity="0">
     <location byte="192995" file="src/log.c" line="414"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="378" origin="prim-exp" p-complexity="5">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp binop="shiftlt" etag="binop" xstr="((1000000 &lt;&lt; ((d - 1):int):int">
       <exp1 etag="const" xstr="1000000">
        <constant ctag="cint64" ikind="iint" intValue="1000000"/>
       </exp1>
       <exp2 binop="minusa" etag="binop" xstr="((d - 1):int">
        <exp1 etag="lval" xstr="d">
         <lval>
          <lhost>
           <var vid="6017" vname="d"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="379" origin="prim-exp" p-complexity="0">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6017" vname="d"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="380" origin="prim-op" p-complexity="2">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="381" origin="prim-op" p-complexity="2">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="d">
       <lval>
        <lhost>
         <var vid="6017" vname="d"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="382" origin="prim-op" p-complexity="2">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate tag="non-negative">
      <exp binop="minusa" etag="binop" xstr="((d - 1):int">
       <exp1 etag="lval" xstr="d">
        <lval>
         <lhost>
          <var vid="6017" vname="d"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="383" origin="prim-op" p-complexity="3">
     <location byte="193017" file="src/log.c" line="415"/>
     <predicate size="iint" tag="width-overflow">
      <exp binop="minusa" etag="binop" xstr="((d - 1):int">
       <exp1 etag="lval" xstr="d">
        <lval>
         <lhost>
          <var vid="6017" vname="d"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="384" name="deref-write-null" origin="f-pre" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rmtp" nr="2" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="deref-write-null">
      <math>
       <apply>
        <deref-write-null/>
        <ci>rmtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="385" name="deref-write-null" origin="f-pre" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rmtp" nr="2" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="deref-write-null">
      <math>
       <apply>
        <deref-write-null/>
        <ci>rmtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="386" name="deref-read" origin="f-pre" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rqtp" nr="1" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>rqtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="387" name="deref-read" origin="f-pre" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rqtp" nr="1" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>rqtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="388" name="deref-read" origin="f-pre" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rqtp" nr="1" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>rqtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" fname="nanosleep" id="389" name="deref-read" origin="f-pre" p-complexity="5">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
         <typ ttag="tptr">
          <typ ckey="3" ttag="tcomp">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="addrof" xstr="addrof (waiter)">
          <lval>
           <lhost>
            <var vid="6018" vname="waiter"/>
           </lhost>
          </lval>
         </exp>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="rqtp" nr="1" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>rqtp</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="390" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="3" ttag="tcomp"/>
      <tto ckey="3" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (waiter)">
       <lval>
        <lhost>
         <var vid="6018" vname="waiter"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="391" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="392" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="393" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (waiter):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (waiter)">
        <lval>
         <lhost>
          <var vid="6018" vname="waiter"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="394" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ckey="3" ttag="tcomp"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="395" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="396" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="397" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="398" origin="prim-exp" p-complexity="0">
     <location byte="193057" file="src/log.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(struct 3*))">
       <typ ttag="tptr">
        <typ ckey="3" ttag="tcomp"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ckey="3" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="188"/>
       <node name="if-then"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:38">
   <application file="src/log.xml" name="application"/>
  </header>
 </c-analysis>
