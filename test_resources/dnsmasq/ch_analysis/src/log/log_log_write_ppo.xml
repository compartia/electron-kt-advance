<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="log_write">
   <statistics avg-context-complexity="8.04" avg-predicate-complexity="1.58" context-complexity="2186" predicate-complexity="431" size="272"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="5" id="1" origin="prim-exp" p-complexity="0">
     <location byte="188794" file="src/log.c" line="155"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="41"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="2" origin="prim-exp" p-complexity="0">
     <location byte="188855" file="src/log.c" line="165"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5904" vname="log_to_file"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="3" origin="prim-exp" p-complexity="0">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="4" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="5" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="6" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="7" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="8" origin="prim-offset" p-complexity="4">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="index-lower-bound">
      <exp binop="minusa" etag="binop" xstr="((((entries-&gt;offset + entries-&gt;length):int - 1):int">
       <exp1 binop="plusa" etag="binop" xstr="((entries-&gt;offset + entries-&gt;length):int">
        <exp1 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="9" origin="prim-offset" p-complexity="4">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="index-upper-bound">
      <exp binop="minusa" etag="binop" xstr="((((entries-&gt;offset + entries-&gt;length):int - 1):int">
       <exp1 binop="plusa" etag="binop" xstr="((entries-&gt;offset + entries-&gt;length):int">
        <exp1 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
      <len-exp etag="const" xstr="1024">
       <constant ctag="cint64" ikind="iint" intValue="1024"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="10" origin="prim-exp" p-complexity="6">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="offset"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="11" origin="prim-exp" p-complexity="0">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="12" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="13" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="14" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="15" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="16" origin="prim-exp" p-complexity="6">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="length"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="17" origin="prim-exp" p-complexity="0">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="18" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="19" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="20" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="21" origin="prim-lval" p-complexity="1">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="22" origin="prim-op" p-complexity="3">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="entries-&gt;offset">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="offset"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="entries-&gt;length">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="length"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="23" origin="prim-op" p-complexity="3">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="entries-&gt;offset">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="offset"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="entries-&gt;length">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="length"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="24" origin="prim-op" p-complexity="4">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((entries-&gt;offset + entries-&gt;length):int">
       <exp1 etag="lval" xstr="entries-&gt;offset">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="offset"/>
         </offset>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="entries-&gt;length">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="length"/>
         </offset>
        </lval>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="25" origin="prim-op" p-complexity="4">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((entries-&gt;offset + entries-&gt;length):int">
       <exp1 etag="lval" xstr="entries-&gt;offset">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="offset"/>
         </offset>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="entries-&gt;length">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="length"/>
         </offset>
        </lval>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="index"/>
       <node name="field-offset" str="payload"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="26" origin="prim-exp" p-complexity="0">
     <location byte="188873" file="src/log.c" line="166"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="\n">
       <constant charValue="10" ctag="cchr"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="45"/>
       <node name="if-then"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="27" origin="prim-exp" p-complexity="0">
     <location byte="188948" file="src/log.c" line="167"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="connection_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="46"/>
       <node name="if-else"/>
       <node name="stmt" num="44"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="28" origin="prim-exp" p-complexity="6">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="pid"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="29" origin="prim-exp" p-complexity="0">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="30" origin="prim-lval" p-complexity="1">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="31" origin="prim-lval" p-complexity="1">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="32" origin="prim-lval" p-complexity="1">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="33" origin="prim-lval" p-complexity="1">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="34" origin="prim-exp" p-complexity="0">
     <location byte="189008" file="src/log.c" line="171"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5942" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="49"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="write" id="35" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="nbyte" nr="3" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp>
      <exp etag="caste" name="buf" nr="2" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>buf</ci>
        <apply>
         <index-size/>
         <ci>nbyte</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="write" id="36" name="buffersize" origin="f-pre" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="nbyte" nr="3" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp>
      <exp etag="caste" name="buf" nr="2" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>buf</ci>
        <apply>
         <index-size/>
         <ci>nbyte</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="write" id="37" name="buffersize" origin="f-pre" p-complexity="12">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="nbyte" nr="3" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp>
      <exp etag="caste" name="buf" nr="2" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>buf</ci>
        <apply>
         <index-size/>
         <ci>nbyte</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="write" id="38" name="buffersize" origin="f-pre" p-complexity="11">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="nbyte" nr="3" xstr="caste (((entries-&gt;length - len_adjust):int:size_t)">
       <typ tname="size_t" ttag="tnamed"/>
       <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
        <exp1 etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="len_adjust">
         <lval>
          <lhost>
           <var vid="5941" vname="len_adjust"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp>
      </exp>
      <exp etag="caste" name="buf" nr="2" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>buf</ci>
        <apply>
         <index-size/>
         <ci>nbyte</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="39" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="40" origin="prim-exp" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
       <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="payload"/>
         </offset>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="entries-&gt;offset">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="offset"/>
         </offset>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="41" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="42" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="43" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="44" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="45" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="startof"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="46" origin="prim-exp" p-complexity="6">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="offset"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="47" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="48" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="49" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="50" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="51" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="52" origin="prim-op" p-complexity="6">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="not-null">
      <exp etag="startof" xstr="startof (entries-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="53" origin="prim-op" p-complexity="6">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="valid-mem">
      <exp etag="startof" xstr="startof (entries-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="54" origin="prim-op" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="entries-&gt;offset">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="offset"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="55" origin="prim-op" p-complexity="7">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="payload"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="entries-&gt;offset">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="offset"/>
        </offset>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="56" origin="prim-exp" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="57" origin="prim-exp" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="58" origin="prim-exp" p-complexity="8">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((startof (entries-&gt;payload) +i entries-&gt;offset):(char*):(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="pluspi" etag="binop" xstr="((startof (entries-&gt;payload) +i entries-&gt;offset):(char*)">
        <exp1 etag="startof" xstr="startof (entries-&gt;payload)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="payload"/>
          </offset>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="59" origin="prim-exp" p-complexity="3">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp binop="minusa" etag="binop" xstr="((entries-&gt;length - len_adjust):int">
       <exp1 etag="lval" xstr="entries-&gt;length">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="length"/>
         </offset>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="len_adjust">
        <lval>
         <lhost>
          <var vid="5941" vname="len_adjust"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="60" origin="prim-exp" p-complexity="6">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="length"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="61" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="62" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="63" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="64" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="65" origin="prim-lval" p-complexity="1">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="66" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5941" vname="len_adjust"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="67" origin="prim-op" p-complexity="3">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="entries-&gt;length">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="length"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="len_adjust">
       <lval>
        <lhost>
         <var vid="5941" vname="len_adjust"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="68" origin="prim-op" p-complexity="3">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="entries-&gt;length">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="length"/>
        </offset>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="len_adjust">
       <lval>
        <lhost>
         <var vid="5941" vname="len_adjust"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="52"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="69" origin="prim-exp" p-complexity="0">
     <location byte="189109" file="src/log.c" line="179"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5940" vname="rc"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="70" origin="prim-exp" p-complexity="0">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="71" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="72" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="73" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="74" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="75" origin="prim-exp" p-complexity="3">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="minusa" etag="binop" xstr="((caste (entries-&gt;length:ssize_t) - rc):ssize_t">
       <exp1 etag="caste" xstr="caste (entries-&gt;length:ssize_t)">
        <typ tname="ssize_t" ttag="tnamed"/>
        <exp etag="lval" xstr="entries-&gt;length">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="length"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="rc">
        <lval>
         <lhost>
          <var vid="5940" vname="rc"/>
         </lhost>
        </lval>
       </exp2>
       <typ tname="ssize_t" ttag="tnamed"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="76" origin="prim-exp" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="lval" xstr="entries-&gt;length">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="length"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="77" origin="prim-exp" p-complexity="6">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="length"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="78" origin="prim-exp" p-complexity="0">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="79" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="80" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="81" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="82" origin="prim-lval" p-complexity="1">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="83" origin="prim-exp" p-complexity="0">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5940" vname="rc"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="84" origin="prim-op" p-complexity="3">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate op="minusa" size="ilong" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (entries-&gt;length:ssize_t)">
       <typ tname="ssize_t" ttag="tnamed"/>
       <exp etag="lval" xstr="entries-&gt;length">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="length"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="rc">
       <lval>
        <lhost>
         <var vid="5940" vname="rc"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="85" origin="prim-op" p-complexity="3">
     <location byte="189213" file="src/log.c" line="181"/>
     <predicate op="minusa" size="ilong" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (entries-&gt;length:ssize_t)">
       <typ tname="ssize_t" ttag="tnamed"/>
       <exp etag="lval" xstr="entries-&gt;length">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="length"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="rc">
       <lval>
        <lhost>
         <var vid="5940" vname="rc"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="86" origin="prim-exp" p-complexity="0">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="87" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="88" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="89" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="90" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="91" origin="prim-exp" p-complexity="3">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="plusa" etag="binop" xstr="((caste (entries-&gt;offset:ssize_t) + rc):ssize_t">
       <exp1 etag="caste" xstr="caste (entries-&gt;offset:ssize_t)">
        <typ tname="ssize_t" ttag="tnamed"/>
        <exp etag="lval" xstr="entries-&gt;offset">
         <lval>
          <lhost>
           <mem etag="lval" xstr="entries">
            <lval>
             <lhost>
              <var vid="5910" vname="entries"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <field ckey="239" fname="offset"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="lval" xstr="rc">
        <lval>
         <lhost>
          <var vid="5940" vname="rc"/>
         </lhost>
        </lval>
       </exp2>
       <typ tname="ssize_t" ttag="tnamed"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="92" origin="prim-exp" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="ilong" ttag="tint"/>
      <exp etag="lval" xstr="entries-&gt;offset">
       <lval>
        <lhost>
         <mem etag="lval" xstr="entries">
          <lval>
           <lhost>
            <var vid="5910" vname="entries"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <field ckey="239" fname="offset"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="93" origin="prim-exp" p-complexity="6">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="offset"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="94" origin="prim-exp" p-complexity="0">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="95" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="96" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="97" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="98" origin="prim-lval" p-complexity="1">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="99" origin="prim-exp" p-complexity="0">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5940" vname="rc"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="100" origin="prim-op" p-complexity="3">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate op="plusa" size="ilong" tag="int-underflow">
      <exp1 etag="caste" xstr="caste (entries-&gt;offset:ssize_t)">
       <typ tname="ssize_t" ttag="tnamed"/>
       <exp etag="lval" xstr="entries-&gt;offset">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="offset"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="rc">
       <lval>
        <lhost>
         <var vid="5940" vname="rc"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="101" origin="prim-op" p-complexity="3">
     <location byte="189239" file="src/log.c" line="182"/>
     <predicate op="plusa" size="ilong" tag="int-overflow">
      <exp1 etag="caste" xstr="caste (entries-&gt;offset:ssize_t)">
       <typ tname="ssize_t" ttag="tnamed"/>
       <exp etag="lval" xstr="entries-&gt;offset">
        <lval>
         <lhost>
          <mem etag="lval" xstr="entries">
           <lval>
            <lhost>
             <var vid="5910" vname="entries"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <field ckey="239" fname="offset"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="rc">
       <lval>
        <lhost>
         <var vid="5940" vname="rc"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="54"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="102" origin="prim-exp" p-complexity="6">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="entries">
         <lval>
          <lhost>
           <var vid="5910" vname="entries"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <field ckey="239" fname="length"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="103" origin="prim-exp" p-complexity="0">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="entries"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="104" origin="prim-lval" p-complexity="1">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="105" origin="prim-lval" p-complexity="1">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="106" origin="prim-lval" p-complexity="1">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="107" origin="prim-lval" p-complexity="1">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="entries">
       <lval>
        <lhost>
         <var vid="5910" vname="entries"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="239" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="108" origin="prim-exp" p-complexity="0">
     <location byte="189265" file="src/log.c" line="183"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5941" vname="len_adjust"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="109" origin="prim-exp" p-complexity="0">
     <location byte="189335" file="src/log.c" line="186"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="entries_lost"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="110" origin="prim-exp" p-complexity="0">
     <location byte="189366" file="src/log.c" line="188"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="entries_lost"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="58"/>
       <node name="if-then"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="111" origin="prim-exp" p-complexity="0">
     <location byte="189414" file="src/log.c" line="190"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;overflow: %d log entries lost&quot;">
       <constant ctag="cstr" strValue="overflow: %d log entries lost"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="58"/>
       <node name="if-then"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="112" origin="prim-exp" p-complexity="0">
     <location byte="189414" file="src/log.c" line="190"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;overflow: %d log entries lost&quot;">
       <constant ctag="cstr" strValue="overflow: %d log entries lost"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="58"/>
       <node name="if-then"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="113" origin="prim-exp" p-complexity="0">
     <location byte="189414" file="src/log.c" line="190"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;overflow: %d log entries lost&quot;">
       <constant ctag="cstr" strValue="overflow: %d log entries lost"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="58"/>
       <node name="if-then"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="114" origin="prim-exp" p-complexity="0">
     <location byte="189414" file="src/log.c" line="190"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5943" vname="e"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="58"/>
       <node name="if-then"/>
       <node name="stmt" num="57"/>
       <node name="if-then"/>
       <node name="stmt" num="55"/>
       <node name="if-then"/>
       <node name="stmt" num="53"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="115" origin="prim-exp" p-complexity="6">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___0">
         <lval>
          <lhost>
           <var vid="5945" vname="tmp___0"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="116" origin="prim-exp" p-complexity="0">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5945" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="117" origin="prim-lval" p-complexity="1">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="5945" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="118" origin="prim-lval" p-complexity="1">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="5945" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="119" origin="prim-lval" p-complexity="1">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="5945" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="120" origin="prim-lval" p-complexity="1">
     <location byte="189500" file="src/log.c" line="196"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="5945" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="61"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="121" origin="prim-exp" p-complexity="6">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___1">
         <lval>
          <lhost>
           <var vid="5947" vname="tmp___1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="122" origin="prim-exp" p-complexity="0">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5947" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="123" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="5947" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="124" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="5947" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="125" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="5947" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="126" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="5947" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="127" origin="prim-exp" p-complexity="6">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___2">
         <lval>
          <lhost>
           <var vid="5949" vname="tmp___2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="128" origin="prim-exp" p-complexity="0">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5949" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="129" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="5949" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="130" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="5949" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="131" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="5949" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="132" origin="prim-lval" p-complexity="1">
     <location byte="189551" file="src/log.c" line="199"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="5949" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="67"/>
       <node name="if-else"/>
       <node name="stmt" num="64"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="133" origin="prim-exp" p-complexity="6">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___3">
         <lval>
          <lhost>
           <var vid="5951" vname="tmp___3"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="134" origin="prim-exp" p-complexity="0">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5951" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="135" origin="prim-lval" p-complexity="1">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="5951" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="136" origin="prim-lval" p-complexity="1">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="5951" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="137" origin="prim-lval" p-complexity="1">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="5951" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="138" origin="prim-lval" p-complexity="1">
     <location byte="189633" file="src/log.c" line="202"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___3">
       <lval>
        <lhost>
         <var vid="5951" vname="tmp___3"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="70"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="139" origin="prim-exp" p-complexity="0">
     <location byte="189717" file="src/log.c" line="209"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5904" vname="log_to_file"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="140" origin="prim-exp" p-complexity="6">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___19">
         <lval>
          <lhost>
           <var vid="5984" vname="tmp___19"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="141" origin="prim-exp" p-complexity="0">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5984" vname="tmp___19"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="142" origin="prim-lval" p-complexity="1">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___19">
       <lval>
        <lhost>
         <var vid="5984" vname="tmp___19"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="143" origin="prim-lval" p-complexity="1">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___19">
       <lval>
        <lhost>
         <var vid="5984" vname="tmp___19"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="144" origin="prim-lval" p-complexity="1">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___19">
       <lval>
        <lhost>
         <var vid="5984" vname="tmp___19"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="145" origin="prim-lval" p-complexity="1">
     <location byte="189743" file="src/log.c" line="213"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___19">
       <lval>
        <lhost>
         <var vid="5984" vname="tmp___19"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="146" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="76"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="147" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="76"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="148" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="76"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="149" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="76"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="150" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="76"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="151" origin="prim-exp" p-complexity="0">
     <location byte="189791" file="src/log.c" line="215"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5953" vname="tmp___4"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="77"/>
       <node name="if-then"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="152" origin="prim-exp" p-complexity="6">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___15">
         <lval>
          <lhost>
           <var vid="5976" vname="tmp___15"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="153" origin="prim-exp" p-complexity="0">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5976" vname="tmp___15"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="154" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___15">
       <lval>
        <lhost>
         <var vid="5976" vname="tmp___15"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="155" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___15">
       <lval>
        <lhost>
         <var vid="5976" vname="tmp___15"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="156" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___15">
       <lval>
        <lhost>
         <var vid="5976" vname="tmp___15"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="157" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___15">
       <lval>
        <lhost>
         <var vid="5976" vname="tmp___15"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="158" origin="prim-exp" p-complexity="6">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___16">
         <lval>
          <lhost>
           <var vid="5978" vname="tmp___16"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="159" origin="prim-exp" p-complexity="0">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5978" vname="tmp___16"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="160" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___16">
       <lval>
        <lhost>
         <var vid="5978" vname="tmp___16"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="161" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___16">
       <lval>
        <lhost>
         <var vid="5978" vname="tmp___16"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="162" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___16">
       <lval>
        <lhost>
         <var vid="5978" vname="tmp___16"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="163" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___16">
       <lval>
        <lhost>
         <var vid="5978" vname="tmp___16"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="164" origin="prim-exp" p-complexity="6">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___17">
         <lval>
          <lhost>
           <var vid="5980" vname="tmp___17"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="165" origin="prim-exp" p-complexity="0">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5980" vname="tmp___17"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="166" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___17">
       <lval>
        <lhost>
         <var vid="5980" vname="tmp___17"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="167" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___17">
       <lval>
        <lhost>
         <var vid="5980" vname="tmp___17"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="168" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___17">
       <lval>
        <lhost>
         <var vid="5980" vname="tmp___17"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="169" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___17">
       <lval>
        <lhost>
         <var vid="5980" vname="tmp___17"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="170" origin="prim-exp" p-complexity="6">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___18">
         <lval>
          <lhost>
           <var vid="5982" vname="tmp___18"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="171" origin="prim-exp" p-complexity="0">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5982" vname="tmp___18"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="172" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___18">
       <lval>
        <lhost>
         <var vid="5982" vname="tmp___18"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="173" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___18">
       <lval>
        <lhost>
         <var vid="5982" vname="tmp___18"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="174" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___18">
       <lval>
        <lhost>
         <var vid="5982" vname="tmp___18"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="175" origin="prim-lval" p-complexity="1">
     <location byte="189847" file="src/log.c" line="218"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___18">
       <lval>
        <lhost>
         <var vid="5982" vname="tmp___18"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="176" origin="prim-exp" p-complexity="0">
     <location byte="190054" file="src/log.c" line="234"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iushort">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="177" name="no-overlap" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="178" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="179" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="180" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="sizeofe" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="181" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="182" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="183" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp1>
      <exp2 etag="sizeofe" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="strncpy" id="184" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </base-exp>
      <len-exp etag="sizeofe" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="sizeofe" name="n" nr="3" xstr="sizeof(logaddr.sun_path)">
       <exp etag="lval" xstr="logaddr.sun_path">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <ci>n</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="185" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="startof" xstr="startof (logaddr.sun_path)">
       <lval>
        <lhost>
         <var vid="5954" vname="logaddr"/>
        </lhost>
        <offset>
         <field ckey="39" fname="sun_path"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="186" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="187" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="188" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (logaddr.sun_path):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="startof" xstr="startof (logaddr.sun_path)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
         <offset>
          <field ckey="39" fname="sun_path"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="189" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;/dev/log&quot;">
       <constant ctag="cstr" strValue="/dev/log"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="190" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="191" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="192" origin="prim-exp" p-complexity="0">
     <location byte="190085" file="src/log.c" line="235"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;/dev/log&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;/dev/log&quot;">
        <constant ctag="cstr" strValue="/dev/log"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="connect" id="193" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="address_len" nr="3" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="address" nr="2" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>address</ci>
        <apply>
         <byte-size/>
         <ci>address_len</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="connect" id="194" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <typ ckey="20" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="address_len" nr="3" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="address" nr="2" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>address</ci>
        <apply>
         <byte-size/>
         <ci>address_len</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="connect" id="195" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ckey="20" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="address_len" nr="3" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="address" nr="2" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>address</ci>
        <apply>
         <byte-size/>
         <ci>address_len</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" fname="connect" id="196" name="buffersize" origin="f-pre" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </base-exp>
      <len-exp etag="caste" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="address_len" nr="3" xstr="caste (sizeof(logaddr):socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="sizeofe" xstr="sizeof(logaddr)">
        <exp etag="lval" xstr="logaddr">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="address" nr="2" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-read/>
        <ci>address</ci>
        <apply>
         <byte-size/>
         <ci>address_len</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="197" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="198" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="20" ttag="tcomp"/>
      <tto ckey="20" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
       <typ ttag="tptr">
        <typ ckey="20" ttag="tcomp"/>
       </typ>
       <exp etag="addrof" xstr="addrof (logaddr)">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="199" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="39" ttag="tcomp"/>
      <tto ckey="20" ttag="tcomp"/>
      <exp etag="addrof" xstr="addrof (logaddr)">
       <lval>
        <lhost>
         <var vid="5954" vname="logaddr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="200" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="201" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <typ ckey="20" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="202" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (addrof (logaddr):(struct 20*)):(struct 20*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ckey="20" ttag="tcomp">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (addrof (logaddr):(struct 20*))">
        <typ ttag="tptr">
         <typ ckey="20" ttag="tcomp"/>
        </typ>
        <exp etag="addrof" xstr="addrof (logaddr)">
         <lval>
          <lhost>
           <var vid="5954" vname="logaddr"/>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp>
      <typ ckey="20" ttag="tcomp">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="203" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="cast">
      <tfrom ikind="iulong" ttag="tint"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="sizeofe" xstr="sizeof(logaddr)">
       <exp etag="lval" xstr="logaddr">
        <lval>
         <lhost>
          <var vid="5954" vname="logaddr"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="90"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="204" origin="prim-exp" p-complexity="0">
     <location byte="190159" file="src/log.c" line="238"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5956" vname="tmp___5"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="91"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="205" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___6">
         <lval>
          <lhost>
           <var vid="5958" vname="tmp___6"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="206" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5958" vname="tmp___6"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="207" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="5958" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="208" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="5958" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="209" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="5958" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="210" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___6">
       <lval>
        <lhost>
         <var vid="5958" vname="tmp___6"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="211" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___7">
         <lval>
          <lhost>
           <var vid="5960" vname="tmp___7"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="212" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5960" vname="tmp___7"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="213" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="5960" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="214" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="5960" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="215" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="5960" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="216" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___7">
       <lval>
        <lhost>
         <var vid="5960" vname="tmp___7"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="217" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___8">
         <lval>
          <lhost>
           <var vid="5962" vname="tmp___8"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="218" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5962" vname="tmp___8"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="219" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___8">
       <lval>
        <lhost>
         <var vid="5962" vname="tmp___8"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="220" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___8">
       <lval>
        <lhost>
         <var vid="5962" vname="tmp___8"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="221" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___8">
       <lval>
        <lhost>
         <var vid="5962" vname="tmp___8"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="222" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___8">
       <lval>
        <lhost>
         <var vid="5962" vname="tmp___8"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="223" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___9">
         <lval>
          <lhost>
           <var vid="5964" vname="tmp___9"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="224" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5964" vname="tmp___9"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="225" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="5964" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="226" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="5964" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="227" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="5964" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="228" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___9">
       <lval>
        <lhost>
         <var vid="5964" vname="tmp___9"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="229" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___10">
         <lval>
          <lhost>
           <var vid="5966" vname="tmp___10"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="230" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5966" vname="tmp___10"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="231" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___10">
       <lval>
        <lhost>
         <var vid="5966" vname="tmp___10"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="232" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___10">
       <lval>
        <lhost>
         <var vid="5966" vname="tmp___10"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="233" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___10">
       <lval>
        <lhost>
         <var vid="5966" vname="tmp___10"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="15" id="234" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___10">
       <lval>
        <lhost>
         <var vid="5966" vname="tmp___10"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="235" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___11">
         <lval>
          <lhost>
           <var vid="5968" vname="tmp___11"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="236" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5968" vname="tmp___11"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="237" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___11">
       <lval>
        <lhost>
         <var vid="5968" vname="tmp___11"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="238" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___11">
       <lval>
        <lhost>
         <var vid="5968" vname="tmp___11"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="239" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___11">
       <lval>
        <lhost>
         <var vid="5968" vname="tmp___11"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="16" id="240" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___11">
       <lval>
        <lhost>
         <var vid="5968" vname="tmp___11"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="241" origin="prim-exp" p-complexity="6">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___12">
         <lval>
          <lhost>
           <var vid="5970" vname="tmp___12"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="242" origin="prim-exp" p-complexity="0">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5970" vname="tmp___12"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="243" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___12">
       <lval>
        <lhost>
         <var vid="5970" vname="tmp___12"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="244" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___12">
       <lval>
        <lhost>
         <var vid="5970" vname="tmp___12"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="245" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___12">
       <lval>
        <lhost>
         <var vid="5970" vname="tmp___12"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="17" id="246" origin="prim-lval" p-complexity="1">
     <location byte="190253" file="src/log.c" line="242"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___12">
       <lval>
        <lhost>
         <var vid="5970" vname="tmp___12"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="118"/>
       <node name="if-else"/>
       <node name="stmt" num="114"/>
       <node name="if-else"/>
       <node name="stmt" num="110"/>
       <node name="if-else"/>
       <node name="stmt" num="106"/>
       <node name="if-else"/>
       <node name="stmt" num="102"/>
       <node name="if-else"/>
       <node name="stmt" num="98"/>
       <node name="if-else"/>
       <node name="stmt" num="94"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="247" origin="prim-exp" p-complexity="6">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___14">
         <lval>
          <lhost>
           <var vid="5974" vname="tmp___14"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="248" origin="prim-exp" p-complexity="0">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5974" vname="tmp___14"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="249" origin="prim-lval" p-complexity="1">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___14">
       <lval>
        <lhost>
         <var vid="5974" vname="tmp___14"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="250" origin="prim-lval" p-complexity="1">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___14">
       <lval>
        <lhost>
         <var vid="5974" vname="tmp___14"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="251" origin="prim-lval" p-complexity="1">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___14">
       <lval>
        <lhost>
         <var vid="5974" vname="tmp___14"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="252" origin="prim-lval" p-complexity="1">
     <location byte="190559" file="src/log.c" line="256"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___14">
       <lval>
        <lhost>
         <var vid="5974" vname="tmp___14"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="253" origin="prim-exp" p-complexity="0">
     <location byte="190601" file="src/log.c" line="258"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="connection_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="123"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="254" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="126"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="255" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="126"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="256" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="126"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="257" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="126"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="258" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="126"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="259" origin="prim-exp" p-complexity="0">
     <location byte="190681" file="src/log.c" line="259"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5972" vname="tmp___13"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="127"/>
       <node name="if-then"/>
       <node name="stmt" num="122"/>
       <node name="if-then"/>
       <node name="stmt" num="89"/>
       <node name="if-else"/>
       <node name="stmt" num="86"/>
       <node name="if-else"/>
       <node name="stmt" num="83"/>
       <node name="if-else"/>
       <node name="stmt" num="80"/>
       <node name="if-else"/>
       <node name="stmt" num="75"/>
       <node name="if-then"/>
       <node name="stmt" num="73"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="260" origin="prim-exp" p-complexity="6">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp___20">
         <lval>
          <lhost>
           <var vid="5986" vname="tmp___20"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="261" origin="prim-exp" p-complexity="0">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5986" vname="tmp___20"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="262" origin="prim-lval" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp___20">
       <lval>
        <lhost>
         <var vid="5986" vname="tmp___20"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="263" origin="prim-lval" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___20">
       <lval>
        <lhost>
         <var vid="5986" vname="tmp___20"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="264" origin="prim-lval" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___20">
       <lval>
        <lhost>
         <var vid="5986" vname="tmp___20"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="265" origin="prim-lval" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___20">
       <lval>
        <lhost>
         <var vid="5986" vname="tmp___20"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="266" origin="prim-exp" p-complexity="0">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;log failed: %s&quot;">
       <constant ctag="cstr" strValue="log failed: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="267" origin="prim-exp" p-complexity="0">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;log failed: %s&quot;">
       <constant ctag="cstr" strValue="log failed: %s"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="268" origin="prim-exp" p-complexity="0">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;log failed: %s&quot;">
       <constant ctag="cstr" strValue="log failed: %s"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="269" origin="prim-exp" p-complexity="0">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="tmp___21"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="270" origin="prim-exp" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp___21">
       <lval>
        <lhost>
         <var vid="5988" vname="tmp___21"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="271" origin="prim-exp" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp___21">
       <lval>
        <lhost>
         <var vid="5988" vname="tmp___21"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="272" origin="prim-exp" p-complexity="1">
     <location byte="190768" file="src/log.c" line="268"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp___21">
       <lval>
        <lhost>
         <var vid="5988" vname="tmp___21"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="129"/>
       <node name="loop"/>
       <node name="stmt" num="40"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:38">
   <application file="src/log.xml" name="application"/>
  </header>
 </c-analysis>
