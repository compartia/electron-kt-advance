<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="log_reopen">
   <statistics avg-context-complexity="2.21" avg-predicate-complexity="0.46" context-complexity="53" predicate-complexity="11" size="24"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="188227" file="src/log.c" line="113"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5901" vname="log_stderr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="2" origin="prim-exp" p-complexity="0">
     <location byte="188256" file="src/log.c" line="115"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="27"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="3" origin="prim-exp" p-complexity="0">
     <location byte="188275" file="src/log.c" line="116"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="28"/>
       <node name="if-then"/>
       <node name="stmt" num="27"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="4" origin="prim-exp" p-complexity="0">
     <location byte="188299" file="src/log.c" line="120"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5933" vname="log_file"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="open" id="5" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="path" nr="1" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="open" id="6" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="path" nr="1" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="open" id="7" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="path" nr="1" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="open" id="8" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (log_file:(char*))]">
       <arg etag="caste" xstr="caste (log_file:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="log_file">
         <lval>
          <lhost>
           <var vid="5933" vname="log_file"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="path" nr="1" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="open" id="9" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (log_file:(char*))]">
       <arg etag="caste" xstr="caste (log_file:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="log_file">
         <lval>
          <lhost>
           <var vid="5933" vname="log_file"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="path" nr="1" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="10" origin="prim-exp" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="log_file">
       <lval>
        <lhost>
         <var vid="5933" vname="log_file"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="11" origin="prim-exp" p-complexity="0">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5933" vname="log_file"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="12" origin="prim-exp" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="13" origin="prim-exp" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="14" origin="prim-exp" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (log_file:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="log_file">
        <lval>
         <lhost>
          <var vid="5933" vname="log_file"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="15" origin="prim-op" p-complexity="0">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="16" origin="prim-op" p-complexity="1">
     <location byte="188314" file="src/log.c" line="121"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="30"/>
       <node name="if-then"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="17" origin="prim-exp" p-complexity="0">
     <location byte="188414" file="src/log.c" line="131"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5909" vname="connection_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="31"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="18" origin="prim-exp" p-complexity="0">
     <location byte="188459" file="src/log.c" line="134"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="19" origin="prim-exp" p-complexity="0">
     <location byte="188459" file="src/log.c" line="134"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="max_logs"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="20" origin="prim-exp" p-complexity="0">
     <location byte="188459" file="src/log.c" line="134"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="34"/>
       <node name="if-then"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="21" origin="prim-exp" p-complexity="0">
     <location byte="188459" file="src/log.c" line="134"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5934" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="35"/>
       <node name="if-then"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="22" origin="prim-exp" p-complexity="0">
     <location byte="188535" file="src/log.c" line="135"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="36"/>
       <node name="if-then"/>
       <node name="stmt" num="35"/>
       <node name="if-then"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="23" origin="prim-exp" p-complexity="0">
     <location byte="188535" file="src/log.c" line="135"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5934" vname="flags"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="36"/>
       <node name="if-then"/>
       <node name="stmt" num="35"/>
       <node name="if-then"/>
       <node name="stmt" num="33"/>
       <node name="if-then"/>
       <node name="stmt" num="32"/>
       <node name="if-else"/>
       <node name="stmt" num="29"/>
       <node name="if-then"/>
       <node name="stmt" num="26"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="24" origin="prim-exp" p-complexity="0">
     <location byte="188581" file="src/log.c" line="140"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5903" vname="log_fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="37"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:38">
   <application file="src/log.xml" name="application"/>
  </header>
 </c-analysis>
