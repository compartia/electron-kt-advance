<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="prettyprint_addr">
   <statistics avg-context-complexity="2.80" avg-predicate-complexity="1.64" context-complexity="442" predicate-complexity="259" size="158"/>
   <unconstrained-external-functions>
    <efn name="if/if_indextoname" num="1"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="1">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="addr-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6041" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="6">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="0">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-lval" p-complexity="1">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-lval" p-complexity="1">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-lval" p-complexity="1">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-lval" p-complexity="1">
     <location byte="193389" file="src/util.c" line="408"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="8" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="9" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="10" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="11" name="deref-read" origin="f-pre" p-complexity="11">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ttag="tvoid">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="addr">
             <lval>
              <lhost>
               <var vid="6041" vname="addr"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
           <offset>
            <offset>
             <field ckey="33" fname="sin_addr"/>
            </offset>
            <field ckey="203" fname="in"/>
           </offset>
          </lval>
         </exp>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="12" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="13" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="14" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="inet_ntop" id="15" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>src</ci>
        <ci>dst</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="42" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6041" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="33" fname="sin_addr"/>
         </offset>
         <field ckey="203" fname="in"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-lval" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-lval" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-lval" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-lval" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="22" origin="prim-exp" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-exp" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-exp" p-complexity="6">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in.sin_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in.sin_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="33" fname="sin_addr"/>
          </offset>
          <field ckey="203" fname="in"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="25" origin="prim-exp" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6042" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="26" origin="prim-exp" p-complexity="0">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="27" origin="prim-exp" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="28" origin="prim-exp" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="29" origin="prim-exp" p-complexity="1">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="30" origin="prim-exp" p-complexity="0">
     <location byte="193430" file="src/util.c" line="410"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="const" xstr="46">
       <constant ctag="cint64" ikind="iint" intValue="46"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="31" origin="prim-exp" p-complexity="6">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="33" fname="sin_port"/>
        </offset>
        <field ckey="203" fname="in"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="32" origin="prim-exp" p-complexity="0">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="33" origin="prim-lval" p-complexity="1">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="34" origin="prim-lval" p-complexity="1">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="35" origin="prim-lval" p-complexity="1">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="36" origin="prim-lval" p-complexity="1">
     <location byte="193504" file="src/util.c" line="411"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="37" origin="prim-exp" p-complexity="1">
     <location byte="193758" file="src/util.c" line="411"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="__v">
       <lval>
        <lhost>
         <var vid="6044" vname="__v"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="38" origin="prim-exp" p-complexity="0">
     <location byte="193758" file="src/util.c" line="411"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6044" vname="__v"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="239"/>
       <node name="if-then"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="39" origin="prim-exp" p-complexity="1">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="addr-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6041" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="40" origin="prim-exp" p-complexity="6">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="41" origin="prim-exp" p-complexity="0">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="42" origin="prim-lval" p-complexity="1">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="43" origin="prim-lval" p-complexity="1">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="44" origin="prim-lval" p-complexity="1">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="45" origin="prim-lval" p-complexity="1">
     <location byte="193781" file="src/util.c" line="413"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="46" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="47" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="48" name="deref-read" origin="f-pre" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="49" name="deref-read" origin="f-pre" p-complexity="11">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ttag="tvoid">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="addr">
             <lval>
              <lhost>
               <var vid="6041" vname="addr"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
           <offset>
            <offset>
             <field ckey="34" fname="sin6_addr"/>
            </offset>
            <field ckey="203" fname="in6"/>
           </offset>
          </lval>
         </exp>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read">
      <math>
       <apply>
        <deref-read/>
        <ci>src</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="50" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="51" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="52" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="size" nr="4" xstr="caste (46:socklen_t)">
       <typ tname="socklen_t" ttag="tnamed"/>
       <exp etag="const" xstr="46">
        <constant ctag="cint64" ikind="iint" intValue="46"/>
       </exp>
      </exp>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>dst</ci>
        <apply>
         <index-size/>
         <ci>size</ci>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="inet_ntop" id="53" name="no-overlap" origin="f-pre" p-complexity="7">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="dst" nr="3" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="src" nr="2" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>src</ci>
        <ci>dst</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="54" origin="prim-exp" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="addr">
          <lval>
           <lhost>
            <var vid="6041" vname="addr"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="55" origin="prim-exp" p-complexity="0">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="56" origin="prim-lval" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="57" origin="prim-lval" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="58" origin="prim-lval" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="59" origin="prim-lval" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="60" origin="prim-exp" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="61" origin="prim-exp" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="62" origin="prim-exp" p-complexity="6">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (addr-&gt;in6.sin6_addr):(void*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tvoid">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (addr-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="addr">
           <lval>
            <lhost>
             <var vid="6041" vname="addr"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
      <typ ttag="tvoid">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="63" origin="prim-exp" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6042" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="64" origin="prim-exp" p-complexity="0">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="65" origin="prim-exp" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="66" origin="prim-exp" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="67" origin="prim-exp" p-complexity="1">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="68" origin="prim-exp" p-complexity="0">
     <location byte="193844" file="src/util.c" line="416"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="const" xstr="46">
       <constant ctag="cint64" ikind="iint" intValue="46"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="241"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="69" origin="prim-exp" p-complexity="6">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_scope_id"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="70" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="71" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="72" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="73" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="74" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="75" origin="prim-exp" p-complexity="6">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_scope_id"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="76" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="77" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="78" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="79" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="80" origin="prim-lval" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="81" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="valid-mem">
      <exp etag="startof" xstr="startof (name)">
       <lval>
        <lhost>
         <var vid="6046" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="82" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="startof" xstr="startof (name)">
       <lval>
        <lhost>
         <var vid="6046" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="83" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="upper-bound">
      <exp etag="startof" xstr="startof (name)">
       <lval>
        <lhost>
         <var vid="6046" vname="name"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="243"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="84" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6047" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="85" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="86" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="87" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="88" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="89" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="90" origin="prim-exp" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6042" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="91" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="92" origin="prim-exp" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="93" origin="prim-exp" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="94" origin="prim-exp" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="95" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="96" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="97" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="98" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" fname="strlen" id="99" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="100" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="startof" xstr="startof (name)">
       <lval>
        <lhost>
         <var vid="6046" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="101" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="102" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="103" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="245"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="104" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6049" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="105" origin="prim-exp" p-complexity="0">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6051" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="106" origin="prim-op" p-complexity="3">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6049" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6051" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="107" origin="prim-op" p-complexity="3">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6049" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6051" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="108" origin="prim-op" p-complexity="4">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="plusa" size="iulong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((tmp___0 + tmp___1):size_t">
       <exp1 etag="lval" xstr="tmp___0">
        <lval>
         <lhost>
          <var vid="6049" vname="tmp___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="tmp___1">
        <lval>
         <lhost>
          <var vid="6051" vname="tmp___1"/>
         </lhost>
        </lval>
       </exp2>
       <typ tname="size_t" ttag="tnamed"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="109" origin="prim-op" p-complexity="4">
     <location byte="193896" file="src/util.c" line="417"/>
     <predicate op="plusa" size="iulong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((tmp___0 + tmp___1):size_t">
       <exp1 etag="lval" xstr="tmp___0">
        <lval>
         <lhost>
          <var vid="6049" vname="tmp___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="tmp___1">
        <lval>
         <lhost>
          <var vid="6051" vname="tmp___1"/>
         </lhost>
        </lval>
       </exp2>
       <typ tname="size_t" ttag="tnamed"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iulong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="110" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="111" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="112" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="113" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%&quot;">
         <constant ctag="cstr" strValue="%"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="114" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%&quot;">
         <constant ctag="cstr" strValue="%"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="115" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="116" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%&quot;">
         <constant ctag="cstr" strValue="%"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="117" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%&quot;">
         <constant ctag="cstr" strValue="%"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="118" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="119" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="plusa" etag="binop" xstr="((null-terminator-pos[caste (buf:(char*))] + null-terminator-pos[caste (&quot;%&quot;:(char*))]):int">
       <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
        <arg etag="caste" xstr="caste (buf:(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint"/>
         </typ>
         <exp etag="lval" xstr="buf">
          <lval>
           <lhost>
            <var vid="6042" vname="buf"/>
           </lhost>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%&quot;:(char*))]">
        <arg etag="caste" xstr="caste (&quot;%&quot;:(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="const" xstr="&quot;%&quot;">
          <constant ctag="cstr" strValue="%"/>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="120" name="no-overlap" origin="f-pre" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="121" origin="prim-exp" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6042" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="122" origin="prim-exp" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="123" origin="prim-exp" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="124" origin="prim-exp" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="125" origin="prim-exp" p-complexity="1">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="126" origin="prim-exp" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%&quot;">
       <constant ctag="cstr" strValue="%"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="127" origin="prim-exp" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="128" origin="prim-exp" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="129" origin="prim-exp" p-complexity="0">
     <location byte="194031" file="src/util.c" line="421"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%&quot;">
        <constant ctag="cstr" strValue="%"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="130" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="131" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="132" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="133" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="134" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="135" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="136" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="137" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
       <arg etag="caste" xstr="caste (buf:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint"/>
        </typ>
        <exp etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6042" vname="buf"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
       <arg etag="caste" xstr="caste (startof (name):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="startof" xstr="startof (name)">
         <lval>
          <lhost>
           <var vid="6046" vname="name"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="138" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="139" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 binop="plusa" etag="binop" xstr="((null-terminator-pos[caste (buf:(char*))] + null-terminator-pos[caste (startof (name):(char*))]):int">
       <exp1 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (buf:(char*))]">
        <arg etag="caste" xstr="caste (buf:(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint"/>
         </typ>
         <exp etag="lval" xstr="buf">
          <lval>
           <lhost>
            <var vid="6042" vname="buf"/>
           </lhost>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (startof (name):(char*))]">
        <arg etag="caste" xstr="caste (startof (name):(char*))">
         <typ ttag="tptr">
          <attributes>
           <attr attrname="restrict"/>
          </attributes>
          <typ ikind="ichar" ttag="tint">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
         <exp etag="startof" xstr="startof (name)">
          <lval>
           <lhost>
            <var vid="6046" vname="name"/>
           </lhost>
          </lval>
         </exp>
        </arg>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s1</ci>
        <apply>
         <plus/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" fname="strcat" id="140" name="no-overlap" origin="f-pre" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s2" nr="2" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <exp etag="caste" name="s1" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>s1</ci>
        <ci>s2</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="141" origin="prim-exp" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6042" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="142" origin="prim-exp" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6042" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="143" origin="prim-exp" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="144" origin="prim-exp" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="145" origin="prim-exp" p-complexity="1">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6042" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="146" origin="prim-exp" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="startof" xstr="startof (name)">
       <lval>
        <lhost>
         <var vid="6046" vname="name"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="147" origin="prim-exp" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="148" origin="prim-exp" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="149" origin="prim-exp" p-complexity="0">
     <location byte="194052" file="src/util.c" line="422"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (startof (name):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="startof" xstr="startof (name)">
        <lval>
         <lhost>
          <var vid="6046" vname="name"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="247"/>
       <node name="if-then"/>
       <node name="stmt" num="246"/>
       <node name="if-then"/>
       <node name="stmt" num="244"/>
       <node name="if-then"/>
       <node name="stmt" num="242"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="150" origin="prim-exp" p-complexity="6">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="addr">
         <lval>
          <lhost>
           <var vid="6041" vname="addr"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_port"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="151" origin="prim-exp" p-complexity="0">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6041" vname="addr"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="152" origin="prim-lval" p-complexity="1">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="153" origin="prim-lval" p-complexity="1">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="154" origin="prim-lval" p-complexity="1">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="155" origin="prim-lval" p-complexity="1">
     <location byte="194105" file="src/util.c" line="424"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="addr">
       <lval>
        <lhost>
         <var vid="6041" vname="addr"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="156" origin="prim-exp" p-complexity="1">
     <location byte="194361" file="src/util.c" line="424"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="__v___0">
       <lval>
        <lhost>
         <var vid="6053" vname="__v___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="157" origin="prim-exp" p-complexity="0">
     <location byte="194361" file="src/util.c" line="424"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6053" vname="__v___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="248"/>
       <node name="if-then"/>
       <node name="stmt" num="240"/>
       <node name="if-else"/>
       <node name="stmt" num="238"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="158" origin="prim-exp" p-complexity="0">
     <location byte="194384" file="src/util.c" line="431"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6043" vname="port"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="249"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
