<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="safe_pipe">
   <statistics avg-context-complexity="1.85" avg-predicate-complexity="0.80" context-complexity="109" predicate-complexity="47" size="59"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/die" num="3"/>
    <efn name="dnsmasq/fix_fd" num="2"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" fname="pipe" id="1" name="deref-write" origin="f-pre" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="fildes" nr="1" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-write">
      <math>
       <apply>
        <deref-write/>
        <ci>fildes</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="pipe" id="2" name="deref-write" origin="f-pre" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="fildes" nr="1" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-write">
      <math>
       <apply>
        <deref-write/>
        <ci>fildes</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="pipe" id="3" name="deref-write" origin="f-pre" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="fildes" nr="1" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-write">
      <math>
       <apply>
        <deref-write/>
        <ci>fildes</ci>
        <apply>
         <index-size/>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-exp" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5973" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-exp" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-exp" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (fd:(int*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="arraylen"/>
        </attributes>
        <typ ikind="iint" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="161"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5975" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="10" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
       <constant ctag="cstr" strValue="cannot create pipe: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="11" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="14" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="163"/>
       <node name="if-then"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-exp" p-complexity="7">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((fd +i 1):(int*)">
         <exp1 etag="lval" xstr="fd">
          <lval>
           <lhost>
            <var vid="5973" vname="fd"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iint" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5973" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="22" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-op" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iint" ttag="tint"/>
      <exp1 etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iint" ttag="tint"/>
      <exp1 etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="25" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 1):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="26" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 1):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="27" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 1):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="28" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 1):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="164"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="29" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5977" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="30" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5974" vname="read_noblock"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="31" origin="prim-exp" p-complexity="7">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((fd +i 0):(int*)">
         <exp1 etag="lval" xstr="fd">
          <lval>
           <lhost>
            <var vid="5973" vname="fd"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="0">
          <constant ctag="cint64" ikind="iint" intValue="0"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iint" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="32" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5973" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="33" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="34" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="35" origin="prim-op" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iint" ttag="tint"/>
      <exp1 etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="36" origin="prim-op" p-complexity="1">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iint" ttag="tint"/>
      <exp1 etag="lval" xstr="fd">
       <lval>
        <lhost>
         <var vid="5973" vname="fd"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="37" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 0):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="38" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 0):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="39" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 0):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="40" origin="prim-lval" p-complexity="2">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((fd +i 0):(int*)">
       <exp1 etag="lval" xstr="fd">
        <lval>
         <lhost>
          <var vid="5973" vname="fd"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iint" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="167"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="41" origin="prim-exp" p-complexity="0">
     <location byte="190557" file="src/util.c" line="257"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5979" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="42" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
       <constant ctag="cstr" strValue="cannot create pipe: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="43" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="44" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="45" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="46" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="47" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="48" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="49" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="50" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="169"/>
       <node name="if-else"/>
       <node name="stmt" num="168"/>
       <node name="if-then"/>
       <node name="stmt" num="166"/>
       <node name="if-then"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="51" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
       <constant ctag="cstr" strValue="cannot create pipe: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="52" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="53" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="54" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;cannot create pipe: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;cannot create pipe: %s&quot;">
        <constant ctag="cstr" strValue="cannot create pipe: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="55" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="56" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="57" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="58" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="59" origin="prim-exp" p-complexity="0">
     <location byte="190647" file="src/util.c" line="260"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="170"/>
       <node name="if-else"/>
       <node name="stmt" num="165"/>
       <node name="if-else"/>
       <node name="stmt" num="162"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
