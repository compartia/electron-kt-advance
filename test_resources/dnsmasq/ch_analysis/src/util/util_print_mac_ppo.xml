<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="print_mac">
   <statistics avg-context-complexity="4.22" avg-predicate-complexity="0.92" context-complexity="312" predicate-complexity="68" size="74"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="196740" file="src/util.c" line="565"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="337"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="0">
     <location byte="196768" file="src/util.c" line="568"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="3" name="format" origin="f-pre" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="4" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="5" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="6" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="7" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;&lt;null&gt;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
         <constant ctag="cstr" strValue="&lt;null&gt;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="8" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;&lt;null&gt;&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
         <constant ctag="cstr" strValue="&lt;null&gt;"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="9" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="10" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="11" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-exp" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6123" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="14" origin="prim-exp" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="1">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
       <constant ctag="cstr" strValue="&lt;null&gt;"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-exp" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-exp" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-exp" p-complexity="0">
     <location byte="196786" file="src/util.c" line="569"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;&lt;null&gt;&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;&lt;null&gt;&quot;">
        <constant ctag="cstr" strValue="&lt;null&gt;"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="339"/>
       <node name="if-then"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="21" origin="prim-exp" p-complexity="0">
     <location byte="196819" file="src/util.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6124" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="342"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="22" origin="prim-exp" p-complexity="0">
     <location byte="196819" file="src/util.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="342"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="23" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6124" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="344"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="24" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6122" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="344"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="25" origin="prim-op" p-complexity="2">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6122" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="344"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="26" origin="prim-op" p-complexity="2">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6122" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="344"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="27" name="format" origin="f-pre" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="28" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="29" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="30" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="31" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.2x%s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.2x%s&quot;">
         <constant ctag="cstr" strValue="%.2x%s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="32" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%.2x%s&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%.2x%s&quot;">
         <constant ctag="cstr" strValue="%.2x%s"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="33" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="34" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" fname="sprintf" id="35" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="36" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="37" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6123" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="38" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="39" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="40" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (p:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6123" vname="p"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="41" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%.2x%s&quot;">
       <constant ctag="cstr" strValue="%.2x%s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="42" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="43" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="44" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%.2x%s&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%.2x%s&quot;">
        <constant ctag="cstr" strValue="%.2x%s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="45" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="*(((lval (mac) +i lval (i)):(unsigned char*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
          <exp1 etag="lval" xstr="mac">
           <lval>
            <lhost>
             <var vid="6121" vname="mac"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="i">
           <lval>
            <lhost>
             <var vid="6124" vname="i"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ikind="iuchar" ttag="tint"/>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="46" origin="prim-exp" p-complexity="8">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
         <exp1 etag="lval" xstr="mac">
          <lval>
           <lhost>
            <var vid="6121" vname="mac"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="i">
          <lval>
           <lhost>
            <var vid="6124" vname="i"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iuchar" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="47" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6121" vname="mac"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="48" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6124" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="49" origin="prim-op" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="mac">
       <lval>
        <lhost>
         <var vid="6121" vname="mac"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="50" origin="prim-op" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="mac">
       <lval>
        <lhost>
         <var vid="6121" vname="mac"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="51" origin="prim-op" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="mac">
       <lval>
        <lhost>
         <var vid="6121" vname="mac"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6124" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="52" origin="prim-op" p-complexity="2">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="mac">
       <lval>
        <lhost>
         <var vid="6121" vname="mac"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6124" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="53" origin="prim-lval" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="mac">
        <lval>
         <lhost>
          <var vid="6121" vname="mac"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6124" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="54" origin="prim-lval" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="mac">
        <lval>
         <lhost>
          <var vid="6121" vname="mac"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6124" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="55" origin="prim-lval" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="mac">
        <lval>
         <lhost>
          <var vid="6121" vname="mac"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6124" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="56" origin="prim-lval" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((mac +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="mac">
        <lval>
         <lhost>
          <var vid="6121" vname="mac"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6124" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="57" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6125" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="58" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6125" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="59" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6125" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="60" origin="prim-exp" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6125" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="3"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="61" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6123" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="62" origin="prim-exp" p-complexity="0">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6127" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="63" origin="prim-op" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="64" origin="prim-op" p-complexity="1">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="65" origin="prim-op" p-complexity="3">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6127" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="66" origin="prim-op" p-complexity="2">
     <location byte="196851" file="src/util.c" line="572"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6123" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6127" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="67" origin="prim-exp" p-complexity="0">
     <location byte="196819" file="src/util.c" line="571"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6124" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="68" origin="prim-op" p-complexity="2">
     <location byte="196819" file="src/util.c" line="571"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6124" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="69" origin="prim-op" p-complexity="2">
     <location byte="196819" file="src/util.c" line="571"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6124" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="347"/>
       <node name="loop"/>
       <node name="stmt" num="341"/>
       <node name="if-else"/>
       <node name="stmt" num="338"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="70" origin="prim-exp" p-complexity="0">
     <location byte="196916" file="src/util.c" line="574"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6120" vname="buff"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="348"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="71" origin="prim-exp" p-complexity="1">
     <location byte="196916" file="src/util.c" line="574"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6120" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="348"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="72" origin="prim-exp" p-complexity="1">
     <location byte="196916" file="src/util.c" line="574"/>
     <predicate tag="global-mem">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6120" vname="buff"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="348"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="73" origin="prim-exp" p-complexity="1">
     <location byte="196916" file="src/util.c" line="574"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6120" vname="buff"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="348"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="74" origin="prim-exp" p-complexity="1">
     <location byte="196916" file="src/util.c" line="574"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="buff">
       <lval>
        <lhost>
         <var vid="6120" vname="buff"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="348"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
