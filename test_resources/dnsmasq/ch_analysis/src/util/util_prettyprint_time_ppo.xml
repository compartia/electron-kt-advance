<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="prettyprint_time">
   <statistics avg-context-complexity="1.74" avg-predicate-complexity="1.09" context-complexity="270" predicate-complexity="169" size="155"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="194453" file="src/util.c" line="436"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6060" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="2" name="format" origin="f-pre" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="3" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="4" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="5" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="6" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;infinite&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;infinite&quot;">
         <constant ctag="cstr" strValue="infinite"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="7" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;infinite&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;infinite&quot;">
         <constant ctag="cstr" strValue="infinite"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="8" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="9" name="buffersize" origin="f-pre" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" fname="sprintf" id="10" name="buffersize" origin="f-pre" p-complexity="2">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="11" origin="prim-exp" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-exp" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6059" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="14" origin="prim-exp" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="1">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (buf:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;infinite&quot;">
       <constant ctag="cstr" strValue="infinite"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-exp" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-exp" p-complexity="0">
     <location byte="194478" file="src/util.c" line="437"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;infinite&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;infinite&quot;">
        <constant ctag="cstr" strValue="infinite"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="251"/>
       <node name="if-then"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-exp" p-complexity="0">
     <location byte="194555" file="src/util.c" line="441"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6060" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-op" p-complexity="2">
     <location byte="194555" file="src/util.c" line="441"/>
     <predicate op="div" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="86400">
       <constant ctag="cint64" ikind="iuint" intValue="86400"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="22" origin="prim-op" p-complexity="2">
     <location byte="194555" file="src/util.c" line="441"/>
     <predicate op="div" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="86400">
       <constant ctag="cint64" ikind="iuint" intValue="86400"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-op" p-complexity="0">
     <location byte="194555" file="src/util.c" line="441"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="86400">
       <constant ctag="cint64" ikind="iuint" intValue="86400"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="252"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-exp" p-complexity="0">
     <location byte="194555" file="src/util.c" line="441"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="25" name="format" origin="f-pre" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="26" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="27" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="28" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="29" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dd&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dd&quot;">
         <constant ctag="cstr" strValue="%dd"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="30" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dd&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dd&quot;">
         <constant ctag="cstr" strValue="%dd"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="31" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="32" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="33" name="buffersize" origin="f-pre" p-complexity="4">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="34" origin="prim-exp" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
       <exp1 etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6062" vname="p"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="35" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6059" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="36" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="37" origin="prim-op" p-complexity="1">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="38" origin="prim-op" p-complexity="1">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="39" origin="prim-op" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="40" origin="prim-op" p-complexity="2">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="41" origin="prim-exp" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="42" origin="prim-exp" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="43" origin="prim-exp" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="44" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%dd&quot;">
       <constant ctag="cstr" strValue="%dd"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="45" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="46" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="47" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%dd&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dd&quot;">
        <constant ctag="cstr" strValue="%dd"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="48" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="49" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="50" origin="prim-exp" p-complexity="1">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6063" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="51" origin="prim-exp" p-complexity="0">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6063" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="52" origin="prim-op" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6063" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="53" origin="prim-op" p-complexity="3">
     <location byte="194575" file="src/util.c" line="442"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp">
        <lval>
         <lhost>
          <var vid="6063" vname="tmp"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="254"/>
       <node name="if-then"/>
       <node name="stmt" num="253"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="54" origin="prim-exp" p-complexity="0">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6060" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="55" origin="prim-op" p-complexity="2">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate op="div" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="3600">
       <constant ctag="cint64" ikind="iuint" intValue="3600"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="56" origin="prim-op" p-complexity="2">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate op="div" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="3600">
       <constant ctag="cint64" ikind="iuint" intValue="3600"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="57" origin="prim-op" p-complexity="0">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="3600">
       <constant ctag="cint64" ikind="iuint" intValue="3600"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="58" origin="prim-op" p-complexity="0">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="24">
       <constant ctag="cint64" ikind="iuint" intValue="24"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="255"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="59" origin="prim-exp" p-complexity="0">
     <location byte="194615" file="src/util.c" line="443"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="60" name="format" origin="f-pre" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="61" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="62" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="63" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="64" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dh&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dh&quot;">
         <constant ctag="cstr" strValue="%dh"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="65" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dh&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dh&quot;">
         <constant ctag="cstr" strValue="%dh"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="66" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="67" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="68" name="buffersize" origin="f-pre" p-complexity="4">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="69" origin="prim-exp" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
       <exp1 etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6062" vname="p"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="70" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6059" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="71" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="72" origin="prim-op" p-complexity="1">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="73" origin="prim-op" p-complexity="1">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="74" origin="prim-op" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="75" origin="prim-op" p-complexity="2">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="76" origin="prim-exp" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="77" origin="prim-exp" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="78" origin="prim-exp" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="79" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%dh&quot;">
       <constant ctag="cstr" strValue="%dh"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="80" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="81" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="82" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%dh&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dh&quot;">
        <constant ctag="cstr" strValue="%dh"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="83" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="84" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="85" origin="prim-exp" p-complexity="1">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6065" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="86" origin="prim-exp" p-complexity="0">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6065" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="87" origin="prim-op" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___0:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___0">
        <lval>
         <lhost>
          <var vid="6065" vname="tmp___0"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="88" origin="prim-op" p-complexity="3">
     <location byte="194639" file="src/util.c" line="444"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___0:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___0">
        <lval>
         <lhost>
          <var vid="6065" vname="tmp___0"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="257"/>
       <node name="if-then"/>
       <node name="stmt" num="256"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="89" origin="prim-exp" p-complexity="0">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6060" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="90" origin="prim-op" p-complexity="2">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate op="div" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="60">
       <constant ctag="cint64" ikind="iuint" intValue="60"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="91" origin="prim-op" p-complexity="2">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate op="div" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="t">
       <lval>
        <lhost>
         <var vid="6060" vname="t"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="60">
       <constant ctag="cint64" ikind="iuint" intValue="60"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="92" origin="prim-op" p-complexity="0">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="60">
       <constant ctag="cint64" ikind="iuint" intValue="60"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="93" origin="prim-op" p-complexity="0">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="60">
       <constant ctag="cint64" ikind="iuint" intValue="60"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="258"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="94" origin="prim-exp" p-complexity="0">
     <location byte="194678" file="src/util.c" line="445"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="95" name="format" origin="f-pre" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="96" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="97" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="98" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="99" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dm&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dm&quot;">
         <constant ctag="cstr" strValue="%dm"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="100" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%dm&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%dm&quot;">
         <constant ctag="cstr" strValue="%dm"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="101" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="102" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="103" name="buffersize" origin="f-pre" p-complexity="4">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="104" origin="prim-exp" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
       <exp1 etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6062" vname="p"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="105" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6059" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="106" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="107" origin="prim-op" p-complexity="1">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="108" origin="prim-op" p-complexity="1">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="109" origin="prim-op" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="110" origin="prim-op" p-complexity="2">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="111" origin="prim-exp" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="112" origin="prim-exp" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="113" origin="prim-exp" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="114" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%dm&quot;">
       <constant ctag="cstr" strValue="%dm"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="115" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="116" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="117" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%dm&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%dm&quot;">
        <constant ctag="cstr" strValue="%dm"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="118" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="119" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="120" origin="prim-exp" p-complexity="1">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="tmp___1">
       <lval>
        <lhost>
         <var vid="6067" vname="tmp___1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="121" origin="prim-exp" p-complexity="0">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6067" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="122" origin="prim-op" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___1:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___1">
        <lval>
         <lhost>
          <var vid="6067" vname="tmp___1"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="123" origin="prim-op" p-complexity="3">
     <location byte="194700" file="src/util.c" line="446"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___1:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___1">
        <lval>
         <lhost>
          <var vid="6067" vname="tmp___1"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="260"/>
       <node name="if-then"/>
       <node name="stmt" num="259"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="124" origin="prim-exp" p-complexity="0">
     <location byte="194739" file="src/util.c" line="447"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6060" vname="t"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="261"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="125" origin="prim-op" p-complexity="0">
     <location byte="194739" file="src/util.c" line="447"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="60">
       <constant ctag="cint64" ikind="iuint" intValue="60"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="261"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="126" origin="prim-exp" p-complexity="0">
     <location byte="194739" file="src/util.c" line="447"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="127" name="format" origin="f-pre" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="format-string">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="format">
      <math>
       <apply>
        <format-string/>
        <ci>format</ci>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="128" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="129" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="130" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="131" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%ds&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%ds&quot;">
         <constant ctag="cstr" strValue="%ds"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="132" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (&quot;%ds&quot;:(char*))]">
       <arg etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="const" xstr="&quot;%ds&quot;">
         <constant ctag="cstr" strValue="%ds"/>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="format" nr="2" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>format</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>format</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="133" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="134" name="buffersize" origin="f-pre" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" fname="sprintf" id="135" name="buffersize" origin="f-pre" p-complexity="4">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="runtime-value" etag="cnapp" xstr="runtime-value">
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="buffersize">
      <math>
       <apply>
        <deref-write/>
        <ci>s</ci>
        <runtime-value/>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="136" origin="prim-exp" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
       <exp1 etag="lval" xstr="buf">
        <lval>
         <lhost>
          <var vid="6059" vname="buf"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="p">
        <lval>
         <lhost>
          <var vid="6062" vname="p"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="137" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6059" vname="buf"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="138" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="139" origin="prim-op" p-complexity="1">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="140" origin="prim-op" p-complexity="1">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="141" origin="prim-op" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="142" origin="prim-op" p-complexity="2">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="buf">
       <lval>
        <lhost>
         <var vid="6059" vname="buf"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="143" origin="prim-exp" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="144" origin="prim-exp" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="145" origin="prim-exp" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((buf +i p):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((buf +i p):(char*)">
        <exp1 etag="lval" xstr="buf">
         <lval>
          <lhost>
           <var vid="6059" vname="buf"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="p">
         <lval>
          <lhost>
           <var vid="6062" vname="p"/>
          </lhost>
         </lval>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="146" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="const" xstr="&quot;%ds&quot;">
       <constant ctag="cstr" strValue="%ds"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="147" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="148" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="149" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;%ds&quot;:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="const" xstr="&quot;%ds&quot;">
        <constant ctag="cstr" strValue="%ds"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="150" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6061" vname="x"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="151" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6062" vname="p"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="152" origin="prim-exp" p-complexity="1">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6069" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="153" origin="prim-exp" p-complexity="0">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6069" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="154" origin="prim-op" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="plusa" size="iuint" tag="int-underflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___2:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6069" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="155" origin="prim-op" p-complexity="3">
     <location byte="194756" file="src/util.c" line="448"/>
     <predicate op="plusa" size="iuint" tag="int-overflow">
      <exp1 etag="lval" xstr="p">
       <lval>
        <lhost>
         <var vid="6062" vname="p"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (tmp___2:unsigned int)">
       <typ ikind="iuint" ttag="tint"/>
       <exp etag="lval" xstr="tmp___2">
        <lval>
         <lhost>
          <var vid="6069" vname="tmp___2"/>
         </lhost>
        </lval>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="263"/>
       <node name="if-then"/>
       <node name="stmt" num="262"/>
       <node name="if-else"/>
       <node name="stmt" num="250"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
