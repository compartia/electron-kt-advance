<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="sockaddr_isequal">
   <statistics avg-context-complexity="4.01" avg-predicate-complexity="3.64" context-complexity="802" predicate-complexity="728" size="200"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s1-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="6">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="0">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="5" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s2-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="6">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s2">
         <lval>
          <lhost>
           <var vid="5989" vname="s2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-exp" p-complexity="0">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="11" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="12" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="13" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-lval" p-complexity="1">
     <location byte="190927" file="src/util.c" line="275"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s1-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="6">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="22" origin="prim-exp" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s1-&gt;in.sin_port">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="33" fname="sin_port"/>
         </offset>
         <field ckey="203" fname="in"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="23" origin="prim-exp" p-complexity="6">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="33" fname="sin_port"/>
        </offset>
        <field ckey="203" fname="in"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="24" origin="prim-exp" p-complexity="0">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="25" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="26" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="27" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="28" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="29" origin="prim-exp" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s2-&gt;in.sin_port">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="33" fname="sin_port"/>
         </offset>
         <field ckey="203" fname="in"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="30" origin="prim-exp" p-complexity="6">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s2">
         <lval>
          <lhost>
           <var vid="5989" vname="s2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="33" fname="sin_port"/>
        </offset>
        <field ckey="203" fname="in"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="31" origin="prim-exp" p-complexity="0">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="32" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="33" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="34" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="35" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="36" origin="prim-exp" p-complexity="6">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <offset>
          <field ckey="42" fname="s_addr"/>
         </offset>
         <field ckey="33" fname="sin_addr"/>
        </offset>
        <field ckey="203" fname="in"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="37" origin="prim-exp" p-complexity="0">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="38" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="39" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="40" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="41" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="42" origin="prim-exp" p-complexity="6">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s2">
         <lval>
          <lhost>
           <var vid="5989" vname="s2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <offset>
          <field ckey="42" fname="s_addr"/>
         </offset>
         <field ckey="33" fname="sin_addr"/>
        </offset>
        <field ckey="203" fname="in"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="43" origin="prim-exp" p-complexity="0">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="44" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="45" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="46" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="47" origin="prim-lval" p-complexity="1">
     <location byte="190981" file="src/util.c" line="277"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="179"/>
       <node name="if-then"/>
       <node name="stmt" num="178"/>
       <node name="if-then"/>
       <node name="stmt" num="177"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="48" origin="prim-exp" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s1-&gt;sa.sa_family">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="20" fname="sa_family"/>
         </offset>
         <field ckey="203" fname="sa"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="49" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="20" fname="sa_family"/>
        </offset>
        <field ckey="203" fname="sa"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="50" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="51" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="52" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="53" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="54" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="55" origin="prim-exp" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s1-&gt;in6.sin6_port">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_port"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="56" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_port"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="57" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="58" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="59" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="60" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="61" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="62" origin="prim-exp" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="s2-&gt;in6.sin6_port">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_port"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="63" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s2">
         <lval>
          <lhost>
           <var vid="5989" vname="s2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_port"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="64" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="65" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="66" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="67" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="68" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="69" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s1">
         <lval>
          <lhost>
           <var vid="5988" vname="s1"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_scope_id"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="70" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="71" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="72" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="73" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="74" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="75" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="s2">
         <lval>
          <lhost>
           <var vid="5989" vname="s2"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
       <offset>
        <offset>
         <field ckey="34" fname="sin6_scope_id"/>
        </offset>
        <field ckey="203" fname="in6"/>
       </offset>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="76" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="77" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="78" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="79" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="80" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="81" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s1">
              <lval>
               <lhost>
                <var vid="5988" vname="s1"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="0">
          <constant ctag="cint64" ikind="iint" intValue="0"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="82" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="83" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="84" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="85" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="86" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="87" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="88" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="89" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="90" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="91" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="92" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="93" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="94" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="95" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="96" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s2">
              <lval>
               <lhost>
                <var vid="5989" vname="s2"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="0">
          <constant ctag="cint64" ikind="iint" intValue="0"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="97" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="98" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="99" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="100" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="101" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="102" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="103" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="104" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="105" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="106" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="107" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="108" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="109" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="4" id="110" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 0):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="111" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s1">
              <lval>
               <lhost>
                <var vid="5988" vname="s1"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="112" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="113" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="114" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="115" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="116" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="117" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="118" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="119" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="120" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="121" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="122" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="123" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="124" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="125" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="126" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s2">
              <lval>
               <lhost>
                <var vid="5989" vname="s2"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="127" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="128" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="129" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="130" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="131" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="132" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="133" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="134" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="135" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="136" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="137" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="138" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="139" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="140" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 1):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="141" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s1">
              <lval>
               <lhost>
                <var vid="5988" vname="s1"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="142" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="143" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="144" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="145" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="146" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="147" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="148" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="149" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="150" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="151" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="152" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="153" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="154" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="155" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="156" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s2">
              <lval>
               <lhost>
                <var vid="5989" vname="s2"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="157" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="158" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="159" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="160" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="161" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="162" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="163" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="164" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="165" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="166" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="167" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="168" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="169" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="170" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 2):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="171" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s1">
              <lval>
               <lhost>
                <var vid="5988" vname="s1"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="3">
          <constant ctag="cint64" ikind="iint" intValue="3"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="172" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s1">
          <lval>
           <lhost>
            <var vid="5988" vname="s1"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="173" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5988" vname="s1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="174" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="175" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="176" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="177" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s1">
       <lval>
        <lhost>
         <var vid="5988" vname="s1"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="178" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="179" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="180" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="181" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s1">
           <lval>
            <lhost>
             <var vid="5988" vname="s1"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="182" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="183" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="184" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="185" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s1-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s1-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s1">
            <lval>
             <lhost>
              <var vid="5988" vname="s1"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="186" origin="prim-exp" p-complexity="12">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
         <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
          <typ ttag="tptr">
           <typ tname="uint32_t" ttag="tnamed">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
          <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="s2">
              <lval>
               <lhost>
                <var vid="5989" vname="s2"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
            <offset>
             <offset>
              <field ckey="34" fname="sin6_addr"/>
             </offset>
             <field ckey="203" fname="in6"/>
            </offset>
           </lval>
          </exp>
         </exp1>
         <exp2 etag="const" xstr="3">
          <constant ctag="cint64" ikind="iint" intValue="3"/>
         </exp2>
         <typ ttag="tptr">
          <typ tname="uint32_t" ttag="tnamed">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="187" origin="prim-exp" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="pointer-cast">
      <tfrom ckey="46" ttag="tcomp"/>
      <tto ikind="iuint" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="s2">
          <lval>
           <lhost>
            <var vid="5989" vname="s2"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
        <offset>
         <offset>
          <field ckey="34" fname="sin6_addr"/>
         </offset>
         <field ckey="203" fname="in6"/>
        </offset>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="188" origin="prim-exp" p-complexity="0">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5989" vname="s2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="189" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="190" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="191" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="192" origin="prim-lval" p-complexity="1">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="s2">
       <lval>
        <lhost>
         <var vid="5989" vname="s2"/>
        </lhost>
       </lval>
      </exp>
      <typ ckey="203" ttag="tcomp"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="addrof"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="193" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="194" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="195" origin="prim-op" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="196" origin="prim-op" p-complexity="6">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuint" ttag="tint"/>
      <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="s2">
           <lval>
            <lhost>
             <var vid="5989" vname="s2"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
         <offset>
          <offset>
           <field ckey="34" fname="sin6_addr"/>
          </offset>
          <field ckey="203" fname="in6"/>
         </offset>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="const" xstr="3">
       <constant ctag="cint64" ikind="iint" intValue="3"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="197" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="198" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="199" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="200" origin="prim-lval" p-complexity="7">
     <location byte="191122" file="src/util.c" line="282"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*)) +i 3):(uint32_t*)">
       <exp1 etag="caste" xstr="caste (addrof (s2-&gt;in6.sin6_addr):(uint32_t*))">
        <typ ttag="tptr">
         <typ tname="uint32_t" ttag="tnamed">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="addrof" xstr="addrof (s2-&gt;in6.sin6_addr)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="s2">
            <lval>
             <lhost>
              <var vid="5989" vname="s2"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
          <offset>
           <offset>
            <field ckey="34" fname="sin6_addr"/>
           </offset>
           <field ckey="203" fname="in6"/>
          </offset>
         </lval>
        </exp>
       </exp1>
       <exp2 etag="const" xstr="3">
        <constant ctag="cint64" ikind="iint" intValue="3"/>
       </exp2>
       <typ ttag="tptr">
        <typ tname="uint32_t" ttag="tnamed">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="187"/>
       <node name="if-then"/>
       <node name="stmt" num="186"/>
       <node name="if-then"/>
       <node name="stmt" num="185"/>
       <node name="if-then"/>
       <node name="stmt" num="184"/>
       <node name="if-then"/>
       <node name="stmt" num="183"/>
       <node name="if-then"/>
       <node name="stmt" num="182"/>
       <node name="if-then"/>
       <node name="stmt" num="181"/>
       <node name="if-then"/>
       <node name="stmt" num="176"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
