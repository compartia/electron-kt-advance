<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="memcmp_masked">
   <statistics avg-context-complexity="5.26" avg-predicate-complexity="1.77" context-complexity="205" predicate-complexity="69" size="39"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6105" vname="len"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="317"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-op" p-complexity="2">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6105" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="317"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-op" p-complexity="2">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="len">
       <lval>
        <lhost>
         <var vid="6105" vname="len"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="317"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="4" origin="prim-exp" p-complexity="0">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6107" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="319"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="5" origin="prim-exp" p-complexity="0">
     <location byte="196192" file="src/util.c" line="527"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6106" vname="mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="6" origin="prim-exp" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="*(((lval (a) +i lval (i)):(unsigned char*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
          <exp1 etag="lval" xstr="a">
           <lval>
            <lhost>
             <var vid="6103" vname="a"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="i">
           <lval>
            <lhost>
             <var vid="6107" vname="i"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ikind="iuchar" ttag="tint"/>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="7" origin="prim-exp" p-complexity="8">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
         <exp1 etag="lval" xstr="a">
          <lval>
           <lhost>
            <var vid="6103" vname="a"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="i">
          <lval>
           <lhost>
            <var vid="6107" vname="i"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iuchar" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="8" origin="prim-exp" p-complexity="0">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6103" vname="a"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="9" origin="prim-exp" p-complexity="0">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6107" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="10" origin="prim-op" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="a">
       <lval>
        <lhost>
         <var vid="6103" vname="a"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="11" origin="prim-op" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="a">
       <lval>
        <lhost>
         <var vid="6103" vname="a"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="12" origin="prim-op" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="a">
       <lval>
        <lhost>
         <var vid="6103" vname="a"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="13" origin="prim-op" p-complexity="2">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="a">
       <lval>
        <lhost>
         <var vid="6103" vname="a"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="14" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="a">
        <lval>
         <lhost>
          <var vid="6103" vname="a"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="15" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="a">
        <lval>
         <lhost>
          <var vid="6103" vname="a"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="16" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="a">
        <lval>
         <lhost>
          <var vid="6103" vname="a"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="17" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((a +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="a">
        <lval>
         <lhost>
          <var vid="6103" vname="a"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="18" origin="prim-exp" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="*(((lval (b) +i lval (i)):(unsigned char*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
          <exp1 etag="lval" xstr="b">
           <lval>
            <lhost>
             <var vid="6104" vname="b"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="lval" xstr="i">
           <lval>
            <lhost>
             <var vid="6107" vname="i"/>
            </lhost>
           </lval>
          </exp2>
          <typ ttag="tptr">
           <typ ikind="iuchar" ttag="tint"/>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="19" origin="prim-exp" p-complexity="8">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
         <exp1 etag="lval" xstr="b">
          <lval>
           <lhost>
            <var vid="6104" vname="b"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="i">
          <lval>
           <lhost>
            <var vid="6107" vname="i"/>
           </lhost>
          </lval>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iuchar" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="20" origin="prim-exp" p-complexity="0">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6104" vname="b"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="21" origin="prim-exp" p-complexity="0">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6107" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="22" origin="prim-op" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="b">
       <lval>
        <lhost>
         <var vid="6104" vname="b"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="23" origin="prim-op" p-complexity="1">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="b">
       <lval>
        <lhost>
         <var vid="6104" vname="b"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="24" origin="prim-op" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="b">
       <lval>
        <lhost>
         <var vid="6104" vname="b"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="25" origin="prim-op" p-complexity="2">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="b">
       <lval>
        <lhost>
         <var vid="6104" vname="b"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="26" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="b">
        <lval>
         <lhost>
          <var vid="6104" vname="b"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="27" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="b">
        <lval>
         <lhost>
          <var vid="6104" vname="b"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="28" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="b">
        <lval>
         <lhost>
          <var vid="6104" vname="b"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="29" origin="prim-lval" p-complexity="3">
     <location byte="196218" file="src/util.c" line="529"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((b +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="b">
        <lval>
         <lhost>
          <var vid="6104" vname="b"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6107" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="30" origin="prim-exp" p-complexity="0">
     <location byte="196239" file="src/util.c" line="530"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6108" vname="count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="323"/>
       <node name="if-then"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="31" origin="prim-op" p-complexity="2">
     <location byte="196239" file="src/util.c" line="530"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="count">
       <lval>
        <lhost>
         <var vid="6108" vname="count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="323"/>
       <node name="if-then"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="32" origin="prim-op" p-complexity="2">
     <location byte="196239" file="src/util.c" line="530"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="count">
       <lval>
        <lhost>
         <var vid="6108" vname="count"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="323"/>
       <node name="if-then"/>
       <node name="stmt" num="322"/>
       <node name="if-then"/>
       <node name="stmt" num="321"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="33" origin="prim-exp" p-complexity="0">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6107" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="34" origin="prim-op" p-complexity="2">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="35" origin="prim-op" p-complexity="2">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6107" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="36" origin="prim-exp" p-complexity="0">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6106" vname="mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="37" origin="prim-op" p-complexity="0">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="38" origin="prim-op" p-complexity="1">
     <location byte="196128" file="src/util.c" line="526"/>
     <predicate size="iuint" tag="width-overflow">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="325"/>
       <node name="loop"/>
       <node name="stmt" num="318"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="39" origin="prim-exp" p-complexity="0">
     <location byte="196277" file="src/util.c" line="534"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6108" vname="count"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="326"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
