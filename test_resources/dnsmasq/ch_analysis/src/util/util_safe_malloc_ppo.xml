<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="safe_malloc">
   <statistics avg-context-complexity="0.50" avg-predicate-complexity="0.22" context-complexity="9" predicate-complexity="4" size="18"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/die" num="1"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="190400" file="src/util.c" line="247"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iulong">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="157"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="2" origin="prim-exp" p-complexity="0">
     <location byte="190400" file="src/util.c" line="247"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5967" vname="size"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="157"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="3" origin="prim-exp" p-complexity="0">
     <location byte="190400" file="src/util.c" line="247"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5969" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="157"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="4" origin="prim-exp" p-complexity="0">
     <location byte="190432" file="src/util.c" line="249"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5968" vname="ret"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="op"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="5" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;could not get memory&quot;">
       <constant ctag="cstr" strValue="could not get memory"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="6" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;could not get memory&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;could not get memory&quot;">
        <constant ctag="cstr" strValue="could not get memory"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="7" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;could not get memory&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;could not get memory&quot;">
        <constant ctag="cstr" strValue="could not get memory"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="8" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;could not get memory&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;could not get memory&quot;">
        <constant ctag="cstr" strValue="could not get memory"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="9" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="10" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="11" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="0">
     <location byte="190446" file="src/util.c" line="250"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="159"/>
       <node name="if-then"/>
       <node name="stmt" num="158"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="14" origin="prim-exp" p-complexity="0">
     <location byte="190496" file="src/util.c" line="252"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5968" vname="ret"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="160"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="15" origin="prim-exp" p-complexity="1">
     <location byte="190496" file="src/util.c" line="252"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="ret">
       <lval>
        <lhost>
         <var vid="5968" vname="ret"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="160"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="16" origin="prim-exp" p-complexity="1">
     <location byte="190496" file="src/util.c" line="252"/>
     <predicate tag="global-mem">
      <exp etag="lval" xstr="ret">
       <lval>
        <lhost>
         <var vid="5968" vname="ret"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="160"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="17" origin="prim-exp" p-complexity="1">
     <location byte="190496" file="src/util.c" line="252"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="ret">
       <lval>
        <lhost>
         <var vid="5968" vname="ret"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="160"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="18" origin="prim-exp" p-complexity="1">
     <location byte="190496" file="src/util.c" line="252"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="ret">
       <lval>
        <lhost>
         <var vid="5968" vname="ret"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tvoid"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="160"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
