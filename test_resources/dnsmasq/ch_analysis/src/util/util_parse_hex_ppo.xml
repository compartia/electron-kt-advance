<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="parse_hex">
   <statistics avg-context-complexity="10.16" avg-predicate-complexity="1.63" context-complexity="3090" predicate-complexity="495" size="304"/>
   <unconstrained-external-functions/>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" id="1" origin="prim-exp" p-complexity="0">
     <location byte="194947" file="src/util.c" line="461"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6082" vname="mac_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="2" origin="prim-exp" p-complexity="0">
     <location byte="194965" file="src/util.c" line="462"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6082" vname="mac_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="3" origin="prim-lval" p-complexity="1">
     <location byte="194965" file="src/util.c" line="462"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="4" origin="prim-lval" p-complexity="1">
     <location byte="194965" file="src/util.c" line="462"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="5" origin="prim-lval" p-complexity="1">
     <location byte="194965" file="src/util.c" line="462"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="6" origin="prim-lval" p-complexity="1">
     <location byte="194965" file="src/util.c" line="462"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="267"/>
       <node name="if-then"/>
       <node name="stmt" num="266"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="7" origin="prim-exp" p-complexity="0">
     <location byte="194983" file="src/util.c" line="464"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6080" vname="maxlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="269"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="8" origin="prim-exp" p-complexity="0">
     <location byte="194983" file="src/util.c" line="464"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="270"/>
       <node name="if-else"/>
       <node name="stmt" num="269"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="9" origin="prim-exp" p-complexity="0">
     <location byte="194983" file="src/util.c" line="464"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6080" vname="maxlen"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="270"/>
       <node name="if-else"/>
       <node name="stmt" num="269"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="10" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="272"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="11" origin="prim-exp" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="12" origin="prim-exp" p-complexity="6">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="13" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="14" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="15" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="16" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="17" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="18" origin="prim-exp" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="19" origin="prim-exp" p-complexity="6">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="20" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="21" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="22" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="23" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="24" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="25" origin="prim-exp" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="26" origin="prim-exp" p-complexity="6">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="27" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="28" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="29" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="30" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="12" id="31" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="32" origin="prim-exp" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="33" origin="prim-exp" p-complexity="6">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="34" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="35" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="36" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="37" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="38" origin="prim-lval" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="277"/>
       <node name="if-then"/>
       <node name="stmt" num="276"/>
       <node name="if-then"/>
       <node name="stmt" num="275"/>
       <node name="if-then"/>
       <node name="stmt" num="274"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="39" origin="prim-exp" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="40" origin="prim-exp" p-complexity="6">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="41" origin="prim-exp" p-complexity="0">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="42" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="43" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="44" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="45" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="46" origin="prim-exp" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate from="iushort" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="lval" xstr="*(((lval (*(lval (tmp))) +i caste (caste (lval (*(lval (r))):unsigned char):int)):(unsigned short*))">
       <lval>
        <lhost>
         <mem binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
          <exp1 etag="lval" xstr="(*tmp)">
           <lval>
            <lhost>
             <mem etag="lval" xstr="tmp">
              <lval>
               <lhost>
                <var vid="6086" vname="tmp"/>
               </lhost>
              </lval>
             </mem>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
           <typ ikind="iint" ttag="tint"/>
           <exp etag="caste" xstr="caste ((*r):unsigned char)">
            <typ ikind="iuchar" ttag="tint"/>
            <exp etag="lval" xstr="(*r)">
             <lval>
              <lhost>
               <mem etag="lval" xstr="r">
                <lval>
                 <lhost>
                  <var vid="6085" vname="r"/>
                 </lhost>
                </lval>
               </mem>
              </lhost>
             </lval>
            </exp>
           </exp>
          </exp2>
          <typ ttag="tptr">
           <typ ikind="iushort" ttag="tint">
            <attributes>
             <attr attrname="const"/>
            </attributes>
           </typ>
          </typ>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="47" origin="prim-exp" p-complexity="8">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
         <exp1 etag="lval" xstr="(*tmp)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="tmp">
             <lval>
              <lhost>
               <var vid="6086" vname="tmp"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
          <typ ikind="iint" ttag="tint"/>
          <exp etag="caste" xstr="caste ((*r):unsigned char)">
           <typ ikind="iuchar" ttag="tint"/>
           <exp etag="lval" xstr="(*r)">
            <lval>
             <lhost>
              <mem etag="lval" xstr="r">
               <lval>
                <lhost>
                 <var vid="6085" vname="r"/>
                </lhost>
               </lval>
              </mem>
             </lhost>
            </lval>
           </exp>
          </exp>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="iushort" ttag="tint">
           <attributes>
            <attr attrname="const"/>
           </attributes>
          </typ>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="48" origin="prim-exp" p-complexity="6">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="tmp">
         <lval>
          <lhost>
           <var vid="6086" vname="tmp"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="49" origin="prim-exp" p-complexity="0">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6086" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="50" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6086" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="51" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6086" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="52" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6086" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ikind="iushort" ttag="tint">
        <attributes>
         <attr attrname="const"/>
        </attributes>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="53" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="tmp">
       <lval>
        <lhost>
         <var vid="6086" vname="tmp"/>
        </lhost>
       </lval>
      </exp>
      <typ ttag="tptr">
       <typ ikind="iushort" ttag="tint">
        <attributes>
         <attr attrname="const"/>
        </attributes>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="54" origin="prim-exp" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate from="iuchar" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="caste" xstr="caste ((*r):unsigned char)">
       <typ ikind="iuchar" ttag="tint"/>
       <exp etag="lval" xstr="(*r)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="r">
           <lval>
            <lhost>
             <var vid="6085" vname="r"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="55" origin="prim-exp" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="56" origin="prim-exp" p-complexity="6">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="57" origin="prim-exp" p-complexity="0">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="58" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="59" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="60" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="61" origin="prim-lval" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="cast"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="62" origin="prim-op" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="(*tmp)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="tmp">
          <lval>
           <lhost>
            <var vid="6086" vname="tmp"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="63" origin="prim-op" p-complexity="1">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="(*tmp)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="tmp">
          <lval>
           <lhost>
            <var vid="6086" vname="tmp"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="64" origin="prim-op" p-complexity="3">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iushort" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="lval" xstr="(*tmp)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="tmp">
          <lval>
           <lhost>
            <var vid="6086" vname="tmp"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="caste" xstr="caste ((*r):unsigned char)">
        <typ ikind="iuchar" ttag="tint"/>
        <exp etag="lval" xstr="(*r)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="r">
            <lval>
             <lhost>
              <var vid="6085" vname="r"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="65" origin="prim-op" p-complexity="2">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iushort" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="lval" xstr="(*tmp)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="tmp">
          <lval>
           <lhost>
            <var vid="6086" vname="tmp"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
       <typ ikind="iint" ttag="tint"/>
       <exp etag="caste" xstr="caste ((*r):unsigned char)">
        <typ ikind="iuchar" ttag="tint"/>
        <exp etag="lval" xstr="(*r)">
         <lval>
          <lhost>
           <mem etag="lval" xstr="r">
            <lval>
             <lhost>
              <var vid="6085" vname="r"/>
             </lhost>
            </lval>
           </mem>
          </lhost>
         </lval>
        </exp>
       </exp>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="66" origin="prim-lval" p-complexity="3">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
       <exp1 etag="lval" xstr="(*tmp)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="tmp">
           <lval>
            <lhost>
             <var vid="6086" vname="tmp"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="caste" xstr="caste ((*r):unsigned char)">
         <typ ikind="iuchar" ttag="tint"/>
         <exp etag="lval" xstr="(*r)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="r">
             <lval>
              <lhost>
               <var vid="6085" vname="r"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
          </lval>
         </exp>
        </exp>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iushort" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="67" origin="prim-lval" p-complexity="3">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
       <exp1 etag="lval" xstr="(*tmp)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="tmp">
           <lval>
            <lhost>
             <var vid="6086" vname="tmp"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="caste" xstr="caste ((*r):unsigned char)">
         <typ ikind="iuchar" ttag="tint"/>
         <exp etag="lval" xstr="(*r)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="r">
             <lval>
              <lhost>
               <var vid="6085" vname="r"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
          </lval>
         </exp>
        </exp>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iushort" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="68" origin="prim-lval" p-complexity="3">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
       <exp1 etag="lval" xstr="(*tmp)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="tmp">
           <lval>
            <lhost>
             <var vid="6086" vname="tmp"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="caste" xstr="caste ((*r):unsigned char)">
         <typ ikind="iuchar" ttag="tint"/>
         <exp etag="lval" xstr="(*r)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="r">
             <lval>
              <lhost>
               <var vid="6085" vname="r"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
          </lval>
         </exp>
        </exp>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iushort" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iushort" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="11" id="69" origin="prim-lval" p-complexity="3">
     <location byte="195097" file="src/util.c" line="467"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="(((*tmp) +i caste (caste ((*r):unsigned char):int)):(unsigned short*)">
       <exp1 etag="lval" xstr="(*tmp)">
        <lval>
         <lhost>
          <mem etag="lval" xstr="tmp">
           <lval>
            <lhost>
             <var vid="6086" vname="tmp"/>
            </lhost>
           </lval>
          </mem>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="caste" xstr="caste (caste ((*r):unsigned char):int)">
        <typ ikind="iint" ttag="tint"/>
        <exp etag="caste" xstr="caste ((*r):unsigned char)">
         <typ ikind="iuchar" ttag="tint"/>
         <exp etag="lval" xstr="(*r)">
          <lval>
           <lhost>
            <mem etag="lval" xstr="r">
             <lval>
              <lhost>
               <var vid="6085" vname="r"/>
              </lhost>
             </lval>
            </mem>
           </lhost>
          </lval>
         </exp>
        </exp>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iushort" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
      </exp>
      <typ ikind="iushort" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="284"/>
       <node name="if-then"/>
       <node name="stmt" num="282"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="70" origin="prim-exp" p-complexity="0">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="286"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="71" origin="prim-op" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="286"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="72" origin="prim-op" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="286"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="73" origin="prim-op" p-complexity="2">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="286"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="10" id="74" origin="prim-op" p-complexity="1">
     <location byte="195030" file="src/util.c" line="466"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="286"/>
       <node name="loop"/>
       <node name="stmt" num="273"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="75" origin="prim-exp" p-complexity="1">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="76" origin="prim-exp" p-complexity="6">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="77" origin="prim-exp" p-complexity="0">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="78" origin="prim-lval" p-complexity="1">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="79" origin="prim-lval" p-complexity="1">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="80" origin="prim-lval" p-complexity="1">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="81" origin="prim-lval" p-complexity="1">
     <location byte="195221" file="src/util.c" line="470"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="82" origin="prim-exp" p-complexity="0">
     <location byte="195235" file="src/util.c" line="471"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="288"/>
       <node name="if-then"/>
       <node name="stmt" num="287"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="83" origin="prim-exp" p-complexity="1">
     <location byte="195254" file="src/util.c" line="473"/>
     <predicate tag="cast">
      <tfrom ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </tfrom>
      <tto ikind="iulong" ttag="tint"/>
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="84" origin="prim-exp" p-complexity="0">
     <location byte="195254" file="src/util.c" line="473"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="85" origin="prim-exp" p-complexity="1">
     <location byte="195254" file="src/util.c" line="473"/>
     <predicate tag="cast">
      <tfrom ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </tfrom>
      <tto ikind="iulong" ttag="tint"/>
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="86" origin="prim-exp" p-complexity="0">
     <location byte="195254" file="src/util.c" line="473"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="87" origin="prim-exp" p-complexity="1">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="(*r)">
       <lval>
        <lhost>
         <mem etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </mem>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="88" origin="prim-exp" p-complexity="6">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="89" origin="prim-exp" p-complexity="0">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="90" origin="prim-lval" p-complexity="1">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="91" origin="prim-lval" p-complexity="1">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="92" origin="prim-lval" p-complexity="1">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="6" id="93" origin="prim-lval" p-complexity="1">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="cast"/>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="94" origin="prim-exp" p-complexity="0">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="95" origin="prim-exp" p-complexity="0">
     <location byte="195274" file="src/util.c" line="475"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6082" vname="mac_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="96" origin="prim-exp" p-complexity="0">
     <location byte="195324" file="src/util.c" line="477"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="97" origin="prim-lval" p-complexity="1">
     <location byte="195324" file="src/util.c" line="477"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="98" origin="prim-lval" p-complexity="1">
     <location byte="195324" file="src/util.c" line="477"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="99" origin="prim-lval" p-complexity="1">
     <location byte="195324" file="src/util.c" line="477"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="100" origin="prim-lval" p-complexity="1">
     <location byte="195324" file="src/util.c" line="477"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="101" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="102" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="103" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="104" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (in___0:(char*))]">
       <arg etag="caste" xstr="caste (in___0:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="105" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (in___0:(char*))]">
       <arg etag="caste" xstr="caste (in___0:(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="106" name="no-overlap" origin="f-pre" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <attributes>
        <attr attrname="restrict"/>
       </attributes>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="107" name="no-overlap" origin="f-pre" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <attributes>
        <attr attrname="restrict"/>
       </attributes>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" fname="strtol" id="108" name="no-overlap" origin="f-pre" p-complexity="2">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="*(caste (caste (0:(void*)):((char*)*)))">
       <lval>
        <lhost>
         <mem etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
          <typ ttag="tptr">
           <attributes>
            <attr attrname="restrict"/>
           </attributes>
           <typ ttag="tptr">
            <typ ikind="ichar" ttag="tint"/>
           </typ>
          </typ>
          <exp etag="caste" xstr="caste (0:(void*))">
           <typ ttag="tptr">
            <typ ttag="tvoid"/>
           </typ>
           <exp etag="const" xstr="0">
            <constant ctag="cint64" ikind="iint" intValue="0"/>
           </exp>
          </exp>
         </mem>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="109" origin="prim-exp" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="110" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="111" origin="prim-exp" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="112" origin="prim-exp" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="113" origin="prim-exp" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="114" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </tto>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="115" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="116" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="117" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="118" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="119" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6082" vname="mac_type"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="120" origin="prim-lval" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="121" origin="prim-lval" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="122" origin="prim-lval" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="123" origin="prim-lval" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="mac_type">
       <lval>
        <lhost>
         <var vid="6082" vname="mac_type"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="124" origin="prim-exp" p-complexity="1">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="lval" xstr="tmp___0">
       <lval>
        <lhost>
         <var vid="6088" vname="tmp___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="125" origin="prim-exp" p-complexity="0">
     <location byte="195339" file="src/util.c" line="478"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6088" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="126" origin="prim-exp" p-complexity="0">
     <location byte="195387" file="src/util.c" line="479"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="iint" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="9" id="127" origin="prim-exp" p-complexity="0">
     <location byte="195387" file="src/util.c" line="479"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="293"/>
       <node name="if-then"/>
       <node name="stmt" num="292"/>
       <node name="if-then"/>
       <node name="stmt" num="291"/>
       <node name="if-then"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="128" origin="prim-exp" p-complexity="0">
     <location byte="195439" file="src/util.c" line="483"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="129" origin="prim-lval" p-complexity="1">
     <location byte="195439" file="src/util.c" line="483"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="130" origin="prim-lval" p-complexity="1">
     <location byte="195439" file="src/util.c" line="483"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="131" origin="prim-lval" p-complexity="1">
     <location byte="195439" file="src/util.c" line="483"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="132" origin="prim-lval" p-complexity="1">
     <location byte="195439" file="src/util.c" line="483"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="133" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="not-null">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="s2" nr="2" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="134" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="null-terminated">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="s2" nr="2" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="135" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="s2" nr="2" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="136" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;*&quot;]">
       <arg etag="const" xstr="&quot;*&quot;">
        <constant ctag="cstr" strValue="*"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="s2" nr="2" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="137" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="initialized-range">
      <base-exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;*&quot;]">
       <arg etag="const" xstr="&quot;*&quot;">
        <constant ctag="cstr" strValue="*"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="s2" nr="2" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s2</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s2</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="138" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s1" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="139" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s1" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="140" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s1" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="141" name="deref-read-nt" origin="f-pre" p-complexity="2">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (in___0:(char*))]">
       <arg etag="caste" xstr="caste (in___0:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s1" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" fname="strcmp" id="142" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (in___0:(char*))]">
       <arg etag="caste" xstr="caste (in___0:(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s1" nr="1" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s1</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s1</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="143" origin="prim-exp" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="144" origin="prim-exp" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="145" origin="prim-exp" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="146" origin="prim-exp" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="147" origin="prim-exp" p-complexity="1">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (in___0:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="148" origin="prim-exp" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="149" origin="prim-exp" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="150" origin="prim-exp" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;*&quot;">
       <constant ctag="cstr" strValue="*"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="296"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="7" id="151" origin="prim-exp" p-complexity="0">
     <location byte="195454" file="src/util.c" line="484"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6097" vname="tmp___3"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="152" origin="prim-exp" p-complexity="0">
     <location byte="195488" file="src/util.c" line="486"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6083" vname="mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="153" origin="prim-op" p-complexity="0">
     <location byte="195488" file="src/util.c" line="486"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="154" origin="prim-op" p-complexity="1">
     <location byte="195488" file="src/util.c" line="486"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="155" origin="prim-exp" p-complexity="0">
     <location byte="195516" file="src/util.c" line="487"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="156" origin="prim-op" p-complexity="2">
     <location byte="195516" file="src/util.c" line="487"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="157" origin="prim-op" p-complexity="2">
     <location byte="195516" file="src/util.c" line="487"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="298"/>
       <node name="if-then"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="158" origin="prim-exp" p-complexity="5">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="cast">
      <tfrom ikind="ilong" ttag="tint"/>
      <tto ikind="iint" ttag="tint"/>
      <exp binop="div" etag="binop" xstr="((((1 + ((r -p in___0):long):long / 2):long">
       <exp1 binop="plusa" etag="binop" xstr="((1 + ((r -p in___0):long):long">
        <exp1 etag="const" xstr="1">
         <constant ctag="cint64" ikind="ilong" intValue="1"/>
        </exp1>
        <exp2 binop="minuspp" etag="binop" xstr="((r -p in___0):long">
         <exp1 etag="lval" xstr="r">
          <lval>
           <lhost>
            <var vid="6085" vname="r"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp2>
         <typ ikind="ilong" ttag="tint"/>
        </exp2>
        <typ ikind="ilong" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="ilong" intValue="2"/>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="159" origin="prim-exp" p-complexity="0">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="160" origin="prim-exp" p-complexity="0">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="161" origin="prim-op" p-complexity="1">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="162" origin="prim-op" p-complexity="1">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="163" origin="prim-op" p-complexity="1">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="164" origin="prim-op" p-complexity="1">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="165" origin="prim-op" p-complexity="2">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="common-base">
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="166" origin="prim-op" p-complexity="2">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="common-base-type">
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="167" origin="prim-op" p-complexity="4">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate op="plusa" size="ilong" tag="int-underflow">
      <exp1 etag="const" xstr="1">
       <constant ctag="cint64" ikind="ilong" intValue="1"/>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((r -p in___0):long">
       <exp1 etag="lval" xstr="r">
        <lval>
         <lhost>
          <var vid="6085" vname="r"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="168" origin="prim-op" p-complexity="4">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate op="plusa" size="ilong" tag="int-overflow">
      <exp1 etag="const" xstr="1">
       <constant ctag="cint64" ikind="ilong" intValue="1"/>
      </exp1>
      <exp2 binop="minuspp" etag="binop" xstr="((r -p in___0):long">
       <exp1 etag="lval" xstr="r">
        <lval>
         <lhost>
          <var vid="6085" vname="r"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="169" origin="prim-op" p-complexity="5">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate op="div" size="ilong" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((1 + ((r -p in___0):long):long">
       <exp1 etag="const" xstr="1">
        <constant ctag="cint64" ikind="ilong" intValue="1"/>
       </exp1>
       <exp2 binop="minuspp" etag="binop" xstr="((r -p in___0):long">
        <exp1 etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="ilong" ttag="tint"/>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="ilong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="170" origin="prim-op" p-complexity="5">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate op="div" size="ilong" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((1 + ((r -p in___0):long):long">
       <exp1 etag="const" xstr="1">
        <constant ctag="cint64" ikind="ilong" intValue="1"/>
       </exp1>
       <exp2 binop="minuspp" etag="binop" xstr="((r -p in___0):long">
        <exp1 etag="lval" xstr="r">
         <lval>
          <lhost>
           <var vid="6085" vname="r"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp2>
        <typ ikind="ilong" ttag="tint"/>
       </exp2>
       <typ ikind="ilong" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="ilong" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="8" id="171" origin="prim-op" p-complexity="0">
     <location byte="195545" file="src/util.c" line="491"/>
     <predicate tag="not-zero">
      <exp etag="const" xstr="2">
       <constant ctag="cint64" ikind="ilong" intValue="2"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="299"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="172" origin="prim-exp" p-complexity="0">
     <location byte="195582" file="src/util.c" line="492"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="301"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="173" origin="prim-exp" p-complexity="0">
     <location byte="195582" file="src/util.c" line="492"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6090" vname="bytes"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="301"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="174" origin="prim-exp" p-complexity="0">
     <location byte="195626" file="src/util.c" line="494"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6091" vname="sav"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="303"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="175" origin="prim-exp" p-complexity="0">
     <location byte="195650" file="src/util.c" line="495"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="176" origin="prim-exp" p-complexity="0">
     <location byte="195650" file="src/util.c" line="495"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6090" vname="bytes"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="177" origin="prim-op" p-complexity="2">
     <location byte="195650" file="src/util.c" line="495"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="6090" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="178" origin="prim-op" p-complexity="2">
     <location byte="195650" file="src/util.c" line="495"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="6090" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="179" origin="prim-exp" p-complexity="10">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <mem binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
         <exp1 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
          <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
           <exp1 etag="lval" xstr="j">
            <lval>
             <lhost>
              <var vid="6089" vname="j"/>
             </lhost>
            </lval>
           </exp1>
           <exp2 etag="const" xstr="1">
            <constant ctag="cint64" ikind="iint" intValue="1"/>
           </exp2>
           <typ ikind="iint" ttag="tint"/>
          </exp1>
          <exp2 etag="const" xstr="2">
           <constant ctag="cint64" ikind="iint" intValue="2"/>
          </exp2>
          <typ ikind="iint" ttag="tint"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </mem>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="180" origin="prim-exp" p-complexity="0">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="181" origin="prim-exp" p-complexity="0">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="182" origin="prim-op" p-complexity="2">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="183" origin="prim-op" p-complexity="2">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="184" origin="prim-op" p-complexity="3">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="185" origin="prim-op" p-complexity="3">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="186" origin="prim-op" p-complexity="1">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="187" origin="prim-op" p-complexity="1">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="188" origin="prim-op" p-complexity="5">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="189" origin="prim-op" p-complexity="4">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="190" origin="prim-lval" p-complexity="5">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="191" origin="prim-lval" p-complexity="5">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="192" origin="prim-lval" p-complexity="5">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="193" origin="prim-lval" p-complexity="5">
     <location byte="195679" file="src/util.c" line="497"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lval"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="194" origin="prim-exp" p-complexity="0">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="195" origin="prim-exp" p-complexity="0">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="196" origin="prim-op" p-complexity="2">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="197" origin="prim-op" p-complexity="2">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="198" origin="prim-op" p-complexity="3">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="199" origin="prim-op" p-complexity="3">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="200" origin="prim-op" p-complexity="1">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="201" origin="prim-op" p-complexity="1">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="202" origin="prim-op" p-complexity="5">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="203" origin="prim-op" p-complexity="4">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="204" origin="prim-lval" p-complexity="5">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="205" origin="prim-lval" p-complexity="5">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="206" origin="prim-lval" p-complexity="5">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="207" origin="prim-lval" p-complexity="5">
     <location byte="195703" file="src/util.c" line="498"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="305"/>
       <node name="if-then"/>
       <node name="stmt" num="304"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strchr" id="208" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strchr" id="209" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strchr" id="210" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strchr" id="211" name="deref-read-nt" origin="f-pre" p-complexity="5">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((in___0 +i ((j * 2):int):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
         <exp1 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
          <exp1 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6089" vname="j"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="2">
           <constant ctag="cint64" ikind="iint" intValue="2"/>
          </exp2>
          <typ ikind="iint" ttag="tint"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strchr" id="212" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((in___0 +i ((j * 2):int):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
         <exp1 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
          <exp1 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6089" vname="j"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="2">
           <constant ctag="cint64" ikind="iint" intValue="2"/>
          </exp2>
          <typ ikind="iint" ttag="tint"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="s" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>s</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>s</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="213" origin="prim-exp" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="214" origin="prim-exp" p-complexity="0">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="215" origin="prim-exp" p-complexity="0">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="216" origin="prim-op" p-complexity="2">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="217" origin="prim-op" p-complexity="2">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="218" origin="prim-op" p-complexity="1">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="219" origin="prim-op" p-complexity="1">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="220" origin="prim-op" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="221" origin="prim-op" p-complexity="3">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="222" origin="prim-exp" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="223" origin="prim-exp" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="224" origin="prim-exp" p-complexity="4">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="306"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="225" origin="prim-exp" p-complexity="0">
     <location byte="195735" file="src/util.c" line="502"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6093" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="307"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="226" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="not-null">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="227" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="null-terminated">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="228" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="229" name="deref-read-nt" origin="f-pre" p-complexity="5">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
      <exp1 etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((in___0 +i ((j * 2):int):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
         <exp1 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
          <exp1 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6089" vname="j"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="2">
           <constant ctag="cint64" ikind="iint" intValue="2"/>
          </exp2>
          <typ ikind="iint" ttag="tint"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="230" name="deref-read-nt" origin="f-pre" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized-range">
      <base-exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[caste (((in___0 +i ((j * 2):int):(char*):(char*))]">
       <arg etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
        <typ ttag="tptr">
         <attributes>
          <attr attrname="restrict"/>
         </attributes>
         <typ ikind="ichar" ttag="tint">
          <attributes>
           <attr attrname="const"/>
          </attributes>
         </typ>
        </typ>
        <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
         <exp1 etag="lval" xstr="in___0">
          <lval>
           <lhost>
            <var vid="6077" vname="in___0"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
          <exp1 etag="lval" xstr="j">
           <lval>
            <lhost>
             <var vid="6089" vname="j"/>
            </lhost>
           </lval>
          </exp1>
          <exp2 etag="const" xstr="2">
           <constant ctag="cint64" ikind="iint" intValue="2"/>
          </exp2>
          <typ ikind="iint" ttag="tint"/>
         </exp2>
         <typ ttag="tptr">
          <typ ikind="ichar" ttag="tint"/>
         </typ>
        </exp>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>str</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>str</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="231" name="no-overlap" origin="f-pre" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <attributes>
        <attr attrname="restrict"/>
       </attributes>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="232" name="no-overlap" origin="f-pre" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <attributes>
        <attr attrname="restrict"/>
       </attributes>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" fname="strtol" id="233" name="no-overlap" origin="f-pre" p-complexity="5">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="no-overlap">
      <exp1 etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp1>
      <exp2 etag="lval" xstr="*(caste (caste (0:(void*)):((char*)*)))">
       <lval>
        <lhost>
         <mem etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
          <typ ttag="tptr">
           <attributes>
            <attr attrname="restrict"/>
           </attributes>
           <typ ttag="tptr">
            <typ ikind="ichar" ttag="tint"/>
           </typ>
          </typ>
          <exp etag="caste" xstr="caste (0:(void*))">
           <typ ttag="tptr">
            <typ ttag="tvoid"/>
           </typ>
           <exp etag="const" xstr="0">
            <constant ctag="cint64" ikind="iint" intValue="0"/>
           </exp>
          </exp>
         </mem>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="caste" name="endptr" nr="2" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <exp etag="caste" name="str" nr="1" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </args>
     <precondition name="no-overlap">
      <math>
       <apply>
        <no-overlap/>
        <ci>str</ci>
        <apply>
         <addressed-value/>
         <ci>endptr</ci>
         <cn>0</cn>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="234" origin="prim-exp" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </tto>
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="235" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="236" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="237" origin="prim-op" p-complexity="2">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="238" origin="prim-op" p-complexity="2">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="239" origin="prim-op" p-complexity="1">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="240" origin="prim-op" p-complexity="1">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="241" origin="prim-op" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="242" origin="prim-op" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="243" origin="prim-exp" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="244" origin="prim-exp" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="245" origin="prim-exp" p-complexity="4">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (((in___0 +i ((j * 2):int):(char*):(char*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ikind="ichar" ttag="tint">
         <attributes>
          <attr attrname="const"/>
         </attributes>
        </typ>
       </typ>
       <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((j * 2):int):(char*)">
        <exp1 etag="lval" xstr="in___0">
         <lval>
          <lhost>
           <var vid="6077" vname="in___0"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 binop="mult" etag="binop" xstr="((j * 2):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="2">
          <constant ctag="cint64" ikind="iint" intValue="2"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp2>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint">
       <attributes>
        <attr attrname="const"/>
       </attributes>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="246" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </tto>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="247" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="248" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="249" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="250" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):((char*)*))">
       <typ ttag="tptr">
        <attributes>
         <attr attrname="restrict"/>
        </attributes>
        <typ ttag="tptr">
         <typ ikind="ichar" ttag="tint"/>
        </typ>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ttag="tptr">
       <typ ikind="ichar" ttag="tint"/>
      </typ>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="251" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6079" vname="out___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="252" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="253" origin="prim-op" p-complexity="1">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="out___0">
       <lval>
        <lhost>
         <var vid="6079" vname="out___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="254" origin="prim-op" p-complexity="1">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="out___0">
       <lval>
        <lhost>
         <var vid="6079" vname="out___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="255" origin="prim-op" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="out___0">
       <lval>
        <lhost>
         <var vid="6079" vname="out___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="256" origin="prim-op" p-complexity="2">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="iuchar" ttag="tint"/>
      <exp1 etag="lval" xstr="out___0">
       <lval>
        <lhost>
         <var vid="6079" vname="out___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="257" origin="prim-lval" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((out___0 +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="out___0">
        <lval>
         <lhost>
          <var vid="6079" vname="out___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6084" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="258" origin="prim-lval" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((out___0 +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="out___0">
        <lval>
         <lhost>
          <var vid="6079" vname="out___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6084" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="259" origin="prim-lval" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((out___0 +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="out___0">
        <lval>
         <lhost>
          <var vid="6079" vname="out___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6084" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="260" origin="prim-lval" p-complexity="3">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((out___0 +i i):(unsigned char*)">
       <exp1 etag="lval" xstr="out___0">
        <lval>
         <lhost>
          <var vid="6079" vname="out___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="lval" xstr="i">
        <lval>
         <lhost>
          <var vid="6084" vname="i"/>
         </lhost>
        </lval>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="261" origin="prim-exp" p-complexity="1">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate from="ilong" tag="signed-to-unsigned-cast" to="iuchar">
      <exp etag="lval" xstr="tmp___2">
       <lval>
        <lhost>
         <var vid="6095" vname="tmp___2"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="262" origin="prim-exp" p-complexity="0">
     <location byte="195784" file="src/util.c" line="504"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6095" vname="tmp___2"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="263" origin="prim-exp" p-complexity="0">
     <location byte="195836" file="src/util.c" line="505"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6083" vname="mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="264" origin="prim-op" p-complexity="0">
     <location byte="195836" file="src/util.c" line="505"/>
     <predicate tag="non-negative">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="265" origin="prim-op" p-complexity="1">
     <location byte="195836" file="src/util.c" line="505"/>
     <predicate size="iint" tag="width-overflow">
      <exp etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="2"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="266" origin="prim-exp" p-complexity="0">
     <location byte="195862" file="src/util.c" line="506"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="267" origin="prim-op" p-complexity="2">
     <location byte="195862" file="src/util.c" line="506"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="268" origin="prim-op" p-complexity="2">
     <location byte="195862" file="src/util.c" line="506"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="i">
       <lval>
        <lhost>
         <var vid="6084" vname="i"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="3"/>
       <node name="stmt" num="309"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="269" origin="prim-exp" p-complexity="0">
     <location byte="195875" file="src/util.c" line="507"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="270" origin="prim-exp" p-complexity="0">
     <location byte="195875" file="src/util.c" line="507"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6090" vname="bytes"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="271" origin="prim-op" p-complexity="2">
     <location byte="195875" file="src/util.c" line="507"/>
     <predicate op="minusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="6090" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="272" origin="prim-op" p-complexity="2">
     <location byte="195875" file="src/util.c" line="507"/>
     <predicate op="minusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="bytes">
       <lval>
        <lhost>
         <var vid="6090" vname="bytes"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="273" origin="prim-exp" p-complexity="0">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6077" vname="in___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="274" origin="prim-exp" p-complexity="0">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="275" origin="prim-op" p-complexity="2">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="276" origin="prim-op" p-complexity="2">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="277" origin="prim-op" p-complexity="3">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="mult" size="iint" tag="int-underflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="278" origin="prim-op" p-complexity="3">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="mult" size="iint" tag="int-overflow">
      <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
       <exp1 etag="lval" xstr="j">
        <lval>
         <lhost>
          <var vid="6089" vname="j"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 etag="const" xstr="1">
        <constant ctag="cint64" ikind="iint" intValue="1"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp1>
      <exp2 etag="const" xstr="2">
       <constant ctag="cint64" ikind="iint" intValue="2"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="2"/>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="279" origin="prim-op" p-complexity="1">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="280" origin="prim-op" p-complexity="1">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="281" origin="prim-op" p-complexity="5">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="indexpi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="282" origin="prim-op" p-complexity="4">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate op="indexpi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="in___0">
       <lval>
        <lhost>
         <var vid="6077" vname="in___0"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
       <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
        <exp1 etag="lval" xstr="j">
         <lval>
          <lhost>
           <var vid="6089" vname="j"/>
          </lhost>
         </lval>
        </exp1>
        <exp2 etag="const" xstr="1">
         <constant ctag="cint64" ikind="iint" intValue="1"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp1>
       <exp2 etag="const" xstr="2">
        <constant ctag="cint64" ikind="iint" intValue="2"/>
       </exp2>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="283" origin="prim-lval" p-complexity="5">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="not-null">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="284" origin="prim-lval" p-complexity="5">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="valid-mem">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="285" origin="prim-lval" p-complexity="5">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="lower-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="286" origin="prim-lval" p-complexity="5">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="upper-bound">
      <exp binop="indexpi" etag="binop" xstr="((in___0 +i ((((j + 1):int * 2):int):(char*)">
       <exp1 etag="lval" xstr="in___0">
        <lval>
         <lhost>
          <var vid="6077" vname="in___0"/>
         </lhost>
        </lval>
       </exp1>
       <exp2 binop="mult" etag="binop" xstr="((((j + 1):int * 2):int">
        <exp1 binop="plusa" etag="binop" xstr="((j + 1):int">
         <exp1 etag="lval" xstr="j">
          <lval>
           <lhost>
            <var vid="6089" vname="j"/>
           </lhost>
          </lval>
         </exp1>
         <exp2 etag="const" xstr="1">
          <constant ctag="cint64" ikind="iint" intValue="1"/>
         </exp2>
         <typ ikind="iint" ttag="tint"/>
        </exp1>
        <exp2 etag="const" xstr="2">
         <constant ctag="cint64" ikind="iint" intValue="2"/>
        </exp2>
        <typ ikind="iint" ttag="tint"/>
       </exp2>
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="14" id="287" origin="prim-exp" p-complexity="0">
     <location byte="195897" file="src/util.c" line="508"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6091" vname="sav"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="311"/>
       <node name="if-then"/>
       <node name="stmt" num="310"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="288" origin="prim-exp" p-complexity="0">
     <location byte="195582" file="src/util.c" line="492"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6089" vname="j"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="312"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="289" origin="prim-op" p-complexity="2">
     <location byte="195582" file="src/util.c" line="492"/>
     <predicate op="plusa" size="iint" tag="int-underflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="312"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="13" id="290" origin="prim-op" p-complexity="2">
     <location byte="195582" file="src/util.c" line="492"/>
     <predicate op="plusa" size="iint" tag="int-overflow">
      <exp1 etag="lval" xstr="j">
       <lval>
        <lhost>
         <var vid="6089" vname="j"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="312"/>
       <node name="loop"/>
       <node name="stmt" num="300"/>
       <node name="if-else"/>
       <node name="stmt" num="297"/>
       <node name="if-else"/>
       <node name="stmt" num="290"/>
       <node name="if-then"/>
       <node name="stmt" num="289"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="291" origin="prim-exp" p-complexity="0">
     <location byte="195944" file="src/util.c" line="513"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6085" vname="r"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="313"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="292" origin="prim-op" p-complexity="1">
     <location byte="195944" file="src/util.c" line="513"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="313"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="293" origin="prim-op" p-complexity="1">
     <location byte="195944" file="src/util.c" line="513"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="313"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="294" origin="prim-op" p-complexity="2">
     <location byte="195944" file="src/util.c" line="513"/>
     <predicate op="pluspi" tag="ptr-lower-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="313"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="5" id="295" origin="prim-op" p-complexity="1">
     <location byte="195944" file="src/util.c" line="513"/>
     <predicate op="pluspi" tag="ptr-upper-bound-deref">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="lval" xstr="r">
       <lval>
        <lhost>
         <var vid="6085" vname="r"/>
        </lhost>
       </lval>
      </exp1>
      <exp2 etag="const" xstr="1">
       <constant ctag="cint64" ikind="iint" intValue="1"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="313"/>
       <node name="loop"/>
       <node name="stmt" num="268"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="296" origin="prim-exp" p-complexity="0">
     <location byte="195963" file="src/util.c" line="516"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6081" vname="wildcard_mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="297" origin="prim-exp" p-complexity="0">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6081" vname="wildcard_mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="298" origin="prim-lval" p-complexity="1">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="not-null">
      <exp etag="lval" xstr="wildcard_mask">
       <lval>
        <lhost>
         <var vid="6081" vname="wildcard_mask"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="299" origin="prim-lval" p-complexity="1">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="valid-mem">
      <exp etag="lval" xstr="wildcard_mask">
       <lval>
        <lhost>
         <var vid="6081" vname="wildcard_mask"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="300" origin="prim-lval" p-complexity="1">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="lower-bound">
      <exp etag="lval" xstr="wildcard_mask">
       <lval>
        <lhost>
         <var vid="6081" vname="wildcard_mask"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="301" origin="prim-lval" p-complexity="1">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="upper-bound">
      <exp etag="lval" xstr="wildcard_mask">
       <lval>
        <lhost>
         <var vid="6081" vname="wildcard_mask"/>
        </lhost>
       </lval>
      </exp>
      <typ ikind="iuint" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="mem"/>
       <node name="lhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="302" origin="prim-exp" p-complexity="1">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate from="iint" tag="signed-to-unsigned-cast" to="iuint">
      <exp etag="lval" xstr="mask">
       <lval>
        <lhost>
         <var vid="6083" vname="mask"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="303" origin="prim-exp" p-complexity="0">
     <location byte="195986" file="src/util.c" line="517"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6083" vname="mask"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="315"/>
       <node name="if-then"/>
       <node name="stmt" num="314"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="304" origin="prim-exp" p-complexity="0">
     <location byte="196012" file="src/util.c" line="519"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="6084" vname="i"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="return"/>
       <node name="stmt" num="316"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
