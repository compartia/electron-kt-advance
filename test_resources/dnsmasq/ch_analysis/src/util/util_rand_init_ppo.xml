<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <function name="rand_init">
   <statistics avg-context-complexity="1.44" avg-predicate-complexity="0.02" context-complexity="75" predicate-complexity="1" size="52"/>
   <unconstrained-external-functions>
    <efn name="dnsmasq/die" num="3"/>
   </unconstrained-external-functions>
   <primary-proof-obligations>
    <proof-obligation c-complexity="0" fname="open" id="1" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="not-null">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="path" nr="1" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="open" id="2" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="null-terminated">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="path" nr="1" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="open" id="3" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="path" nr="1" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="open" id="4" name="deref-read-nt" origin="f-pre" p-complexity="1">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate op="pluspi" tag="ptr-upper-bound">
      <typ ikind="ichar" ttag="tint"/>
      <exp1 etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp1>
      <exp2 cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;/dev/urandom&quot;]">
       <arg etag="const" xstr="&quot;/dev/urandom&quot;">
        <constant ctag="cstr" strValue="/dev/urandom"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </exp2>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="path" nr="1" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" fname="open" id="5" name="deref-read-nt" origin="f-pre" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="initialized-range">
      <base-exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </base-exp>
      <len-exp cn="null-terminator-pos" etag="cnapp" xstr="null-terminator-pos[&quot;/dev/urandom&quot;]">
       <arg etag="const" xstr="&quot;/dev/urandom&quot;">
        <constant ctag="cstr" strValue="/dev/urandom"/>
       </arg>
       <typ ikind="iint" ttag="tint"/>
      </len-exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context/>
     </context>
     <args>
      <exp etag="const" name="path" nr="1" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </args>
     <precondition name="deref-read-nt">
      <math>
       <apply>
        <deref-read/>
        <ci>path</ci>
        <apply>
         <index-size/>
         <apply>
          <nullterminator-pos/>
          <ci>path</ci>
         </apply>
        </apply>
       </apply>
      </math>
     </precondition>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="6" origin="prim-exp" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="valid-mem">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="7" origin="prim-exp" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="lower-bound">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="8" origin="prim-exp" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="upper-bound">
      <exp etag="const" xstr="&quot;/dev/urandom&quot;">
       <constant ctag="cstr" strValue="/dev/urandom"/>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="9" origin="prim-exp" p-complexity="0">
     <location byte="186614" file="src/util.c" line="40"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5906" vname="tmp"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="1"/>
       <node name="stmt" num="1"/>
      </cfg-context>
      <exp-context>
       <node name="rhs"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="10" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="2op" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="11" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
       <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="12" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="13" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="14" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="15" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="16" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="17" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="18" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="19" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="3"/>
       <node name="if-then"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="20" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="21" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tarray">
       <exp etag="const" xstr="32">
        <constant ctag="cint64" ikind="iint" intValue="32"/>
       </exp>
       <typ ikind="iuint" ttag="tint"/>
      </tfrom>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (seed)">
       <lval>
        <lhost>
         <var vid="5900" vname="seed"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="22" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (seed):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (seed)">
        <lval>
         <lhost>
          <var vid="5900" vname="seed"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="23" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (seed):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (seed)">
        <lval>
         <lhost>
          <var vid="5900" vname="seed"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="24" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (seed):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (seed)">
        <lval>
         <lhost>
          <var vid="5900" vname="seed"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="25" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="sizeofe" xstr="sizeof(seed)">
       <exp etag="lval" xstr="seed">
        <lval>
         <lhost>
          <var vid="5900" vname="seed"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="4"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="1" id="26" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5908" vname="tmp___0"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="27" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="28" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tarray">
       <exp etag="const" xstr="12">
        <constant ctag="cint64" ikind="iint" intValue="12"/>
       </exp>
       <typ ikind="iuint" ttag="tint"/>
      </tfrom>
      <tto ikind="iuchar" ttag="tint"/>
      <exp etag="addrof" xstr="addrof (in)">
       <lval>
        <lhost>
         <var vid="5901" vname="in"/>
        </lhost>
       </lval>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="29" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (addrof (in):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (in)">
        <lval>
         <lhost>
          <var vid="5901" vname="in"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="30" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (addrof (in):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (in)">
        <lval>
         <lhost>
          <var vid="5901" vname="in"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="31" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (addrof (in):(unsigned char*))">
       <typ ttag="tptr">
        <typ ikind="iuchar" ttag="tint"/>
       </typ>
       <exp etag="addrof" xstr="addrof (in)">
        <lval>
         <lhost>
          <var vid="5901" vname="in"/>
         </lhost>
        </lval>
       </exp>
      </exp>
      <typ ikind="iuchar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="32" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate from="iulong" tag="unsigned-to-signed-cast" to="iint">
      <exp etag="sizeofe" xstr="sizeof(in)">
       <exp etag="lval" xstr="in">
        <lval>
         <lhost>
          <var vid="5901" vname="in"/>
         </lhost>
        </lval>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="6"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="2"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="33" origin="prim-exp" p-complexity="0">
     <location byte="186652" file="src/util.c" line="42"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5910" vname="tmp___1"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="if-expr"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context/>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="34" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
       <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="35" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="36" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="37" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="38" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="39" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="40" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="41" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="3" id="42" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="8"/>
       <node name="if-else"/>
       <node name="stmt" num="7"/>
       <node name="if-then"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="43" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ikind="ichar" ttag="tint"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
       <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="44" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="45" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="46" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (&quot;failed to seed the random number generator: %s&quot;:(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="const" xstr="&quot;failed to seed the random number generator: %s&quot;">
        <constant ctag="cstr" strValue="failed to seed the random number generator: %s"/>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="47" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="pointer-cast">
      <tfrom ttag="tvoid"/>
      <tto ikind="ichar" ttag="tint"/>
      <exp etag="caste" xstr="caste (0:(void*))">
       <typ ttag="tptr">
        <typ ttag="tvoid"/>
       </typ>
       <exp etag="const" xstr="0">
        <constant ctag="cint64" ikind="iint" intValue="0"/>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="48" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="cast">
      <tfrom ikind="iint" ttag="tint"/>
      <tto ttag="tptr">
       <typ ttag="tvoid"/>
      </tto>
      <exp etag="const" xstr="0">
       <constant ctag="cint64" ikind="iint" intValue="0"/>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="cast"/>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="49" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="valid-mem">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="50" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="lower-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="2" id="51" origin="prim-exp" p-complexity="0">
     <location byte="186798" file="src/util.c" line="45"/>
     <predicate tag="upper-bound">
      <exp etag="caste" xstr="caste (caste (0:(void*)):(char*))">
       <typ ttag="tptr">
        <typ ikind="ichar" ttag="tint"/>
       </typ>
       <exp etag="caste" xstr="caste (0:(void*))">
        <typ ttag="tptr">
         <typ ttag="tvoid"/>
        </typ>
        <exp etag="const" xstr="0">
         <constant ctag="cint64" ikind="iint" intValue="0"/>
        </exp>
       </exp>
      </exp>
      <typ ikind="ichar" ttag="tint"/>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="9"/>
       <node name="if-else"/>
       <node name="stmt" num="5"/>
       <node name="if-else"/>
       <node name="stmt" num="2"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="1"/>
      </exp-context>
     </context>
    </proof-obligation>
    <proof-obligation c-complexity="0" id="52" origin="prim-exp" p-complexity="0">
     <location byte="186874" file="src/util.c" line="47"/>
     <predicate tag="initialized">
      <lval>
       <lhost>
        <var vid="5905" vname="fd"/>
       </lhost>
      </lval>
     </predicate>
     <context>
      <cfg-context>
       <node name="instr" num="0"/>
       <node name="stmt" num="10"/>
      </cfg-context>
      <exp-context>
       <node name="arg" num="0"/>
      </exp-context>
     </context>
    </proof-obligation>
   </primary-proof-obligations>
  </function>
  <header time="01/09/2017 21:38:51">
   <application file="src/util.xml" name="application"/>
  </header>
 </c-analysis>
