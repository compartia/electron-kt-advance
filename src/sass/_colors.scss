$transparent: rgba(0,0,0,0);

$color-brand-1: #F4C74D;
$color-brand-2: #662D91;

$red: #EF2060;
$yellow: $color-brand-1;
$green: hsl(140, 60, 80);
$ian_gillan: $color-brand-2;
$blue: #4397CE;

$base-bg: mix($ian_gillan, $blue, 40%);

$grey: hsl(hue($ian_gillan), 5, 50);
$grey-lighter: hsl(hue($ian_gillan), 5, 70);
$grey-80: hsl(hue($ian_gillan), 5, 80);

$po-open: $yellow;
$po-violation: $red;
$po-discharged: $green;
$po-assumption: hsl(hue($ian_gillan), 25, 85);

$main-bg: lighten($base-bg, 50%);
$side-bg: mix($base-bg, $main-bg, 5%);
$side-bg-t: transparentize($side-bg, 0.7);
$side-bg-2: mix($side-bg, $base-bg, 85%);


$selection-bg: $side-bg-2;
$selection-border: darken($selection-bg, 20%);

$selection-lt-bg: $side-bg;
$selection-lt-border: darken($selection-lt-bg, 20%);

$selection-md-bg:  mix($selection-bg,$selection-lt-bg, 50%);


$highlight: transparentize($selection-bg, 0.7);
$highlight-hover: transparentize($selection-bg, 0.35);

$kt-out-edge: lighten($red, 5%);
$kt-in-edge: $blue;


$base-bg-lighten: lighten($base-bg, 47%);

:root {
    --brand-color: #{$color-brand-2};


    --separator                           :rgba(0,0,0,0.05);

    --selection-lt-bg                     : #{ $selection-lt-bg};
    --selection-bg                        : #{ $selection-bg};
    --selection-md-bg                     : #{ $selection-md-bg};
    --selection-tx                        : #{ $base-bg};

    --kt-po-primary-tx                    : #{ darken($ian_gillan, 1%) };
    --kt-po-secondary-tx                  : #{ darken($side-bg,50%) };

    --kt-side-bg                          : #{ $side-bg};
    --kt-panel-bg                         : #{ lighten($base-bg, 47%) };
    --kt-side-bg-2                        : #{ $side-bg-2};
    --kt-main-bg                          : #{ $main-bg};
    --kt-main-bg-t80                      : #{ fade_out($main-bg, 0.1) };

    --paper-tree-selected-background-color: #{$selection-bg};

    /* == = = == =  = = = = = */

    --kt-red                              : #{ $red};
    --kt-green                            : #{ $green};
    --kt-yellow                           : #{ $yellow};

    --kt-orange                           : #{ mix($yellow, $red, 55%) } ;

    --kt-violet                           : #{ $ian_gillan };
    --kt-violet-lighter                   : #{ lighten($ian_gillan, 10%) };
    --kt-node-fade                        : #{ lighten(desaturate($ian_gillan, 30%), 40%)};
    --kt-node-selected-border             : #{ $ian_gillan };

    --kt-grey                             : #{ $grey};
    --kt-grey-dark                        : #{ darken($grey, 20%) };
    --kt-text-color                       : #{ darken($grey, 20%)};
    --kt-grey-light                       : #{ lighten($grey,30%)};
    --kt-grey-lighter                     : #{ lighten($grey, 50%)};

    --kt-edge                             : #{ lighten($grey,30%) };
    --kt-edge-end                         : #{ lighten($grey,40%) };
    --kt-edge-highlight                   : #{ lighten($ian_gillan, 5%) };

    --kt-out-edge-highlight               : #{ $kt-out-edge};
    --kt-in-edge-highlight                : #{ $kt-in-edge};

    --kt-out-edge-bg                      : #{ transparentize($kt-out-edge, 0.65) };
    --kt-in-edge-bg                       : #{ transparentize($kt-in-edge, 0.65) };
    --kt-out-edge-bg-hover                : #{ transparentize($kt-out-edge, 0.45) };
    --kt-in-edge-bg-hover                 : #{ transparentize($kt-in-edge, 0.45) };

    --kt-edge-text                        : #{ darken($grey, 20%)};

    /* STATES =========== */

    $po-saturation                        : 75;
    $po-brightness                        : 60;


    // a("dependent on other functions"), f("dependent on context"), i(
    //     "unknown"), s("dependent on itself"), x("dead code");

    $discharges                           : (          
        x: hsl(10, $po-saturation, $po-brightness), 
        f: hsl(240, $po-saturation, $po-brightness), 
        a: hsl(210, $po-saturation, $po-brightness), 
        s: hsl(270, $po-saturation, $po-brightness), 
        i: $grey-80);

    $astates                               : ( assumption: $po-assumption);        
    // $assumption_types                      : ( api: lighten($blue, 35%), global:lighten($ian_gillan, 50%));        

    // public enum AssumptionTypeCode {
        /** ATApiAssumptionType */
        // aa,

        /** ATPostconditionType */
        // pc,

        /** ATUserAssumptionType */
        // ua,

        /** Global Assumption */
        // ga
    // }
    $assumption_types                      : ( aa: lighten($blue, 35%), pc:lighten($ian_gillan, 50%), ga:#ff0000, ua:#33ff00);        

    $states                               : ( violation: $po-violation, discharged:$po-discharged , open: $po-open );
    $levels                               : ( primary: lighten($blue, 35%), secondary:lighten($ian_gillan, 50%));

    $callsitetypes                        : ( 
        dc: hsl(270, $po-saturation, $po-brightness), 
        ic: hsl(10, $po-saturation, $po-brightness), 
        rs: hsl(210, $po-saturation, $po-brightness));

    @each $discharge, $dcolor in $discharges {
        $_c                                        : $dcolor;
        $_hover                                    : hsl( hue($_c), saturation($_c), 93);
        --kt-discharge-#{$discharge}-hover-bg: #{$_hover};
    }

    @each $level, $lcolor in $levels {
        --kt-po-#{$level}-bg: #{ $lcolor};
        --kt-po-#{$level}-tx: #{ hsl( hue($lcolor), saturation($lcolor), 40) };
    }

    @each $kind, $scolor in $callsitetypes   {

    
        --kt-state-callsite-#{$kind}-bg        : #{hsl( hue($scolor), saturation($scolor), 93)};
        --kt-callee-#{$kind}-bg                : #{hsl( hue($scolor), saturation($scolor), 93)};


        .callee-#{$kind} {
            color      : #{$scolor};

            &:hover {
                background: hsl( hue($scolor), saturation($scolor), 93);
            }

        }
    }
    @each $state, $scolor in $astates {

        // --kt-state-#{$state}-default-bg      : #{$scolor};
        // --kt-state-#{$state}-default-tx      : #{ hsl( hue($scolor), saturation($scolor), 40) };
        // --kt-state-#{$state}-default-hover-bg: #{ hsl( hue($scolor), saturation($scolor), 90) };

        // .po-#{$state}-default {
        //     border-left: 3px solid var(--kt-state-#{$state}-default-bg);
        //     color      : var(--kt-state-#{$state}-default-tx);

        //     &:hover {
        //         background: var(--kt-state-#{$state}-default-hover-bg);
        //     }

        // }


        @each $atype, $dcolor in $assumption_types {
            $_c                                        : mix($scolor, $dcolor, 70%);
            $_bg                                       : hsl( hue($_c), saturation($scolor), lightness($scolor));
            $_tx                                       : hsl( hue($_c), saturation($scolor), 40);
            $_hover                                    : hsl( hue($_c), saturation($scolor), 90);

            --kt-state-#{$state}-#{$atype}-bg      : #{$_bg};
            --kt-state-#{$state}-#{$atype}-tx      : #{$_tx};
            --kt-state-#{$state}-#{$atype}-hover-bg: #{$_hover};

            .po-#{$state}-#{$atype} {
                border-left-color: var(--kt-state-#{$state}-#{$atype}-bg);
                color            : var(--kt-state-#{$state}-#{$atype}-tx);

                &:hover {
                    background: var(--kt-state-#{$state}-#{$atype}-hover-bg);
                }
            }
   

        }
         
    }

    @each $state, $scolor in $states {

        --kt-state-#{$state}-default-bg      : #{$scolor};
        --kt-state-#{$state}-default-tx      : #{ hsl( hue($scolor), saturation($scolor), 40) };
        --kt-state-#{$state}-default-hover-bg: #{ hsl( hue($scolor), saturation($scolor), 90) };

        .po-#{$state}-default {
            border-left: 3px solid var(--kt-state-#{$state}-default-bg);
            color      : var(--kt-state-#{$state}-default-tx);

            &:hover {
                background: var(--kt-state-#{$state}-default-hover-bg);
            }

        }
        @each $discharge, $dcolor in $discharges {
            $_c                                        : mix($scolor, $dcolor, 70%);
            $_bg                                       : hsl( hue($_c), saturation($scolor), lightness($scolor));
            $_tx                                       : hsl( hue($_c), saturation($scolor), 40);
            $_hover                                    : hsl( hue($_c), saturation($scolor), 90);

            --kt-state-#{$state}-#{$discharge}-bg      : #{$_bg};
            --kt-state-#{$state}-#{$discharge}-tx      : #{$_tx};
            --kt-state-#{$state}-#{$discharge}-hover-bg: #{$_hover};

            .po-#{$state}-#{$discharge} {
                border-left-color: var(--kt-state-#{$state}-#{$discharge}-bg);
                color            : var(--kt-state-#{$state}-#{$discharge}-tx);

                &:hover {
                    background: var(--kt-state-#{$state}-#{$discharge}-hover-bg);
                }
            }
            @each $level, $lcolor in $levels {

                $_lbg                                                : mix($_bg, $lcolor, 70%);
                $_ltx                                                : mix($_tx, $lcolor, 70%);
                $_lhv                                                : mix($_hover, $lcolor, 70%);

                --kt-state-#{$state}-#{$discharge}-#{$level}-bg      : #{ $_lbg};
                --kt-state-#{$state}-#{$discharge}-#{$level}-tx      : #{ hsl( hue($_ltx), saturation($_ltx), 40) };
                --kt-state-#{$state}-#{$discharge}-#{$level}-hover-bg: #{ hsl( hue($_lhv), saturation($_lhv), 90) };

            }

        }
    }

    /* =========== */
    --kt-hover                            : #{ lighten(desaturate($ian_gillan, 30%), 55%)};
    --kt-progress                         : #{ $color-brand-2 };

    --kt-complexity-p-bg                  : #{ desaturate(lighten($color-brand-2, 30%), 20%) };
    --kt-complexity-c-bg                  : #{ desaturate(lighten($color-brand-2, 40%), 20%) };
    --kt-complexity-g-bg                  : #{ desaturate(lighten($color-brand-2, 50%), 20%) };

    
    /* =========== */

    --kt-state-missing-bg: white;


    --side-bg-t: #{$side-bg-t};
}


